<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Learning and Doing</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-29T15:13:24.532Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhang Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【实战】一个响应式页面</title>
    <link href="http://yoursite.com/2018/08/16/2018.8.16/"/>
    <id>http://yoursite.com/2018/08/16/2018.8.16/</id>
    <published>2018-08-16T15:16:41.000Z</published>
    <updated>2018-08-29T15:13:24.532Z</updated>
    
    <content type="html"><![CDATA[<p>兼容电脑、ipad、手机的简单响应式页面<br><a id="more"></a></p>
<h1 id="HTML部分"><a href="#HTML部分" class="headerlink" title="HTML部分"></a>HTML部分</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>一个响应式页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"#"</span> <span class="attr">alt</span>=<span class="string">"xxx"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>诚实<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>守信<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>求是<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>创新<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"banner"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是一个响应式页面<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>描述111111111111111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>描述111111111111111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"products"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ol</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>描述2222222222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>描述2222222222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>描述2222222222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>描述2222222222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>描述2222222222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>描述2222222222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>描述2222222222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>描述2222222222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>描述2222222222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;兼容电脑、ipad、手机的简单响应式页面&lt;br&gt;
    
    </summary>
    
      <category term="HTML/CSS" scheme="http://yoursite.com/categories/HTML-CSS/"/>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>form、a、iframe 和 table 详解</title>
    <link href="http://yoursite.com/2018/08/13/2018.8.13/"/>
    <id>http://yoursite.com/2018/08/13/2018.8.13/</id>
    <published>2018-08-13T15:16:41.000Z</published>
    <updated>2018-08-27T23:40:53.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="a标签"><a href="#a标签" class="headerlink" title="a标签"></a>a标签</h1><h2 id="href"><a href="#href" class="headerlink" title="href"></a>href</h2><a id="more"></a>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 相对路径</span></div><div class="line">&lt;<span class="selector-tag">a</span> href=<span class="string">"./xxx"</span>&gt;点击&lt;/a&gt;</div><div class="line"></div><div class="line"><span class="comment">// 绝对路径</span></div><div class="line">&lt;<span class="selector-tag">a</span> href=<span class="string">"www.baidu.com"</span>&gt;点击&lt;/a&gt;</div><div class="line"></div><div class="line"><span class="comment">// 有协议路径</span></div><div class="line">&lt;<span class="selector-tag">a</span> href=<span class="string">"https://www.baidu.com"</span>&gt;点击&lt;/a&gt;</div><div class="line"></div><div class="line"><span class="comment">// 无协议路径(跟随文件所在协议)</span></div><div class="line">&lt;<span class="selector-tag">a</span> href=<span class="string">"//www.baidu.com"</span>&gt;点击&lt;/a&gt;</div><div class="line"></div><div class="line"><span class="comment">// javascipt: 伪协议</span></div><div class="line">&lt;<span class="selector-tag">a</span> href=<span class="string">"javascript:;"</span>&gt;点击&lt;/a&gt;</div><div class="line"></div><div class="line"><span class="comment">// 锚点（fragment）</span></div><div class="line">&lt;<span class="selector-tag">a</span> href=<span class="string">"#xxx"</span>&gt;点击&lt;/a&gt;</div><div class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"xxx"</span>&gt;<span class="number">2</span>&lt;/div&gt;</div></pre></td></tr></table></figure>
<h2 id="target"><a href="#target" class="headerlink" title="target"></a>target</h2><p>_blank:打开新窗口</p>
<p>_self:自身窗口打开</p>
<p>_top:最顶层窗口打开</p>
<p>_parent:父窗口打开</p>
<blockquote>
<p>a标签打开target给值都是窗口的name</p>
</blockquote>
<h2 id="download"><a href="#download" class="headerlink" title="download"></a>download</h2><h1 id="iframe标签"><a href="#iframe标签" class="headerlink" title="iframe标签"></a>iframe标签</h1><p>页面套页面</p>
<p>性能较低</p>
<p>name 属性</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://baidu.com"</span> <span class="attr">target</span>=<span class="string">"xxx"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"/b"</span> <span class="attr">name</span>=<span class="string">"xxx"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">900</span> <span class="attr">height</span>=<span class="string">900</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe" target="_blank" rel="external">其他属性</a></p>
<h1 id="table标签"><a href="#table标签" class="headerlink" title="table标签"></a>table标签</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/table" target="_blank" rel="external">table属性</a></p>
<h1 id="form构造get请求"><a href="#form构造get请求" class="headerlink" title="form构造get请求"></a>form构造get请求</h1><p>form的action请求路径</p>
<p>inpui的name和value分别对应请求参数的key和value,多个参数用&amp;连接</p>
<p>同个路径,不同请求参数对应不同页面</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">// index.html</div><div class="line">&lt;form action=<span class="string">"/"</span>&gt;</div><div class="line">	&lt;<span class="keyword">div</span>&gt;</div><div class="line">		&lt;input <span class="keyword">type</span>=<span class="string">"text"</span> name=<span class="string">"username"</span> &gt;</div><div class="line">	&lt;/<span class="keyword">div</span>&gt;</div><div class="line">	&lt;<span class="keyword">div</span>&gt;</div><div class="line">		&lt;input <span class="keyword">type</span>=<span class="string">"password"</span> name=<span class="string">"password"</span> &gt;</div><div class="line">	&lt;/<span class="keyword">div</span>&gt;</div><div class="line">	&lt;<span class="keyword">div</span>&gt;</div><div class="line">		&lt;input <span class="keyword">type</span>=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</div><div class="line">	&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/form&gt;</div><div class="line"></div><div class="line">// server.js</div><div class="line"><span class="keyword">if</span>(path === <span class="string">"/"</span>)&#123;</div><div class="line">	<span class="keyword">var</span> <span class="built_in">string</span> = fs.readFileSync(<span class="string">"./index.html"</span>)</div><div class="line">	response.setHeader(<span class="string">"Content-type"</span>,<span class="string">"text/html;charset=utf-8"</span>)</div><div class="line">	<span class="keyword">if</span>(query.username)&#123;</div><div class="line">		response.<span class="keyword">end</span>(<span class="string">"你好"</span> + query.username)</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		response.<span class="keyword">end</span>(<span class="built_in">string</span>)</div><div class="line">	&#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">	response.<span class="keyword">end</span>(<span class="string">"404"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="form构造post请求"><a href="#form构造post请求" class="headerlink" title="form构造post请求"></a>form构造post请求</h1><p>get 和 post 的区别</p>
<ul>
<li>消息体：get 没有，post 有</li>
<li>查询参数：get 一般使用查询参数，post 一般不使用</li>
<li>URL 长度：get 的 URL 存在长度限制（1024个字符等），post 没有限制（其实也有）</li>
<li>安全性：post 比 get 安全一丢丢，因为 post 需要用 form 来构造，而 get 可以轻易构造</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// index.html</div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> &gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> &gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;a标签&quot;&gt;&lt;a href=&quot;#a标签&quot; class=&quot;headerlink&quot; title=&quot;a标签&quot;&gt;&lt;/a&gt;a标签&lt;/h1&gt;&lt;h2 id=&quot;href&quot;&gt;&lt;a href=&quot;#href&quot; class=&quot;headerlink&quot; title=&quot;href&quot;&gt;&lt;/a&gt;href&lt;/h2&gt;
    
    </summary>
    
      <category term="HTML/CSS" scheme="http://yoursite.com/categories/HTML-CSS/"/>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>【实战】PHP + MySQL新闻网</title>
    <link href="http://yoursite.com/2018/08/09/2018.8.9/"/>
    <id>http://yoursite.com/2018/08/09/2018.8.9/</id>
    <published>2018-08-09T15:16:41.000Z</published>
    <updated>2018-08-20T14:06:45.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我在生le"><a href="#我在生le" class="headerlink" title="我在生le"></a>我在生le</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;我在生le&quot;&gt;&lt;a href=&quot;#我在生le&quot; class=&quot;headerlink&quot; title=&quot;我在生le&quot;&gt;&lt;/a&gt;我在生le&lt;/h1&gt;
    
    </summary>
    
      <category term="BackEnd" scheme="http://yoursite.com/categories/BackEnd/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2018/08/06/2018.8.6/"/>
    <id>http://yoursite.com/2018/08/06/2018.8.6/</id>
    <published>2018-08-06T15:16:41.000Z</published>
    <updated>2018-08-22T14:16:41.266Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式简介"><a href="#正则表达式简介" class="headerlink" title="正则表达式简介"></a>正则表达式简介</h1><p>正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串<br><a id="more"></a></p>
<h1 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h1><p>新建正则表达式有两种方法。一种是使用字面量，以斜杠表示开始和结束;另一种是使用RegExp构造函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 两种写法是等价的，都新建了一个内容为xyz的正则表达式对象</span></div><div class="line"><span class="keyword">var</span> regex = <span class="regexp">/xyz/</span>;</div><div class="line"><span class="comment">// 等价于</span></div><div class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'xyz'</span>);</div><div class="line"></div><div class="line"><span class="comment">// RegExp构造函数还可以接受第二个参数，表示修饰符</span></div><div class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'xyz'</span>, <span class="string">'i'</span>);</div><div class="line"><span class="comment">// 等价于</span></div><div class="line"><span class="keyword">var</span> regex = <span class="regexp">/xyz/i</span>;</div></pre></td></tr></table></figure>
<h1 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h1><p>正则对象的实例属性分成两类</p>
<p>一类是修饰符相关，返回一个布尔值，表示对应的修饰符是否设置</p>
<ul>
<li>RegExp.prototype.ignoreCase：返回一个布尔值，表示是否设置了i修饰符</li>
<li>RegExp.prototype.global：返回一个布尔值，表示是否设置了g修饰符</li>
<li>RegExp.prototype.multiline：返回一个布尔值，表示是否设置了m修饰符</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var r = <span class="regexp">/abc/igm</span>;</div><div class="line"></div><div class="line">r.ignoreCase <span class="regexp">//</span> <span class="literal">true</span></div><div class="line">r.<span class="built_in">global</span> <span class="regexp">//</span> <span class="literal">true</span></div><div class="line">r.multiline <span class="regexp">//</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>另一类是与修饰符无关的属性，主要是下面两个</p>
<ul>
<li>RegExp.prototype.lastIndex：返回一个数值，表示下一次开始搜索的位置</li>
<li>RegExp.prototype.source：返回正则表达式的字符串形式（不包括反斜杠），该属性只读</li>
</ul>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var r = <span class="regexp">/abc/igm</span>;</div><div class="line"></div><div class="line">r.lastIndex <span class="regexp">//</span> <span class="number">0</span></div><div class="line">r.source <span class="regexp">//</span> <span class="string">"abc"</span></div></pre></td></tr></table></figure>
<h1 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h1><h2 id="RegExp-prototype-test"><a href="#RegExp-prototype-test" class="headerlink" title="RegExp.prototype.test()"></a>RegExp.prototype.test()</h2><p>正则实例对象的test方法返回一个布尔值，表示当前模式是否能匹配参数字符串</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 验证参数字符串之中是否包含cat，结果返回true</span></div><div class="line">/cat/.test(<span class="string">'cats and dogs'</span>) <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// 正则表达式使用了g修饰符，表示是全局搜索，会有多个结果</span></div><div class="line"><span class="comment">// 三次使用test方法，每一次开始搜索的位置都是上一次匹配的后一个位置</span></div><div class="line"><span class="keyword">var</span> r = <span class="regexp">/x/g</span>;</div><div class="line"><span class="keyword">var</span> s = <span class="string">'_x_x'</span>;</div><div class="line"></div><div class="line">r.lastIndex <span class="comment">// 0</span></div><div class="line">r.test(s) <span class="comment">// true</span></div><div class="line"></div><div class="line">r.lastIndex <span class="comment">// 2</span></div><div class="line">r.test(s) <span class="comment">// true</span></div><div class="line"></div><div class="line">r.lastIndex <span class="comment">// 4</span></div><div class="line">r.test(s) <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="comment">// 带有g修饰符时，可以通过正则对象的lastIndex属性指定开始搜索的位置</span></div><div class="line"><span class="comment">// 从字符串的第五个位置开始搜索，这个位置是没有字符的，所以返回false</span></div><div class="line"><span class="keyword">var</span> r = <span class="regexp">/x/g</span>;</div><div class="line"><span class="keyword">var</span> s = <span class="string">'_x_x'</span>;</div><div class="line"></div><div class="line">r.lastIndex = <span class="number">4</span>;</div><div class="line">r.test(s) <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="comment">// 如果正则模式是一个空字符串，则匹配所有字符串</span></div><div class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">''</span>).test(<span class="string">'abc'</span>) <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h2 id="RegExp-prototype-exec"><a href="#RegExp-prototype-exec" class="headerlink" title="RegExp.prototype.exec()"></a>RegExp.prototype.exec()</h2><p>正则实例对象的exec方法，用来返回匹配结果。如果发现匹配，就返回一个数组，成员是匹配成功的子字符串，否则返回null</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 正则对象r1匹配成功，返回一个数组，成员是匹配结果；正则对象r2匹配失败，返回null</span></div><div class="line"><span class="keyword">var</span> s = <span class="string">'_x_x'</span>;</div><div class="line"><span class="keyword">var</span> r1 = <span class="regexp">/x/</span>;</div><div class="line"><span class="keyword">var</span> r2 = <span class="regexp">/y/</span>;</div><div class="line"></div><div class="line">r1.exec(s) <span class="comment">// ["x"]</span></div><div class="line">r2.exec(s) <span class="comment">// null</span></div></pre></td></tr></table></figure>
<p>如果正则表示式包含圆括号，则返回的数组会包括多个成员</p>
<p>第一个成员是整个匹配成功的结果，后面的成员就是圆括号对应的匹配成功的组</p>
<p>第二个成员对应第一个括号,整个数组的length属性等于组匹配的数量再加1</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> 第一个成员是整个匹配的结果，第二个成员是圆括号匹配的结果</div><div class="line">var s = <span class="string">'_x_x'</span>;</div><div class="line">var r = <span class="regexp">/_(x)/</span>;</div><div class="line"></div><div class="line">r.exec(s) <span class="regexp">//</span> [<span class="string">"_x"</span>, <span class="string">"x"</span>]</div></pre></td></tr></table></figure>
<p>exec方法的返回数组包含以下两个属性</p>
<ul>
<li>input：整个原字符串。</li>
<li>index：整个模式匹配成功的开始位置（从0开始计数）</li>
</ul>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> index属性等于<span class="number">1</span>，是因为从原字符串的第二个位置开始匹配成功</div><div class="line">var r = <span class="regexp">/a(b+)a/</span>;</div><div class="line">var arr = r.exec(<span class="string">'_abbba_aba_'</span>);</div><div class="line"></div><div class="line">arr <span class="regexp">//</span> [<span class="string">"abbba"</span>, <span class="string">"bbb"</span>]</div><div class="line"></div><div class="line">arr.index <span class="regexp">//</span> <span class="number">1</span></div><div class="line">arr.input <span class="regexp">//</span> <span class="string">"_abbba_aba_"</span></div></pre></td></tr></table></figure>
<h1 id="字符串的实例方法"><a href="#字符串的实例方法" class="headerlink" title="字符串的实例方法"></a>字符串的实例方法</h1><p>字符串的实例方法之中，有4种与正则表达式有关</p>
<ul>
<li>String.prototype.match()：返回一个数组，成员是所有匹配的子字符串</li>
<li>String.prototype.search()：按照给定的正则表达式进行搜索，返回一个整数，表示匹配开始的位置</li>
<li>String.prototype.replace()：按照给定的正则表达式进行替换，返回替换后的字符串</li>
<li>String.prototype.split()：按照给定规则进行字符串分割，返回一个数组，包含分割后的各个成员</li>
</ul>
<h2 id="String-prototype-match"><a href="#String-prototype-match" class="headerlink" title="String.prototype.match()"></a>String.prototype.match()</h2><p>字符串实例对象的match方法对字符串进行正则匹配，返回匹配结果</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 字符串的match方法与正则对象的exec方法非常类似：匹配成功返回一个数组，匹配失败返回null</span></div><div class="line"><span class="keyword">var</span> s = <span class="string">'_x_x'</span>;</div><div class="line"><span class="keyword">var</span> r1 = <span class="regexp">/x/</span>;</div><div class="line"><span class="keyword">var</span> r2 = <span class="regexp">/y/</span>;</div><div class="line"></div><div class="line">s.match(r1) <span class="comment">// ["x"]</span></div><div class="line">s.match(r2) <span class="comment">// null</span></div><div class="line"></div><div class="line"><span class="comment">// 如果正则表达式带有g修饰符，则该方法与正则对象的exec方法行为不同，会一次性返回所有匹配成功的结果</span></div><div class="line"><span class="keyword">var</span> s = <span class="string">'abba'</span>;</div><div class="line"><span class="keyword">var</span> r = <span class="regexp">/a/g</span>;</div><div class="line"></div><div class="line">s.match(r) <span class="comment">// ["a", "a"]</span></div><div class="line">r.exec(s) <span class="comment">// ["a"]</span></div><div class="line"></div><div class="line"><span class="comment">// 设置正则表达式的lastIndex属性，对match方法无效，匹配总是从字符串的第一个字符开始</span></div><div class="line"><span class="keyword">var</span> r = <span class="regexp">/a|b/g</span>;</div><div class="line">r.lastIndex = <span class="number">7</span>;</div><div class="line"><span class="string">'xaxb'</span>.match(r) <span class="comment">// ['a', 'b']</span></div><div class="line">r.lastIndex <span class="comment">// 0</span></div></pre></td></tr></table></figure>
<h2 id="String-prototype-search"><a href="#String-prototype-search" class="headerlink" title="String.prototype.search()"></a>String.prototype.search()</h2><p>字符串对象的search方法，返回第一个满足条件的匹配结果在整个字符串中的位置。如果没有任何匹配，则返回-1</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> 第一个匹配结果出现在字符串的<span class="number">1</span>号位置</div><div class="line"><span class="string">'_x_x'</span>.search(<span class="regexp">/x/</span>) <span class="regexp">//</span> <span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="String-prototype-replace"><a href="#String-prototype-replace" class="headerlink" title="String.prototype.replace()"></a>String.prototype.replace()</h2><p>字符串对象的replace方法可以替换匹配的值。它接受两个参数，第一个是正则表达式，表示搜索模式，第二个是替换的内容</p>
<p>正则表达式如果不加g修饰符，就替换第一个匹配成功的值，否则替换所有匹配成功的值</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> 最后一个正则表达式使用了g修饰符，导致所有的b都被替换掉了</div><div class="line"><span class="string">'aaa'</span>.replace(<span class="string">'a'</span>, <span class="string">'b'</span>) <span class="regexp">//</span> <span class="string">"baa"</span></div><div class="line"><span class="string">'aaa'</span>.replace(<span class="regexp">/a/</span>, <span class="string">'b'</span>) <span class="regexp">//</span> <span class="string">"baa"</span></div><div class="line"><span class="string">'aaa'</span>.replace(<span class="regexp">/a/g</span>, <span class="string">'b'</span>) <span class="regexp">//</span> <span class="string">"bbb"</span></div><div class="line"></div><div class="line"><span class="regexp">//</span> replace方法的一个应用，就是消除字符串首尾两端的空格</div><div class="line">str.replace(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">''</span>) <span class="regexp">//</span> <span class="string">"#id div.class"</span></div></pre></td></tr></table></figure>
<p>replace方法的第二个参数可以使用美元符号$，用来指代所替换的内容</p>
<ul>
<li>$&amp;：匹配的子字符串</li>
<li>$`：匹配结果前面的文本</li>
<li>$’：匹配结果后面的文本</li>
<li>$n：匹配成功的第n组内容，n是从1开始的自然数</li>
<li>$$：指代美元符号$</li>
</ul>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> 第一个例子是将匹配的组互换位置，第二个例子是改写匹配的值</div><div class="line"><span class="string">'hello world'</span>.replace(<span class="regexp">/(\w+)\s(\w+)/</span>, <span class="string">'$2 $1'</span>)</div><div class="line"><span class="regexp">//</span> <span class="string">"world hello"</span></div><div class="line"></div><div class="line"><span class="string">'abc'</span>.replace(<span class="string">'b'</span>, <span class="string">'[$`-$&amp;-$\']'</span>)</div><div class="line"><span class="regexp">//</span> <span class="string">"a[a-b-c]c"</span></div></pre></td></tr></table></figure>
<h2 id="String-prototype-split"><a href="#String-prototype-split" class="headerlink" title="String.prototype.split()"></a>String.prototype.split()</h2><p>字符串对象的split方法按照正则规则分割字符串，返回一个由分割后的各个部分组成的数组</p>
<p>该方法接受两个参数，第一个参数是正则表达式，表示分隔规则，第二个参数是返回数组的最大成员数</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> 上面代码使用正则表达式，去除了子字符串的逗号后面的空格</div><div class="line"><span class="regexp">//</span> 非正则分隔</div><div class="line"><span class="string">'a,  b,c, d'</span>.split(<span class="string">','</span>)</div><div class="line"><span class="regexp">//</span> [ <span class="string">'a'</span>, <span class="string">'  b'</span>, <span class="string">'c'</span>, <span class="string">' d'</span> ]</div><div class="line"></div><div class="line"><span class="regexp">//</span> 正则分隔，去除多余的空格</div><div class="line"><span class="string">'a,  b,c, d'</span>.split(<span class="regexp">/, */</span>)</div><div class="line"><span class="regexp">//</span> [ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span> ]</div><div class="line"></div><div class="line"><span class="regexp">//</span> 指定返回数组的最大成员</div><div class="line"><span class="string">'a,  b,c, d'</span>.split(<span class="regexp">/, */</span>, <span class="number">2</span>)</div><div class="line">[ <span class="string">'a'</span>, <span class="string">'b'</span> ]</div></pre></td></tr></table></figure>
<h1 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h1><h2 id="字面量字符和元字符"><a href="#字面量字符和元字符" class="headerlink" title="字面量字符和元字符"></a>字面量字符和元字符</h2><p>大部分字符在正则表达式中，就是字面的含义，比如/a/匹配a，/b/匹配b</p>
<p>某个字符只表示它字面的含义（就像前面的a和b），那么它们就叫做“字面量字符”</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> 正则表达式的dog，就是字面量字符，所以<span class="regexp">/dog/</span>匹配old dog，因为它就表示d、o、g三个字母连在一起</div><div class="line"><span class="regexp">/dog/</span>.test(<span class="string">'old dog'</span>) <span class="regexp">//</span> true</div></pre></td></tr></table></figure>
<p>一部分字符有特殊含义，不代表字面的意思。它们叫做“元字符”</p>
<h3 id="点字符（"><a href="#点字符（" class="headerlink" title="点字符（.)"></a>点字符（.)</h3><p>点字符（.）匹配除回车（\r）、换行(\n) 、行分隔符（\u2028）和段分隔符（\u2029）以外的所有字符</p>
<figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// <span class="keyword">c</span>.t匹配<span class="keyword">c</span>和t之间包含任意一个字符的情况，只要这三个字符在同一行，比如cat、<span class="keyword">c</span><span class="number">2</span>t、<span class="keyword">c</span>-t等等，但是不匹配coot</div><div class="line">/<span class="keyword">c</span>.t/</div></pre></td></tr></table></figure>
<h3 id="位置字符"><a href="#位置字符" class="headerlink" title="位置字符"></a>位置字符</h3><p>位置字符用来提示字符所处的位置，主要有两个字符</p>
<ul>
<li>^表示字符串的开始位置</li>
<li>$表示字符串的结束位置</li>
</ul>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// test必须出现在开始位置</span></div><div class="line">/^<span class="keyword">test</span>/.<span class="keyword">test</span>('test123') <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// test必须出现在结束位置</span></div><div class="line">/<span class="keyword">test</span>$/.<span class="keyword">test</span>('new <span class="keyword">test</span>') <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// 从开始位置到结束位置只有test</span></div><div class="line">/^<span class="keyword">test</span>$/.<span class="keyword">test</span>('<span class="keyword">test</span>') <span class="comment">// true</span></div><div class="line">/^<span class="keyword">test</span>$/.<span class="keyword">test</span>('<span class="keyword">test</span> <span class="keyword">test</span>') <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h3 id="选择符（-）"><a href="#选择符（-）" class="headerlink" title="选择符（|）"></a>选择符（|）</h3><p>竖线符号（|）在正则表达式中表示“或关系”（OR），即cat|dog表示匹配cat或dog</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 正则表达式指定必须匹配11或22</span></div><div class="line">/<span class="number">11</span>|<span class="number">22</span>/.test('<span class="number">911</span>') <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h2 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h2><p>正则表达式中那些有特殊含义的元字符，如果要匹配它们本身，就需要在它们前面要加上反斜杠。比如要匹配+，就要写成+</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一个正则表达式之所以不匹配，因为加号是元字符，不代表自身</span></div><div class="line"><span class="comment">// 第二个正则表达式使用反斜杠对加号转义，就能匹配成功</span></div><div class="line">/<span class="number">1</span>+<span class="number">1</span>/.test('<span class="number">1</span>+<span class="number">1</span>')</div><div class="line"><span class="comment">// false</span></div><div class="line"></div><div class="line">/<span class="number">1</span>\+<span class="number">1</span>/.test('<span class="number">1</span>+<span class="number">1</span>')</div><div class="line"><span class="comment">// true</span></div></pre></td></tr></table></figure>
<h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><ul>
<li>\cX 表示Ctrl-[X]，其中的X是A-Z之中任一个英文字母，用来匹配控制字符</li>
<li>[\b] 匹配退格键(U+0008)，不要与\b混淆</li>
<li>\n 匹配换行键</li>
<li>\r 匹配回车键</li>
<li>\t 匹配制表符 tab（U+0009）</li>
<li>\v 匹配垂直制表符（U+000B）</li>
<li>\f 匹配换页符（U+000C）</li>
<li>\0 匹配null字符（U+0000）</li>
<li>\xhh 匹配一个以两位十六进制数（\x00-\xFF）表示的字符</li>
<li>\uhhhh 匹配一个以四位十六进制数（\u0000-\uFFFF）表示的 Unicode 字符</li>
</ul>
<h2 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h2><p>字符类（class）表示有一系列字符可供选择，只要匹配其中一个就可以了</p>
<p>所有可供选择的字符都放在方括号内，比如[xyz] 表示x、y、z之中任选一个匹配</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 字符串hello world不包含a、b、c这三个字母中的任一个，所以返回false；字符串apple包含字母a，所以返回true</span></div><div class="line"><span class="regexp">/[abc]/</span>.test(<span class="string">'hello world'</span>) <span class="comment">// false</span></div><div class="line"><span class="regexp">/[abc]/</span>.test(<span class="string">'apple'</span>) <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="脱字符（-）"><a href="#脱字符（-）" class="headerlink" title="脱字符（^）"></a>脱字符（^）</h3><p>如果方括号内的第一个字符是[^]，则表示除了字符类之中的字符，其他字符都可以匹配</p>
<p>比如，[^xyz]表示除了x、y、z之外都可以匹配</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 字符串hello world不包含字母a、b、c中的任一个，所以返回true；字符串bbc不包含a、b、c以外的字母，所以返回false</span></div><div class="line"><span class="regexp">/[^abc]/</span>.test(<span class="string">'hello world'</span>) <span class="comment">// true</span></div><div class="line"><span class="regexp">/[^abc]/</span>.test(<span class="string">'bbc'</span>) <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p>如果方括号内没有其他字符，即只有[^]，就表示匹配一切字符，其中包括换行符</p>
<p>相比之下，点号作为元字符（.）是不包括换行符的</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 字符串s含有一个换行符，点号不包括换行符，所以第一个正则表达式匹配失败</span></div><div class="line"><span class="comment">// 第二个正则表达式[^]包含一切字符，所以匹配成功</span></div><div class="line">var s = <span class="string">'Please yes\nmake my day!'</span>;</div><div class="line"></div><div class="line">s.<span class="built_in">match</span>(/yes.*<span class="built_in">day</span>/) <span class="comment">// null</span></div><div class="line">s.<span class="built_in">match</span>(/yes[^]*<span class="built_in">day</span>/) <span class="comment">// [ 'yes\nmake my day']</span></div></pre></td></tr></table></figure>
<h3 id="连字符（-）"><a href="#连字符（-）" class="headerlink" title="连字符（-）"></a>连字符（-）</h3><p>某些情况下，对于连续序列的字符，连字符（-）用来提供简写形式，表示字符的连续范围</p>
<p>比如，[abc]可以写成[a-c]，[0123456789]可以写成[0-9]，同理[A-Z]表示26个大写字母</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> 当连字号（dash）不出现在方括号之中，就不具备简写的作用，只代表字面的含义，所以不匹配字符b</div><div class="line"><span class="regexp">//</span> 只有当连字号用在方括号之中，才表示连续的字符序列</div><div class="line"><span class="regexp">/a-z/</span>.test(<span class="string">'b'</span>) <span class="regexp">//</span> false</div><div class="line"><span class="regexp">/[a-z]/</span>.test(<span class="string">'b'</span>) <span class="regexp">//</span> true</div></pre></td></tr></table></figure>
<p>合法的字符类简写形式</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="number">0</span><span class="number">-9.</span>,]</div><div class="line">[<span class="number">0</span><span class="number">-9</span>a-fA-F]</div><div class="line">[a-zA-Z0<span class="number">-9</span>-]</div></pre></td></tr></table></figure>
<h2 id="预定义模式"><a href="#预定义模式" class="headerlink" title="预定义模式"></a>预定义模式</h2><p>预定义模式指的是某些常见模式的简写方式</p>
<ul>
<li>\d 匹配0-9之间的任一数字，相当于[0-9]</li>
<li>\D 匹配所有0-9以外的字符，相当于[^0-9]</li>
<li>\w 匹配任意的字母、数字和下划线，相当于[A-Za-z0-9_]</li>
<li>\W 除所有字母、数字和下划线以外的字符，相当于[^A-Za-z0-9_]</li>
<li>\s 匹配空格（包括换行符、制表符、空格符等），相等于[ \t\r\n\v\f]</li>
<li>\S 匹配非空格的字符，相当于[^ \t\r\n\v\f]</li>
<li>\b 匹配词的边界</li>
<li>\B 匹配非词边界，即在词的内部</li>
</ul>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> \s表示空格，所以匹配结果会包括空格</div><div class="line"><span class="regexp">//</span> \b表示词的边界，所以world的词首必须独立（词尾是否独立未指定），才会匹配</div><div class="line"><span class="regexp">//</span> 同理，\B表示非词的边界，只有world的词首不独立，才会匹配</div><div class="line"><span class="regexp">//</span> \s 的例子</div><div class="line"><span class="regexp">/\s\w*/</span>.exec(<span class="string">'hello world'</span>) <span class="regexp">//</span> [<span class="string">" world"</span>]</div><div class="line"></div><div class="line"><span class="regexp">//</span> \b 的例子</div><div class="line"><span class="regexp">/\bworld/</span>.test(<span class="string">'hello world'</span>) <span class="regexp">//</span> true</div><div class="line"><span class="regexp">/\bworld/</span>.test(<span class="string">'hello-world'</span>) <span class="regexp">//</span> true</div><div class="line"><span class="regexp">/\bworld/</span>.test(<span class="string">'helloworld'</span>) <span class="regexp">//</span> false</div><div class="line"></div><div class="line"><span class="regexp">//</span> \B 的例子</div><div class="line"><span class="regexp">/\Bworld/</span>.test(<span class="string">'hello-world'</span>) <span class="regexp">//</span> false</div><div class="line"><span class="regexp">/\Bworld/</span>.test(<span class="string">'helloworld'</span>) <span class="regexp">//</span> true</div></pre></td></tr></table></figure>
<h2 id="重复类"><a href="#重复类" class="headerlink" title="重复类"></a>重复类</h2><p>模式的精确匹配次数，使用大括号（{}）表示</p>
<p>{n}表示恰好重复n次，{n,}表示至少重复n次，{n,m}表示重复不少于n次，不多于m次</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> 第一个模式指定o连续出现<span class="number">2</span>次，第二个模式指定o连续出现<span class="number">2</span>次到<span class="number">5</span>次之间</div><div class="line"><span class="regexp">/lo&#123;2&#125;k/</span>.test(<span class="string">'look'</span>) <span class="regexp">//</span> true</div><div class="line"><span class="regexp">/lo&#123;2,5&#125;k/</span>.test(<span class="string">'looook'</span>) <span class="regexp">//</span> true</div></pre></td></tr></table></figure>
<h2 id="量词符"><a href="#量词符" class="headerlink" title="量词符"></a>量词符</h2><p>量词符用来设定某个模式出现的次数</p>
<ul>
<li>?问号表示某个模式出现0次或1次，等同于{0, 1}</li>
<li>*星号表示某个模式出现0次或多次，等同于{0,}</li>
<li>+加号表示某个模式出现1次或多次，等同于{1,}</li>
</ul>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// t 出现0次或1次</span></div><div class="line">/t?<span class="keyword">est</span>/.<span class="keyword">test</span>('<span class="keyword">test</span>') <span class="comment">// true</span></div><div class="line">/t?<span class="keyword">est</span>/.<span class="keyword">test</span>('<span class="keyword">est</span>') <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// t 出现1次或多次</span></div><div class="line">/t+<span class="keyword">est</span>/.<span class="keyword">test</span>('<span class="keyword">test</span>') <span class="comment">// true</span></div><div class="line">/t+<span class="keyword">est</span>/.<span class="keyword">test</span>('<span class="keyword">ttest</span>') <span class="comment">// true</span></div><div class="line">/t+<span class="keyword">est</span>/.<span class="keyword">test</span>('<span class="keyword">est</span>') <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="comment">// t 出现0次或多次</span></div><div class="line">/t*<span class="keyword">est</span>/.<span class="keyword">test</span>('<span class="keyword">test</span>') <span class="comment">// true</span></div><div class="line">/t*<span class="keyword">est</span>/.<span class="keyword">test</span>('<span class="keyword">ttest</span>') <span class="comment">// true</span></div><div class="line">/t*<span class="keyword">est</span>/.<span class="keyword">test</span>('tttest') <span class="comment">// true</span></div><div class="line">/t*<span class="keyword">est</span>/.<span class="keyword">test</span>('<span class="keyword">est</span>') <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h2 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h2><p>量词符，默认情况下都是最大可能匹配，即匹配直到下一个字符不满足匹配规则为止。这被称为贪婪模式</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 默认是贪婪模式，会一直匹配到字符a不出现为止，所以匹配结果是3个a</span></div><div class="line">var s = <span class="string">'aaa'</span>;</div><div class="line">s.match<span class="comment">(/a+/)</span> <span class="comment">// ["aaa"]</span></div><div class="line"></div><div class="line"><span class="comment">// 贪婪模式改为非贪婪模式，可以在量词符后面加一个问号</span></div><div class="line">var s = <span class="string">'aaa'</span>;</div><div class="line">s.match<span class="comment">(/a+?/)</span> <span class="comment">// ["a"]</span></div></pre></td></tr></table></figure>
<ul>
<li>*?：表示某个模式出现0次或多次，匹配时采用非贪婪模式</li>
<li>+?：表示某个模式出现1次或多次，匹配时采用非贪婪模式</li>
</ul>
<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p>修饰符（modifier）表示模式的附加规则，放在正则模式的最尾部</p>
<p>修饰符可以单个使用，也可以多个一起使用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 单个修饰符</span></div><div class="line"><span class="keyword">var</span> regex = <span class="regexp">/test/i</span>;</div><div class="line"></div><div class="line"><span class="comment">// 多个修饰符</span></div><div class="line"><span class="keyword">var</span> regex = <span class="regexp">/test/ig</span>;</div></pre></td></tr></table></figure>
<h3 id="g-修饰符"><a href="#g-修饰符" class="headerlink" title="g 修饰符"></a>g 修饰符</h3><p>默认情况下，第一次匹配成功后，正则对象就停止向下匹配了</p>
<p>g修饰符表示全局匹配（global），加上它以后，正则对象将匹配全部符合条件的结果，主要用于搜索和替换</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 正则模式不含g修饰符，每次都是从字符串头部开始匹配</span></div><div class="line"><span class="comment">// 连续做了三次匹配，都返回true</span></div><div class="line">var regex = /b/;</div><div class="line">var <span class="keyword">str</span> = <span class="string">'abba'</span>;</div><div class="line"></div><div class="line">regex.test(<span class="keyword">str</span>); <span class="comment">// true</span></div><div class="line">regex.test(<span class="keyword">str</span>); <span class="comment">// true</span></div><div class="line">regex.test(<span class="keyword">str</span>); <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// 正则模式含有g修饰符，每次都是从上一次匹配成功处，开始向后匹配</span></div><div class="line"><span class="comment">// 因为字符串abba只有两个b，所以前两次匹配结果为true，第三次匹配结果为false</span></div><div class="line">var regex = /b/g;</div><div class="line">var <span class="keyword">str</span> = <span class="string">'abba'</span>;</div><div class="line"></div><div class="line">regex.test(<span class="keyword">str</span>); <span class="comment">// true</span></div><div class="line">regex.test(<span class="keyword">str</span>); <span class="comment">// true</span></div><div class="line">regex.test(<span class="keyword">str</span>); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h3 id="i-修饰符"><a href="#i-修饰符" class="headerlink" title="i 修饰符"></a>i 修饰符</h3><p>默认情况下，正则对象区分字母的大小写，加上i修饰符以后表示忽略大小写</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> 加了i修饰符以后，不考虑大小写，所以模式abc匹配字符串ABC</div><div class="line"><span class="regexp">/abc/</span>.test(<span class="string">'ABC'</span>) <span class="regexp">//</span> false</div><div class="line"><span class="regexp">/abc/i</span>.test(<span class="string">'ABC'</span>) <span class="regexp">//</span> true</div></pre></td></tr></table></figure>
<h3 id="m-修饰符"><a href="#m-修饰符" class="headerlink" title="m 修饰符"></a>m 修饰符</h3><p>m修饰符表示多行模式（multiline），会修改^和$的行为</p>
<p>默认情况下（即不加m修饰符时），^和$匹配字符串的开始处和结尾处</p>
<p>加上m修饰符以后，^和$还会匹配行首和行尾，即^和$会识别换行符（\n）</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> 字符串结尾处有一个换行符。如果不加m修饰符，匹配不成功，因为字符串的结尾不是world</div><div class="line"><span class="regexp">//</span> 加上以后，$可以匹配行尾</div><div class="line"><span class="regexp">/world$/</span>.test(<span class="string">'hello world\n'</span>) <span class="regexp">//</span> false</div><div class="line"><span class="regexp">/world$/m</span>.test(<span class="string">'hello world\n'</span>) <span class="regexp">//</span> true</div><div class="line"></div><div class="line"><span class="regexp">//</span> 匹配行首的b，如果不加m修饰符，就相当于b只能处在字符串的开始处</div><div class="line"><span class="regexp">//</span> 加上b修饰符以后，换行符\n也会被认为是一行的开始</div><div class="line"><span class="regexp">/^b/m</span>.test(<span class="string">'a\nb'</span>) <span class="regexp">//</span> true</div></pre></td></tr></table></figure>
<h2 id="组匹配"><a href="#组匹配" class="headerlink" title="组匹配"></a>组匹配</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>正则表达式的括号表示分组匹配，括号中的模式可以用来匹配分组的内容</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> 第一个模式没有括号，结果+只表示重复字母d，第二个模式有括号，结果+就表示匹配fred这个词</div><div class="line"><span class="regexp">/fred+/</span>.test(<span class="string">'fredd'</span>) <span class="regexp">//</span> true</div><div class="line"><span class="regexp">/(fred)+/</span>.test(<span class="string">'fredfred'</span>) <span class="regexp">//</span> true</div></pre></td></tr></table></figure>
<p>分组捕获</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> 正则表达式<span class="regexp">/(.)b(.)/</span>一共使用两个括号，第一个括号捕获a，第二个括号捕获c</div><div class="line"><span class="regexp">//</span> 使用组匹配时，不宜同时使用g修饰符，否则match方法不会捕获分组的内容</div><div class="line">var m = <span class="string">'abcabc'</span>.match(<span class="regexp">/(.)b(.)/</span>);</div><div class="line">m <span class="regexp">//</span> [<span class="string">'abc'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>]</div><div class="line"></div><div class="line"><span class="regexp">//</span> 使用带g修饰符的正则表达式，结果match方法只捕获了匹配整个表达式的部分</div><div class="line"><span class="regexp">//</span> 这时必须使用正则表达式的exec方法，配合循环，才能读到每一轮匹配的组捕获</div><div class="line">var m = <span class="string">'abcabc'</span>.match(<span class="regexp">/(.)b(.)/g</span>);</div><div class="line">m <span class="regexp">//</span> [<span class="string">'abc'</span>, <span class="string">'abc'</span>]</div></pre></td></tr></table></figure>
<h3 id="非捕获组"><a href="#非捕获组" class="headerlink" title="非捕获组"></a>非捕获组</h3><p>(?:x)称为非捕获组（Non-capturing group），表示不返回该组匹配的内容，即匹配的结果中不计入这个括号</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> 一共使用了两个括号。其中第一个括号是非捕获组，所以最后返回的结果中没有第一个括号，只有第二个括号匹配的内容</div><div class="line">var m = <span class="string">'abc'</span>.match(<span class="regexp">/(?:.)b(.)/</span>);</div><div class="line">m <span class="regexp">//</span> [<span class="string">"abc"</span>, <span class="string">"c"</span>]</div></pre></td></tr></table></figure>
<h3 id="先行断言"><a href="#先行断言" class="headerlink" title="先行断言"></a>先行断言</h3><p>x(?=y)称为先行断言（Positive look-ahead），x只有在y前面才匹配，y不会被计入返回结果</p>
<p>要匹配后面跟着百分号的数字，可以写成/\d+(?=%)/</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> b在c前面所以被匹配，但是括号对应的c不会被返回</div><div class="line">var m = <span class="string">'abc'</span>.match(<span class="regexp">/b(?=c)/</span>);</div><div class="line">m <span class="regexp">//</span> [<span class="string">"b"</span>]</div></pre></td></tr></table></figure>
<h3 id="先行否定断言"><a href="#先行否定断言" class="headerlink" title="先行否定断言"></a>先行否定断言</h3><p>x(?!y)称为先行否定断言（Negative look-ahead），x只有不在y前面才匹配，y不会被计入返回结果</p>
<p>比如，要匹配后面跟的不是百分号的数字，就要写成/\d+(?!%)/</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> 只有不在小数点前面的数字才会被匹配，因此返回的结果就是<span class="number">14</span></div><div class="line"><span class="regexp">//</span> “先行否定断言”中，括号里的部分是不会返回的</div><div class="line"><span class="regexp">/\d+(?!\.)/</span>.exec(<span class="string">'3.14'</span>)</div><div class="line"><span class="regexp">//</span> [<span class="string">"14"</span>]</div><div class="line"></div><div class="line"><span class="regexp">//</span> b不在c前面所以被匹配，而且括号对应的d不会被返回</div><div class="line">var m = <span class="string">'abd'</span>.match(<span class="regexp">/b(?!c)/</span>);</div><div class="line">m <span class="regexp">//</span> [<span class="string">'b'</span>]</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;正则表达式简介&quot;&gt;&lt;a href=&quot;#正则表达式简介&quot; class=&quot;headerlink&quot; title=&quot;正则表达式简介&quot;&gt;&lt;/a&gt;正则表达式简介&lt;/h1&gt;&lt;p&gt;正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>【实战】React调色板</title>
    <link href="http://yoursite.com/2018/08/03/2018.8.3/"/>
    <id>http://yoursite.com/2018/08/03/2018.8.3/</id>
    <published>2018-08-03T15:16:41.000Z</published>
    <updated>2018-08-15T14:33:21.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我在生le"><a href="#我在生le" class="headerlink" title="我在生le"></a>我在生le</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;我在生le&quot;&gt;&lt;a href=&quot;#我在生le&quot; class=&quot;headerlink&quot; title=&quot;我在生le&quot;&gt;&lt;/a&gt;我在生le&lt;/h1&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>【总结】2018年7月份个人总结</title>
    <link href="http://yoursite.com/2018/07/31/2018.7summary/"/>
    <id>http://yoursite.com/2018/07/31/2018.7summary/</id>
    <published>2018-07-31T15:40:15.000Z</published>
    <updated>2018-07-30T13:54:35.234Z</updated>
    
    <content type="html"><![CDATA[<p>人生何必如初见,但求两看相不厌</p>
<p>7月份的工作量总体还好。总算熬过了醉人的6月。开始有了大块头的个人时间,恰好可以好好地重构以前做的项目<br><a id="more"></a><br>接触了node.js及php,遇到了几个坑爹的bug,然后一一解决对后端有了进一步的了解及学习</p>
<p>希望以后有机会可以接触实际新项目,因为，我真切地感受到了，有实际项目练手确实比自己瞎折腾快上十倍都不算夸张</p>
<p>益达的同学来广州找我玩,非常好的大学同学,毕业以后，我再也没有如此地敞开心扉想啥说啥，也再也没有如此的和弦而谈</p>
<p>学编程就和炒菜一样,着急是大忌,总之,心态放好,精前端,后端node、php(我一直把它俩)也能燥起来,用心做好任务,技术总会成长起来</p>
<p>学了MVC设计模式,现在写组件都是用MVC模块化,写代码分模块分得有点666,有点膨胀,感觉只要有时间都可以自己写个小框架出来</p>
<p>最好的教育是每天通过学习，保持自己“陶醉于卓越”的激情</p>
<p>学习一门技术、手艺、语言是非常好的自我教育，它有难度，但进步又可测，它需要你有规律重复，容易形成学习的条件反射</p>
<p>卓越，即有领先他人的欲望，即有今天的我比昨天我更好的欲望，这样的我是停不下来</p>
<h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><p>JavaScript: 重新复习了原生的基础,看《JavaScript设计模式》,尝试用MVC思想写组件</p>
<p>模块化: 使用闭包、立即执行函数、CMD、Common.js、ES6模块化思想重写常用的组件,并对模块化的封装思想对一步心得体会</p>
<p>ES6: 总结了常用语法,将语法用到实际项目上,进一步领悟ES6的语法糖,新增Class、模块化、Promise、箭头函数真是赞到爆</p>
<p>React.js: 深入React开发实际项目,学习React Router及Redux,方便的组件化及JSX语法,webapck打包走起项目</p>
<p>PHP: 学习了PHP的面向对象语法及MySQL数据库的基本操作</p>
<p>Node.js: 将Node.js的文档啃了一遍,语法基本上手没啥难度,再学习其它模块,再下个月争取用到实际项目</p>
<p>专利: 专利法、相关法、实务看书背知识点,下个月开始看视频总结考试点</p>
<p>易语言: 看完基础语法及常用插件,so easy,基本上和js对bom操作即鼠标和键盘的控制思维差不多,争取下个月开发出大冒险的游戏脚本</p>
<p>英语: 48个音标、1500个常用生活词</p>
<p>运维: 重新看完linux、git、vim文档</p>
<p>产品: 学习精益产品探索、互联网产品思维</p>
<p>网络: 趁着现在还不算特别特别忙，好好抓紧时间学习薄弱的网络知识,看完《计算机网络》、《HTTP图解》</p>
<h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><p>1.海尔小家电运营平台订单管理发布上线并修bug</p>
<p>2.海尔设计易项目增加图片懒加载组件并修bug</p>
<p>3.运维四台服务器的每月报账及合同申请、企业邮箱续费</p>
<h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>1.学会素描人物</p>
<p>2.写字帖、夜跑半个钟</p>
<p>3.与之前后端同事在东晓南小区游泳,叙叙旧,这小子进步挺大,已经拿到好offer</p>
<p>4.第一次做西红柿焖牛腩,全凭手感,所以尝试失败,贼难吃</p>
<p>5.这个月每天都11点半之前睡,早上6点30起来复习,脸状态还没调回来,毕竟之前1年的生物钟绕的乱乱得,不过再没便秘倒是真</p>
<p>6.清远的小伙伴月初来找我讨要java学习路线,现回自学java</p>
<p>7.到清远找小伙伴看他进度,每天都在高效学,已做了个管家婆的后台系统,正在争取10月份到广州找java工作</p>
<p>8.惊叹下,同学他亲妹95年的,一个有梦想努力的女孩,自己在清远开了美容店并买了房和车,真的是年轻要多想并去实现</p>
<p>9.今年我也要开始落实之前转行时满满的计划,希望明年我的计划能落实并有成就,先不立flag,很容易打脸</p>
<p>10.学会蛙泳,还不会换气,这个月游了4次</p>
<p>11.认识海尔更多的同事,与几位聊得很好并经常吃饭,新来的运维已经加入~</p>
<p>12.与买家部同事一起去厦滘打了次篮球,好久没碰这玩意</p>
<p>13.家里房子第三层已经建起来,┭┮﹏┭┮赶紧</p>
<p>14.去表哥家烧烤,烤炉果然是个好东西</p>
<p>15.图书馆跑了几次,感觉书有点少,日后把学习时间多留在家</p>
<h1 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h1><h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><p>《JavaScript设计模式》100%,《Node.js实战 中文版》100%、《unix编程艺术》100%、《深入浅出Node.js》100%、《黑客与画家(中文版)》100%、《计算机网络》100%、《HTTP图解》100%、《ES6标准入门（第二版）》100%、《高性能网站建设指南》10%</p>
<h2 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h2><p>《我不是药神》、《超时空同居》、《三个大傻》、《零秒出手》</p>
<h2 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h2><p>这个月手机摔了,心塞</p>
<h1 id="绩效评估"><a href="#绩效评估" class="headerlink" title="绩效评估"></a>绩效评估</h1><table>
<thead>
<tr>
<th>学习</th>
<th>工作</th>
<th>生活</th>
<th>阅读</th>
<th>总分</th>
</tr>
</thead>
<tbody>
<tr>
<td>8</td>
<td>5</td>
<td>9</td>
<td>8</td>
<td>30</td>
</tr>
</tbody>
</table>
<h1 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h1><p>PHP、React完成至少一个实际项目</p>
<p>重构新将前端组件MVC思想</p>
<p>工作也许会很忙，但学习时间是自己挤出来的，但求不要再虚度年华</p>
<p>看操作系统、计算机网络、数据结构与算法相关的书籍,准备走精前端偏后端的路线，所以非常有必要回归到编程软实力的沉淀</p>
<p>好好发展第三兴趣爱好，让生活充实多彩起来，不让自己老那么无聊到老怀旧叹息徒增负面情绪</p>
<p>这个月有个知识变现的计划,希望能不让我失望,加油吧,少年</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人生何必如初见,但求两看相不厌&lt;/p&gt;
&lt;p&gt;7月份的工作量总体还好。总算熬过了醉人的6月。开始有了大块头的个人时间,恰好可以好好地重构以前做的项目&lt;br&gt;
    
    </summary>
    
      <category term="lifes" scheme="http://yoursite.com/categories/lifes/"/>
    
    
      <category term="个人总结" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>PHP数据库</title>
    <link href="http://yoursite.com/2018/07/28/2018.7.28/"/>
    <id>http://yoursite.com/2018/07/28/2018.7.28/</id>
    <published>2018-07-28T15:16:41.000Z</published>
    <updated>2018-08-08T15:28:17.812Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP-MySQL-简介"><a href="#PHP-MySQL-简介" class="headerlink" title="PHP MySQL 简介"></a>PHP MySQL 简介</h1><a id="more"></a>
<p>PHP 与 MySQL 结合是跨平台的</p>
<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>通过 MySQL，我们可以向数据库查询具体的信息，并得到返回的记录集</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 语句 set names utf8;用于设定数据库编码，让中文可以正常显示</span></div><div class="line"><span class="comment">// 选取了 "websites" 表中 "name" 列的所有数据</span></div><div class="line"></div><div class="line">mysql&gt; set names utf8;</div><div class="line"><span class="section">mysql&gt; SELECT name FROM websites;</span></div><div class="line">+---------------+</div><div class="line"><span class="section">| name          |</span></div><div class="line">+---------------+</div><div class="line">| Google        |</div><div class="line">| 淘宝        |</div><div class="line">| 菜鸟教程  |</div><div class="line">| 微博        |</div><div class="line">| Facebook      |</div><div class="line"><span class="section">| stackoverflow |</span></div><div class="line">+---------------+</div><div class="line">6 rows in set (0.00 sec)</div></pre></td></tr></table></figure>
<h1 id="PHP-连接-MySQL"><a href="#PHP-连接-MySQL" class="headerlink" title="PHP 连接 MySQL"></a>PHP 连接 MySQL</h1><p>PHP 5 及以上版本建议使用以下方式连接 MySQL</p>
<ul>
<li>MySQLi extension (“i” 意为 improved)</li>
<li>PDO (PHP Data Objects)</li>
</ul>
<h2 id="MySQLi-和-PDO"><a href="#MySQLi-和-PDO" class="headerlink" title="MySQLi 和 PDO"></a>MySQLi 和 PDO</h2><p>项目需要在多种数据库中切换，建议使用 PDO ，只需要修改连接字符串和部分查询语句即可</p>
<p>使用 MySQLi, 如果不同数据库，需要重新编写所有代码，包括查询</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">// 连接MySQLi((面向对象)</div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$servername = <span class="string">"localhost"</span>;</div><div class="line">$username = <span class="string">"root"</span>;</div><div class="line">$password = <span class="string">""</span>;</div><div class="line"> </div><div class="line"><span class="comment">// 创建连接</span></div><div class="line">$conn = <span class="keyword">new</span> mysqli($servername, $username, $password);</div><div class="line"> </div><div class="line"><span class="comment">// 检测连接</span></div><div class="line"><span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">"连接失败: "</span> . $conn-&gt;connect_error);</div><div class="line">&#125; </div><div class="line"><span class="keyword">echo</span> <span class="string">"连接成功"</span>;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// 连接MySQLi((面向过程)</div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$servername = <span class="string">"localhost"</span>;</div><div class="line">$username = <span class="string">"username"</span>;</div><div class="line">$password = <span class="string">"password"</span>;</div><div class="line"> </div><div class="line"><span class="comment">// 创建连接</span></div><div class="line">$conn = mysqli_connect($servername, $username, $password);</div><div class="line"> </div><div class="line"><span class="comment">// 检测连接</span></div><div class="line"><span class="keyword">if</span> (!$conn) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">"Connection failed: "</span> . mysqli_connect_error());</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> <span class="string">"连接成功"</span>;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// POD连接数据库</div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$servername = <span class="string">"localhost"</span>;</div><div class="line">$username = <span class="string">"username"</span>;</div><div class="line">$password = <span class="string">"password"</span>;</div><div class="line"> </div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    $conn = <span class="keyword">new</span> PDO(<span class="string">"mysql:host=$servername;"</span>, $username, $password);</div><div class="line">    <span class="keyword">echo</span> <span class="string">"连接成功"</span>; </div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span>(PDOException $e)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> $e-&gt;getMessage();</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="关闭连接"><a href="#关闭连接" class="headerlink" title="关闭连接"></a>关闭连接</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MySQLi - 面向对象</span></div><div class="line"><span class="meta"><span class="meta-keyword">$conn</span>-&gt;close();</span></div><div class="line"></div><div class="line"><span class="comment">// MySQLi - 面向过程</span></div><div class="line">mysqli_close(<span class="symbol">$</span>conn);</div><div class="line"></div><div class="line"><span class="comment">// PDO</span></div><div class="line"><span class="meta"><span class="meta-keyword">$conn</span> = null;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-MySQL-创建数据库"><a href="#PHP-MySQL-创建数据库" class="headerlink" title="PHP MySQL 创建数据库"></a>PHP MySQL 创建数据库</h1><h2 id="使用-MySQLi-和-PDO-创建-MySQL-数据库"><a href="#使用-MySQLi-和-PDO-创建-MySQL-数据库" class="headerlink" title="使用 MySQLi 和 PDO 创建 MySQL 数据库"></a>使用 MySQLi 和 PDO 创建 MySQL 数据库</h2><p>CREATE DATABASE 语句用于在 MySQL 中创建数据库</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">// MySQLi - 面向对象</div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$servername = <span class="string">"localhost"</span>;</div><div class="line">$username = <span class="string">"username"</span>;</div><div class="line">$password = <span class="string">"password"</span>;</div><div class="line"> </div><div class="line"><span class="comment">// 创建连接</span></div><div class="line">$conn = <span class="keyword">new</span> mysqli($servername, $username, $password);</div><div class="line"><span class="comment">// 检测连接</span></div><div class="line"><span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">"连接失败: "</span> . $conn-&gt;connect_error);</div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="comment">// 创建数据库</span></div><div class="line">$sql = <span class="string">"CREATE DATABASE myDB"</span>;</div><div class="line"><span class="keyword">if</span> ($conn-&gt;query($sql) === <span class="keyword">TRUE</span>) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"数据库创建成功"</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Error creating database: "</span> . $conn-&gt;error;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">$conn-&gt;close();</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// MySQLi - 面向过程</div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$servername = <span class="string">"localhost"</span>;</div><div class="line">$username = <span class="string">"username"</span>;</div><div class="line">$password = <span class="string">"password"</span>;</div><div class="line"> </div><div class="line"><span class="comment">// 创建连接</span></div><div class="line">$conn = mysqli_connect($servername, $username, $password);</div><div class="line"><span class="comment">// 检测连接</span></div><div class="line"><span class="keyword">if</span> (!$conn) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">"连接失败: "</span> . mysqli_connect_error());</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// 创建数据库</span></div><div class="line">$sql = <span class="string">"CREATE DATABASE myDB"</span>;</div><div class="line"><span class="keyword">if</span> (mysqli_query($conn, $sql)) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"数据库创建成功"</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Error creating database: "</span> . mysqli_error($conn);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">mysqli_close($conn);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// 使用 PDO</div><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$servername = <span class="string">"localhost"</span>; </div><div class="line">$username = <span class="string">"username"</span>; </div><div class="line">$password = <span class="string">"password"</span>; </div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123; </div><div class="line">    $conn = <span class="keyword">new</span> PDO(<span class="string">"mysql:host=$servername"</span>, $username, $password); </div><div class="line"></div><div class="line">    <span class="comment">// 设置 PDO 错误模式为异常 </span></div><div class="line">    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); </div><div class="line">    $sql = <span class="string">"CREATE DATABASE myDBPDO"</span>; </div><div class="line"></div><div class="line">    <span class="comment">// 使用 exec() ，因为没有结果返回 </span></div><div class="line">    $conn-&gt;exec($sql); </div><div class="line"></div><div class="line">    <span class="keyword">echo</span> <span class="string">"数据库创建成功&lt;br&gt;"</span>; </div><div class="line">&#125; </div><div class="line"><span class="keyword">catch</span>(PDOException $e) </div><div class="line">&#123; </div><div class="line">    <span class="keyword">echo</span> $sql . <span class="string">"&lt;br&gt;"</span> . $e-&gt;getMessage(); </div><div class="line">&#125; </div><div class="line"></div><div class="line">$conn = <span class="keyword">null</span>; </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-创建-MySQL-表"><a href="#PHP-创建-MySQL-表" class="headerlink" title="PHP 创建 MySQL 表"></a>PHP 创建 MySQL 表</h1><p>一个数据表有一个唯一名称，并有行和列组成</p>
<h2 id="使用-MySQLi-和-PDO-创建-MySQL-表"><a href="#使用-MySQLi-和-PDO-创建-MySQL-表" class="headerlink" title="使用 MySQLi 和 PDO 创建 MySQL 表"></a>使用 MySQLi 和 PDO 创建 MySQL 表</h2><p>CREATE TABLE 语句用于创建 MySQL 表</p>
<p>创建表前，我们需要使用 use myDB 来选择要操作的数据库</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line">// MySQLi - 面向对象</div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$servername = <span class="string">"localhost"</span>;</div><div class="line">$username = <span class="string">"username"</span>;</div><div class="line">$password = <span class="string">"password"</span>;</div><div class="line">$dbname = <span class="string">"myDB"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 创建连接</span></div><div class="line">$conn = <span class="keyword">new</span> mysqli($servername, $username, $password, $dbname);</div><div class="line"><span class="comment">// 检测连接</span></div><div class="line"><span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">"连接失败: "</span> . $conn-&gt;connect_error);</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">// 使用 sql 创建数据表</span></div><div class="line">$sql = <span class="string">"CREATE TABLE MyGuests (</span></div><div class="line">id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, </div><div class="line">firstname VARCHAR(30) NOT NULL,</div><div class="line">lastname VARCHAR(30) NOT NULL,</div><div class="line">email VARCHAR(50),</div><div class="line">reg_date TIMESTAMP</div><div class="line">)";</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($conn-&gt;query($sql) === <span class="keyword">TRUE</span>) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Table MyGuests created successfully"</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"创建数据表错误: "</span> . $conn-&gt;error;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$conn-&gt;close();</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// MySQLi - 面向过程</div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$servername = <span class="string">"localhost"</span>;</div><div class="line">$username = <span class="string">"username"</span>;</div><div class="line">$password = <span class="string">"password"</span>;</div><div class="line">$dbname = <span class="string">"myDB"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 创建连接</span></div><div class="line">$conn = mysqli_connect($servername, $username, $password, $dbname);</div><div class="line"><span class="comment">// 检测连接</span></div><div class="line"><span class="keyword">if</span> (!$conn) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">"连接失败: "</span> . mysqli_connect_error());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 使用 sql 创建数据表</span></div><div class="line">$sql = <span class="string">"CREATE TABLE MyGuests (</span></div><div class="line">id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, </div><div class="line">firstname VARCHAR(30) NOT NULL,</div><div class="line">lastname VARCHAR(30) NOT NULL,</div><div class="line">email VARCHAR(50),</div><div class="line">reg_date TIMESTAMP</div><div class="line">)";</div><div class="line"></div><div class="line"><span class="keyword">if</span> (mysqli_query($conn, $sql)) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"数据表 MyGuests 创建成功"</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"创建数据表错误: "</span> . mysqli_error($conn);</div><div class="line">&#125;</div><div class="line"></div><div class="line">mysqli_close($conn);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// PDO</div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$servername = <span class="string">"localhost"</span>;</div><div class="line">$username = <span class="string">"username"</span>;</div><div class="line">$password = <span class="string">"password"</span>;</div><div class="line">$dbname = <span class="string">"myDBPDO"</span>;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    $conn = <span class="keyword">new</span> PDO(<span class="string">"mysql:host=$servername;dbname=$dbname"</span>, $username, $password);</div><div class="line">    <span class="comment">// 设置 PDO 错误模式，用于抛出异常</span></div><div class="line">    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);</div><div class="line"></div><div class="line">    <span class="comment">// 使用 sql 创建数据表</span></div><div class="line">    $sql = <span class="string">"CREATE TABLE MyGuests (</span></div><div class="line">    id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, </div><div class="line">    firstname VARCHAR(30) NOT NULL,</div><div class="line">    lastname VARCHAR(30) NOT NULL,</div><div class="line">    email VARCHAR(50),</div><div class="line">    reg_date TIMESTAMP</div><div class="line">    )";</div><div class="line"></div><div class="line">    <span class="comment">// 使用 exec() ，没有结果返回 </span></div><div class="line">    $conn-&gt;exec($sql);</div><div class="line">    <span class="keyword">echo</span> <span class="string">"数据表 MyGuests 创建成功"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span>(PDOException $e)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> $sql . <span class="string">"&lt;br&gt;"</span> . $e-&gt;getMessage();</div><div class="line">&#125;</div><div class="line"></div><div class="line">$conn = <span class="keyword">null</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-MySQL-插入数据"><a href="#PHP-MySQL-插入数据" class="headerlink" title="PHP MySQL 插入数据"></a>PHP MySQL 插入数据</h1><p>在创建完数据库和表后，我们可以向表中添加数据</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">// MySQLi - 面向对象</div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$servername = <span class="string">"localhost"</span>;</div><div class="line">$username = <span class="string">"username"</span>;</div><div class="line">$password = <span class="string">"password"</span>;</div><div class="line">$dbname = <span class="string">"myDB"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 创建连接</span></div><div class="line">$conn = <span class="keyword">new</span> mysqli($servername, $username, $password, $dbname);</div><div class="line"><span class="comment">// 检测连接</span></div><div class="line"><span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">"连接失败: "</span> . $conn-&gt;connect_error);</div><div class="line">&#125; </div><div class="line"></div><div class="line">$sql = <span class="string">"INSERT INTO MyGuests (firstname, lastname, email)</span></div><div class="line">VALUES ('John', 'Doe', 'john@example.com')";</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($conn-&gt;query($sql) === <span class="keyword">TRUE</span>) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"新记录插入成功"</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Error: "</span> . $sql . <span class="string">"&lt;br&gt;"</span> . $conn-&gt;error;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$conn-&gt;close();</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// MySQLi - 面向过程</div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$servername = <span class="string">"localhost"</span>;</div><div class="line">$username = <span class="string">"username"</span>;</div><div class="line">$password = <span class="string">"password"</span>;</div><div class="line">$dbname = <span class="string">"myDB"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 创建连接</span></div><div class="line">$conn = mysqli_connect($servername, $username, $password, $dbname);</div><div class="line"><span class="comment">// 检测连接</span></div><div class="line"><span class="keyword">if</span> (!$conn) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">"Connection failed: "</span> . mysqli_connect_error());</div><div class="line">&#125;</div><div class="line"></div><div class="line">$sql = <span class="string">"INSERT INTO MyGuests (firstname, lastname, email)</span></div><div class="line">VALUES ('John', 'Doe', 'john@example.com')";</div><div class="line"></div><div class="line"><span class="keyword">if</span> (mysqli_query($conn, $sql)) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"新记录插入成功"</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Error: "</span> . $sql . <span class="string">"&lt;br&gt;"</span> . mysqli_error($conn);</div><div class="line">&#125;</div><div class="line"></div><div class="line">mysqli_close($conn);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// PDO</div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$servername = <span class="string">"localhost"</span>;</div><div class="line">$username = <span class="string">"username"</span>;</div><div class="line">$password = <span class="string">"password"</span>;</div><div class="line">$dbname = <span class="string">"myDBPDO"</span>;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    $conn = <span class="keyword">new</span> PDO(<span class="string">"mysql:host=$servername;dbname=$dbname"</span>, $username, $password);</div><div class="line">    <span class="comment">// 设置 PDO 错误模式，用于抛出异常</span></div><div class="line">    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);</div><div class="line">    $sql = <span class="string">"INSERT INTO MyGuests (firstname, lastname, email)</span></div><div class="line">    VALUES ('John', 'Doe', 'john@example.com')";</div><div class="line">    <span class="comment">// 使用 exec() ，没有结果返回 </span></div><div class="line">    $conn-&gt;exec($sql);</div><div class="line">    <span class="keyword">echo</span> <span class="string">"新记录插入成功"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span>(PDOException $e)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> $sql . <span class="string">"&lt;br&gt;"</span> . $e-&gt;getMessage();</div><div class="line">&#125;</div><div class="line"></div><div class="line">$conn = <span class="keyword">null</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-MySQL插入多条数据"><a href="#PHP-MySQL插入多条数据" class="headerlink" title="PHP MySQL插入多条数据"></a>PHP MySQL插入多条数据</h1><h2 id="使用-MySQLi-和-PDO-向-MySQL-插入多条数据"><a href="#使用-MySQLi-和-PDO-向-MySQL-插入多条数据" class="headerlink" title="使用 MySQLi 和 PDO 向 MySQL 插入多条数据"></a>使用 MySQLi 和 PDO 向 MySQL 插入多条数据</h2><p>mysqli_multi_query() 函数可用来执行多条SQL语句</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line">// MySQLi - 面向对象</div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$servername = <span class="string">"localhost"</span>;</div><div class="line">$username = <span class="string">"username"</span>;</div><div class="line">$password = <span class="string">"password"</span>;</div><div class="line">$dbname = <span class="string">"myDB"</span>;</div><div class="line"> </div><div class="line"><span class="comment">// 创建链接</span></div><div class="line">$conn = <span class="keyword">new</span> mysqli($servername, $username, $password, $dbname);</div><div class="line"><span class="comment">// 检查链接</span></div><div class="line"><span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">"连接失败: "</span> . $conn-&gt;connect_error);</div><div class="line">&#125; </div><div class="line"> </div><div class="line">$sql = <span class="string">"INSERT INTO MyGuests (firstname, lastname, email)</span></div><div class="line">VALUES ('John', 'Doe', 'john@example.com');";</div><div class="line">$sql .= <span class="string">"INSERT INTO MyGuests (firstname, lastname, email)</span></div><div class="line">VALUES ('Mary', 'Moe', 'mary@example.com');";</div><div class="line">$sql .= <span class="string">"INSERT INTO MyGuests (firstname, lastname, email)</span></div><div class="line">VALUES ('Julie', 'Dooley', 'julie@example.com')";</div><div class="line"> </div><div class="line"><span class="keyword">if</span> ($conn-&gt;multi_query($sql) === <span class="keyword">TRUE</span>) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"新记录插入成功"</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Error: "</span> . $sql . <span class="string">"&lt;br&gt;"</span> . $conn-&gt;error;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">$conn-&gt;close();</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// MySQLi - 面向过程</div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$servername = <span class="string">"localhost"</span>;</div><div class="line">$username = <span class="string">"username"</span>;</div><div class="line">$password = <span class="string">"password"</span>;</div><div class="line">$dbname = <span class="string">"myDB"</span>;</div><div class="line"> </div><div class="line"><span class="comment">// 创建链接</span></div><div class="line">$conn = mysqli_connect($servername, $username, $password, $dbname);</div><div class="line"><span class="comment">// 检查链接</span></div><div class="line"><span class="keyword">if</span> (!$conn) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">"连接失败: "</span> . mysqli_connect_error());</div><div class="line">&#125;</div><div class="line"> </div><div class="line">$sql = <span class="string">"INSERT INTO MyGuests (firstname, lastname, email)</span></div><div class="line">VALUES ('John', 'Doe', 'john@example.com');";</div><div class="line">$sql .= <span class="string">"INSERT INTO MyGuests (firstname, lastname, email)</span></div><div class="line">VALUES ('Mary', 'Moe', 'mary@example.com');";</div><div class="line">$sql .= <span class="string">"INSERT INTO MyGuests (firstname, lastname, email)</span></div><div class="line">VALUES ('Julie', 'Dooley', 'julie@example.com')";</div><div class="line"> </div><div class="line"><span class="keyword">if</span> (mysqli_multi_query($conn, $sql)) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"新记录插入成功"</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Error: "</span> . $sql . <span class="string">"&lt;br&gt;"</span> . mysqli_error($conn);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">mysqli_close($conn);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// PDO</div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$servername = <span class="string">"localhost"</span>;</div><div class="line">$username = <span class="string">"username"</span>;</div><div class="line">$password = <span class="string">"password"</span>;</div><div class="line">$dbname = <span class="string">"myDBPDO"</span>;</div><div class="line"> </div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    $conn = <span class="keyword">new</span> PDO(<span class="string">"mysql:host=$servername;dbname=$dbname"</span>, $username, $password);</div><div class="line">    <span class="comment">// set the PDO error mode to exception</span></div><div class="line">    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);</div><div class="line"> </div><div class="line">    <span class="comment">// 开始事务</span></div><div class="line">    $conn-&gt;beginTransaction();</div><div class="line">    <span class="comment">// SQL 语句</span></div><div class="line">    $conn-&gt;exec(<span class="string">"INSERT INTO MyGuests (firstname, lastname, email) </span></div><div class="line">    VALUES ('John', 'Doe', 'john@example.com')");</div><div class="line">    $conn-&gt;exec(<span class="string">"INSERT INTO MyGuests (firstname, lastname, email) </span></div><div class="line">    VALUES ('Mary', 'Moe', 'mary@example.com')");</div><div class="line">    $conn-&gt;exec(<span class="string">"INSERT INTO MyGuests (firstname, lastname, email) </span></div><div class="line">    VALUES ('Julie', 'Dooley', 'julie@example.com')");</div><div class="line"> </div><div class="line">    <span class="comment">// 提交事务</span></div><div class="line">    $conn-&gt;commit();</div><div class="line">    <span class="keyword">echo</span> <span class="string">"新记录插入成功"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span>(PDOException $e)</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 如果执行失败回滚</span></div><div class="line">    $conn-&gt;rollback();</div><div class="line">    <span class="keyword">echo</span> $sql . <span class="string">"&lt;br&gt;"</span> . $e-&gt;getMessage();</div><div class="line">&#125;</div><div class="line"> </div><div class="line">$conn = <span class="keyword">null</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-MySQL-预处理语句"><a href="#PHP-MySQL-预处理语句" class="headerlink" title="PHP MySQL 预处理语句"></a>PHP MySQL 预处理语句</h1><p>预处理语句对于防止 MySQL 注入是非常有用</p>
<ul>
<li>预处理：创建 SQL 语句模板并发送到数据库。预留的值使用参数 “?” 标记 </li>
<li>数据库解析，编译，对SQL语句模板执行查询优化，并存储结果不输出</li>
<li>执行：最后，将应用绑定的值传递给参数（”?” 标记），数据库执行语句。应用可以多次执行语句，如果参数的值不一样</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">//  MySQLi 中使用了预处理语句，并绑定了相应的参数</div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$servername = <span class="string">"localhost"</span>;</div><div class="line">$username = <span class="string">"username"</span>;</div><div class="line">$password = <span class="string">"password"</span>;</div><div class="line">$dbname = <span class="string">"myDB"</span>;</div><div class="line"> </div><div class="line"><span class="comment">// 创建连接</span></div><div class="line">$conn = <span class="keyword">new</span> mysqli($servername, $username, $password, $dbname);</div><div class="line"> </div><div class="line"><span class="comment">// 检测连接</span></div><div class="line"><span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">"连接失败: "</span> . $conn-&gt;connect_error);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// 预处理及绑定</span></div><div class="line">$stmt = $conn-&gt;prepare(<span class="string">"INSERT INTO MyGuests (firstname, lastname, email) VALUES (?, ?, ?)"</span>);</div><div class="line">$stmt-&gt;bind_param(<span class="string">"sss"</span>, $firstname, $lastname, $email);</div><div class="line"> </div><div class="line"><span class="comment">// 设置参数并执行</span></div><div class="line">$firstname = <span class="string">"John"</span>;</div><div class="line">$lastname = <span class="string">"Doe"</span>;</div><div class="line">$email = <span class="string">"john@example.com"</span>;</div><div class="line">$stmt-&gt;execute();</div><div class="line"> </div><div class="line">$firstname = <span class="string">"Mary"</span>;</div><div class="line">$lastname = <span class="string">"Moe"</span>;</div><div class="line">$email = <span class="string">"mary@example.com"</span>;</div><div class="line">$stmt-&gt;execute();</div><div class="line"> </div><div class="line">$firstname = <span class="string">"Julie"</span>;</div><div class="line">$lastname = <span class="string">"Dooley"</span>;</div><div class="line">$email = <span class="string">"julie@example.com"</span>;</div><div class="line">$stmt-&gt;execute();</div><div class="line"> </div><div class="line"><span class="keyword">echo</span> <span class="string">"新记录插入成功"</span>;</div><div class="line"> </div><div class="line">$stmt-&gt;close();</div><div class="line">$conn-&gt;close();</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// PDO 中的预处理语句</div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$servername = <span class="string">"localhost"</span>;</div><div class="line">$username = <span class="string">"username"</span>;</div><div class="line">$password = <span class="string">"password"</span>;</div><div class="line">$dbname = <span class="string">"myDBPDO"</span>;</div><div class="line"> </div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    $conn = <span class="keyword">new</span> PDO(<span class="string">"mysql:host=$servername;dbname=$dbname"</span>, $username, $password);</div><div class="line">    <span class="comment">// 设置 PDO 错误模式为异常</span></div><div class="line">    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);</div><div class="line"> </div><div class="line">    <span class="comment">// 预处理 SQL 并绑定参数</span></div><div class="line">    $stmt = $conn-&gt;prepare(<span class="string">"INSERT INTO MyGuests (firstname, lastname, email) </span></div><div class="line">    VALUES (:firstname, :lastname, :email)");</div><div class="line">    $stmt-&gt;bindParam(<span class="string">':firstname'</span>, $firstname);</div><div class="line">    $stmt-&gt;bindParam(<span class="string">':lastname'</span>, $lastname);</div><div class="line">    $stmt-&gt;bindParam(<span class="string">':email'</span>, $email);</div><div class="line"> </div><div class="line">    <span class="comment">// 插入行</span></div><div class="line">    $firstname = <span class="string">"John"</span>;</div><div class="line">    $lastname = <span class="string">"Doe"</span>;</div><div class="line">    $email = <span class="string">"john@example.com"</span>;</div><div class="line">    $stmt-&gt;execute();</div><div class="line"> </div><div class="line">    <span class="comment">// 插入其他行</span></div><div class="line">    $firstname = <span class="string">"Mary"</span>;</div><div class="line">    $lastname = <span class="string">"Moe"</span>;</div><div class="line">    $email = <span class="string">"mary@example.com"</span>;</div><div class="line">    $stmt-&gt;execute();</div><div class="line"> </div><div class="line">    <span class="comment">// 插入其他行</span></div><div class="line">    $firstname = <span class="string">"Julie"</span>;</div><div class="line">    $lastname = <span class="string">"Dooley"</span>;</div><div class="line">    $email = <span class="string">"julie@example.com"</span>;</div><div class="line">    $stmt-&gt;execute();</div><div class="line"> </div><div class="line">    <span class="keyword">echo</span> <span class="string">"新记录插入成功"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span>(PDOException $e)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Error: "</span> . $e-&gt;getMessage();</div><div class="line">&#125;</div><div class="line">$conn = <span class="keyword">null</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-MySQL-读取数据"><a href="#PHP-MySQL-读取数据" class="headerlink" title="PHP MySQL 读取数据"></a>PHP MySQL 读取数据</h1><p>SQL 语句从 MyGuests数据表中读取 id, firstname 和 lastname 三个字段</p>
<p>使用SQL 语句从数据库中取出结果集并赋给复制给变量 $result</p>
<p>函数 num_rows() 判断返回的数据</p>
<p>返回的是多条数据，函数 fetch_assoc() 将结合集放入到关联数组并循环输出。 while() 循环出结果集，并输出 id, firstname 和 lastname 三个字段值</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">// MySQLi - 面向过程</div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$servername = <span class="string">"localhost"</span>;</div><div class="line">$username = <span class="string">"username"</span>;</div><div class="line">$password = <span class="string">"password"</span>;</div><div class="line">$dbname = <span class="string">"myDB"</span>;</div><div class="line"> </div><div class="line"><span class="comment">// 创建连接</span></div><div class="line">$conn = mysqli_connect($servername, $username, $password, $dbname);</div><div class="line"><span class="comment">// Check connection</span></div><div class="line"><span class="keyword">if</span> (!$conn) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">"连接失败: "</span> . mysqli_connect_error());</div><div class="line">&#125;</div><div class="line"> </div><div class="line">$sql = <span class="string">"SELECT id, firstname, lastname FROM MyGuests"</span>;</div><div class="line">$result = mysqli_query($conn, $sql);</div><div class="line"> </div><div class="line"><span class="keyword">if</span> (mysqli_num_rows($result) &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="comment">// 输出数据</span></div><div class="line">    <span class="keyword">while</span>($row = mysqli_fetch_assoc($result)) &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"id: "</span> . $row[<span class="string">"id"</span>]. <span class="string">" - Name: "</span> . $row[<span class="string">"firstname"</span>]. <span class="string">" "</span> . $row[<span class="string">"lastname"</span>]. <span class="string">"&lt;br&gt;"</span>;</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"0 结果"</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">mysqli_close($conn);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// 使用 PDO (+ 预处理)</div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;table style='border: solid 1px black;'&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;tr&gt;&lt;th&gt;Id&lt;/th&gt;&lt;th&gt;Firstname&lt;/th&gt;&lt;th&gt;Lastname&lt;/th&gt;&lt;/tr&gt;"</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TableRows</span> <span class="keyword">extends</span> <span class="title">RecursiveIteratorIterator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($it)</span> </span>&#123; </div><div class="line">        <span class="keyword">parent</span>::__construct($it, <span class="keyword">self</span>::LEAVES_ONLY); </div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">current</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"&lt;td style='width:150px;border:1px solid black;'&gt;"</span> . <span class="keyword">parent</span>::current(). <span class="string">"&lt;/td&gt;"</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">beginChildren</span><span class="params">()</span> </span>&#123; </div><div class="line">        <span class="keyword">echo</span> <span class="string">"&lt;tr&gt;"</span>; </div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">endChildren</span><span class="params">()</span> </span>&#123; </div><div class="line">        <span class="keyword">echo</span> <span class="string">"&lt;/tr&gt;"</span> . <span class="string">"\n"</span>;</div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line"> </div><div class="line">$servername = <span class="string">"localhost"</span>;</div><div class="line">$username = <span class="string">"username"</span>;</div><div class="line">$password = <span class="string">"password"</span>;</div><div class="line">$dbname = <span class="string">"myDBPDO"</span>;</div><div class="line"> </div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    $conn = <span class="keyword">new</span> PDO(<span class="string">"mysql:host=$servername;dbname=$dbname"</span>, $username, $password);</div><div class="line">    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);</div><div class="line">    $stmt = $conn-&gt;prepare(<span class="string">"SELECT id, firstname, lastname FROM MyGuests"</span>); </div><div class="line">    $stmt-&gt;execute();</div><div class="line"> </div><div class="line">    <span class="comment">// 设置结果集为关联数组</span></div><div class="line">    $result = $stmt-&gt;setFetchMode(PDO::FETCH_ASSOC); </div><div class="line">    <span class="keyword">foreach</span>(<span class="keyword">new</span> TableRows(<span class="keyword">new</span> RecursiveArrayIterator($stmt-&gt;fetchAll())) <span class="keyword">as</span> $k=&gt;$v) &#123; </div><div class="line">        <span class="keyword">echo</span> $v;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span>(PDOException $e) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Error: "</span> . $e-&gt;getMessage();</div><div class="line">&#125;</div><div class="line">$conn = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;/table&gt;"</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-MySQL-Where-子句"><a href="#PHP-MySQL-Where-子句" class="headerlink" title="PHP MySQL Where 子句"></a>PHP MySQL Where 子句</h1><p>WHERE 子句用于过滤记录</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 从 "Persons" 表中选取所有 FirstName='Peter' 的行</span></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$con=mysqli_connect(<span class="string">"localhost"</span>,<span class="string">"username"</span>,<span class="string">"password"</span>,<span class="string">"database"</span>);</div><div class="line"><span class="comment">// 检测连接</span></div><div class="line"><span class="keyword">if</span> (mysqli_connect_errno())</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"连接失败: "</span> . mysqli_connect_error();</div><div class="line">&#125;</div><div class="line"></div><div class="line">$result = mysqli_query($con,<span class="string">"SELECT * FROM Persons</span></div><div class="line">WHERE FirstName='Peter'");</div><div class="line"></div><div class="line"><span class="keyword">while</span>($row = mysqli_fetch_array($result))</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> $row[<span class="string">'FirstName'</span>] . <span class="string">" "</span> . $row[<span class="string">'LastName'</span>];</div><div class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line">Peter Griffin</div></pre></td></tr></table></figure>
<h1 id="PHP-MySQL-Order-By-关键词"><a href="#PHP-MySQL-Order-By-关键词" class="headerlink" title="PHP MySQL Order By 关键词"></a>PHP MySQL Order By 关键词</h1><p>ORDER BY 关键词用于对记录集中的数据进行排序</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 选取 "Persons" 表中存储的所有数据，并根据 "Age" 列对结果进行排序</span></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$con=mysqli_connect(<span class="string">"localhost"</span>,<span class="string">"username"</span>,<span class="string">"password"</span>,<span class="string">"database"</span>);</div><div class="line"><span class="comment">// 检测连接</span></div><div class="line"><span class="keyword">if</span> (mysqli_connect_errno())</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"连接失败: "</span> . mysqli_connect_error();</div><div class="line">&#125;</div><div class="line"></div><div class="line">$result = mysqli_query($con,<span class="string">"SELECT * FROM Persons ORDER BY age"</span>);</div><div class="line"></div><div class="line"><span class="keyword">while</span>($row = mysqli_fetch_array($result))</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> $row[<span class="string">'FirstName'</span>];</div><div class="line">    <span class="keyword">echo</span> <span class="string">" "</span> . $row[<span class="string">'LastName'</span>];</div><div class="line">    <span class="keyword">echo</span> <span class="string">" "</span> . $row[<span class="string">'Age'</span>];</div><div class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">mysqli_close($con);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line">Glenn Quagmire <span class="number">33</span></div><div class="line">Peter Griffin <span class="number">35</span></div></pre></td></tr></table></figure>
<h1 id="PHP-MySQL-Update"><a href="#PHP-MySQL-Update" class="headerlink" title="PHP MySQL Update"></a>PHP MySQL Update</h1><p>UPDATE 语句用于中修改数据库表中的数据</p>
<p>创建了一个名为 “Persons” 的表</p>
<table>
<thead>
<tr>
<th>FirstName</th>
<th>LastName</th>
<th>Age</th>
</tr>
</thead>
<tbody>
<tr>
<td>Peter</td>
<td>Griffin</td>
<td>35</td>
</tr>
<tr>
<td>Glenn</td>
<td>Quagmire</td>
<td>33</td>
</tr>
</tbody>
</table>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 更新 "Persons" 表的一些数据</div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$con=mysqli_connect(<span class="string">"localhost"</span>,<span class="string">"username"</span>,<span class="string">"password"</span>,<span class="string">"database"</span>);</div><div class="line"><span class="comment">// 检测连接</span></div><div class="line"><span class="keyword">if</span> (mysqli_connect_errno())</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"连接失败: "</span> . mysqli_connect_error();</div><div class="line">&#125;</div><div class="line"></div><div class="line">mysqli_query($con,<span class="string">"UPDATE Persons SET Age=36</span></div><div class="line">WHERE FirstName='Peter' AND LastName='Griffin'");</div><div class="line"></div><div class="line">mysqli_close($con);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>更新后，”Persons” 表</p>
<table>
<thead>
<tr>
<th>FirstName</th>
<th>LastName</th>
<th>Age</th>
</tr>
</thead>
<tbody>
<tr>
<td>Peter</td>
<td>Griffin</td>
<td>36</td>
</tr>
<tr>
<td>Glenn</td>
<td>Quagmire</td>
<td>33</td>
</tr>
</tbody>
</table>
<h1 id="PHP-MySQL-Delete"><a href="#PHP-MySQL-Delete" class="headerlink" title="PHP MySQL Delete"></a>PHP MySQL Delete</h1><p>DELETE 语句用于从数据库表中删除行</p>
<p>创建了一个名为 “Persons” 的表</p>
<table>
<thead>
<tr>
<th>FirstName</th>
<th>LastName</th>
<th>Age</th>
</tr>
</thead>
<tbody>
<tr>
<td>Peter</td>
<td>Griffin</td>
<td>35</td>
</tr>
<tr>
<td>Glenn</td>
<td>Quagmire</td>
<td>33</td>
</tr>
</tbody>
</table>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 删除 <span class="string">"Persons"</span> 表中所有 LastName='Griffin' 的记录</div><div class="line">&lt;?php</div><div class="line">$con=mysqli_connect(<span class="string">"localhost"</span>,<span class="string">"username"</span>,<span class="string">"password"</span>,<span class="string">"database"</span>);</div><div class="line">// 检测连接</div><div class="line">if (mysqli_connect_errno())</div><div class="line">&#123;</div><div class="line">    echo <span class="string">"连接失败: "</span> . mysqli_connect_error();</div><div class="line">&#125;</div><div class="line"></div><div class="line">mysqli_query($con,<span class="string">"<span class="keyword">DELETE</span> FROM Persons WHERE LastName='Griffin'"</span>);</div><div class="line"></div><div class="line">mysqli_close($con);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>在这次删除后，”Persons” 表如下</p>
<table>
<thead>
<tr>
<th>FirstName</th>
<th>LastName</th>
<th>Age</th>
</tr>
</thead>
<tbody>
<tr>
<td>Glenn</td>
<td>Quagmire</td>
<td>33</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PHP-MySQL-简介&quot;&gt;&lt;a href=&quot;#PHP-MySQL-简介&quot; class=&quot;headerlink&quot; title=&quot;PHP MySQL 简介&quot;&gt;&lt;/a&gt;PHP MySQL 简介&lt;/h1&gt;
    
    </summary>
    
      <category term="BackEnd" scheme="http://yoursite.com/categories/BackEnd/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库</title>
    <link href="http://yoursite.com/2018/07/25/2018.7.25/"/>
    <id>http://yoursite.com/2018/07/25/2018.7.25/</id>
    <published>2018-07-25T15:16:41.000Z</published>
    <updated>2018-08-04T03:26:21.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="数据库简介"><a href="#数据库简介" class="headerlink" title="数据库简介"></a>数据库简介</h2><p>数据库是按照数据结构来组织、存储和管理数据的<br><a id="more"></a></p>
<h2 id="RDBMS术语"><a href="#RDBMS术语" class="headerlink" title="RDBMS术语"></a>RDBMS术语</h2><p>关系型数据库管理系统（RDBMS）来存储和管理的大数据量</p>
<ul>
<li>数据库: 数据库是一些关联表的集合</li>
<li>数据表: 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格</li>
<li>列: 一列(数据元素) 包含了相同的数据, 例如邮政编码的数据</li>
<li>行：一行（=元组，或记录）是一组相关的数据，例如一条用户订阅的数据</li>
<li>冗余：存储两倍数据，冗余降低了性能，但提高了数据的安全性</li>
<li>主键：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据</li>
<li>外键：外键用于关联两个表</li>
<li>复合键：复合键（组合键）将多个列作为一个索引键，一般用于复合索引</li>
<li>索引：使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录</li>
<li>参照完整性: 参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性</li>
</ul>
<h1 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h1><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql <span class="keyword">install</span></div></pre></td></tr></table></figure>
<h2 id="启动及关闭MySQL服务"><a href="#启动及关闭MySQL服务" class="headerlink" title="启动及关闭MySQL服务"></a>启动及关闭MySQL服务</h2><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">net</span> <span class="built_in">start</span> mysql</div><div class="line"><span class="built_in">net</span> stop mysql</div></pre></td></tr></table></figure>
<h2 id="初始化data目录"><a href="#初始化data目录" class="headerlink" title="初始化data目录"></a>初始化data目录</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqld <span class="comment">--initialize-insecure</span></div></pre></td></tr></table></figure>
<h1 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h1><h2 id="cmd命令行连接"><a href="#cmd命令行连接" class="headerlink" title="cmd命令行连接"></a>cmd命令行连接</h2><p>在登录成功后会出现 mysql&gt; 命令提示窗口，你可以在上面执行任何 SQL 语句</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">mysql -u root -p</span></div></pre></td></tr></table></figure>
<p>退出 mysql&gt; 命令提示窗口可以使用 exit 命令</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">exit</span></div></pre></td></tr></table></figure>
<h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><p>登陆 MySQL 服务后，使用 create 命令创建数据库</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div><div class="line">mysql&gt; create DATABASE RUNOOB<span class="comment">;</span></div></pre></td></tr></table></figure>
<h2 id="普通用户创建数据库"><a href="#普通用户创建数据库" class="headerlink" title="普通用户创建数据库"></a>普通用户创建数据库</h2><p>普通用户，需要特定的权限来创建或者删除 MySQL 数据库</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用root用户登录，root用户拥有最高权限，使用 mysql mysqladmin 命令来创建数据库</span></div><div class="line">mysqladmin -u root -<span class="selector-tag">p</span> create RUNOOB</div></pre></td></tr></table></figure>
<h1 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h1><h2 id="drop-命令删除数据库"><a href="#drop-命令删除数据库" class="headerlink" title="drop 命令删除数据库"></a>drop 命令删除数据库</h2><p>删除名为 RUNOOB 的数据库</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; drop database RUNOOB<span class="comment">;</span></div></pre></td></tr></table></figure>
<h2 id="普通用户删除数据库"><a href="#普通用户删除数据库" class="headerlink" title="普通用户删除数据库"></a>普通用户删除数据库</h2><p>使用 mysql mysqladmin 命令在终端来执行删除命令</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqladmin -u root -<span class="selector-tag">p</span> drop RUNOOB</div></pre></td></tr></table></figure>
<h1 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 选取了数据库 RUNOOB</span></div><div class="line">mysql -u root -p</div><div class="line">mysql&gt; <span class="keyword">use</span> <span class="title">RUNOOB</span>;</div><div class="line">Database changed</div></pre></td></tr></table></figure>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>MySQL中定义数据字段的类型对你数据库的优化是非常重要的</p>
<p>MySQL支持多种类型，大致可以分为三类：数值、日期/时间和字符串(字符)类型</p>
<h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><p>整型</p>
<ul>
<li>tinyint       0-255        1个字节长</li>
<li>smallint      0-65535      2个字节长</li>
<li>int          0-21亿       4个字节长</li>
<li>bigint        0-42亿      8个字节长</li>
</ul>
<p>浮点型</p>
<ul>
<li>float(M,D) 单精度浮点数。 可以精确到小数点后7位。M代表总宽度，D代表小数位</li>
<li>double(M,D) 双精度浮点数。可以精确到小数点后15位。M代表总宽度，D代表小数位</li>
</ul>
<h2 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h2><ul>
<li>date    形如： “YYYY-MM-DD”</li>
<li>time    形如： “HH:MM:SS”</li>
<li>datetime  形如： “YYYY-MM-DD HH:MM:SS”</li>
</ul>
<h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><ul>
<li>tinytext   0-255   最小文本型</li>
<li>text      0-1677万   中型文本</li>
<li>longtext  0-42亿      大型文本</li>
</ul>
<h2 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h2><p>创建MySQL数据表需要以下信息:</p>
<ul>
<li>表名</li>
<li>表字段名</li>
<li>定义每个表字段</li>
</ul>
<p>语法:CREATE TABLE table_name (column_name column_type);</p>
<ul>
<li>不想字段为 NULL 可以设置字段的属性为 NOT NULL， 在操作数据库时如果输入该字段的数据为NULL ，就会报错</li>
<li>AUTO_INCREMENT定义列为自增的属性，一般用于主键，数值会自动加1</li>
<li>PRIMARY KEY关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔</li>
<li>ENGINE 设置存储引擎，CHARSET 设置编码</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`runoob_tbl`</span>(</div><div class="line">   <span class="string">`runoob_id`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> AUTO_INCREMENT,</div><div class="line">   <span class="string">`runoob_title`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">   <span class="string">`runoob_author`</span> <span class="built_in">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">   <span class="string">`submission_date`</span> <span class="built_in">DATE</span>,</div><div class="line">   PRIMARY <span class="keyword">KEY</span> ( <span class="string">`runoob_id`</span> )</div><div class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div></pre></td></tr></table></figure>
<h2 id="通过命令提示符创建表"><a href="#通过命令提示符创建表" class="headerlink" title="通过命令提示符创建表"></a>通过命令提示符创建表</h2><p>通过 mysql&gt; 命令窗口可以很简单的创建MySQL数据表</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div><div class="line">mysql&gt; use RUNOOB;</div><div class="line">Database changed</div><div class="line">mysql&gt; CREATE TABLE runoob_tbl(</div><div class="line">   -<span class="ruby">&gt; runoob_id INT NOT NULL AUTO_INCREMENT,</span></div><div class="line">   -<span class="ruby">&gt; runoob_title VARCHAR(<span class="number">100</span>) NOT NULL,</span></div><div class="line">   -<span class="ruby">&gt; runoob_author VARCHAR(<span class="number">40</span>) NOT NULL,</span></div><div class="line">   -<span class="ruby">&gt; submission_date DATE,</span></div><div class="line">   -<span class="ruby">&gt; PRIMARY KEY ( runoob_id )</span></div><div class="line">   -<span class="ruby">&gt; )ENGINE=InnoDB DEFAULT CHARSET=utf8;</span></div><div class="line">Query OK, 0 rows affected (0.16 sec)</div><div class="line">mysql&gt;</div></pre></td></tr></table></figure>
<h1 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h1><p>语法:DROP TABLE table_name ;</p>
<h2 id="在命令提示窗口中删除数据表"><a href="#在命令提示窗口中删除数据表" class="headerlink" title="在命令提示窗口中删除数据表"></a>在命令提示窗口中删除数据表</h2><p>在mysql&gt;命令提示窗口中删除数据表SQL语句为 DROP TABLE</p>
<p>删除了数据表runoob_tbl</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">root@host# mysql -<span class="keyword">u</span> root -p</div><div class="line">Enter password:*******</div><div class="line">mysql&gt; <span class="keyword">use</span> RUNOOB;</div><div class="line">Database changed</div><div class="line">mysql&gt; <span class="keyword">DROP</span> <span class="keyword">TABLE</span> runoob_tbl</div><div class="line"><span class="keyword">Query</span> OK, 0 rows affected (0.8 sec)</div><div class="line">mysql&gt;</div></pre></td></tr></table></figure>
<h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><p>MySQL 表中使用 INSERT INTO SQL语句来插入数据</p>
<p>语法:INSERT INTO table_name ( field1, field2,…fieldN ) VALUES ( value1, value2,…valueN );</p>
<h2 id="通过命令提示窗口插入数据"><a href="#通过命令提示窗口插入数据" class="headerlink" title="通过命令提示窗口插入数据"></a>通过命令提示窗口插入数据</h2><p>使用 SQL INSERT INTO 语句向 MySQL 数据表 runoob_tbl 插入数据</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p password;</div><div class="line">mysql&gt; use RUNOOB;</div><div class="line">Database changed</div><div class="line">mysql&gt; INSERT INTO runoob_tbl </div><div class="line">    -<span class="ruby">&gt; (runoob_title, runoob_author, submission_date)</span></div><div class="line">    -<span class="ruby">&gt; VALUES</span></div><div class="line">    -<span class="ruby">&gt; (<span class="string">"学习 PHP"</span>, <span class="string">"菜鸟教程"</span>, NOW());</span></div><div class="line">Query OK, 1 rows affected, 1 warnings (0.01 sec)</div><div class="line">mysql&gt; INSERT INTO runoob_tbl</div><div class="line">    -<span class="ruby">&gt; (runoob_title, runoob_author, submission_date)</span></div><div class="line">    -<span class="ruby">&gt; VALUES</span></div><div class="line">    -<span class="ruby">&gt; (<span class="string">"学习 MySQL"</span>, <span class="string">"菜鸟教程"</span>, NOW());</span></div><div class="line">Query OK, 1 rows affected, 1 warnings (0.01 sec)</div><div class="line">mysql&gt; INSERT INTO runoob_tbl</div><div class="line">    -<span class="ruby">&gt; (runoob_title, runoob_author, submission_date)</span></div><div class="line">    -<span class="ruby">&gt; VALUES</span></div><div class="line">    -<span class="ruby">&gt; (<span class="string">"JAVA 教程"</span>, <span class="string">"RUNOOB.COM"</span>, <span class="string">'2016-05-06'</span>);</span></div><div class="line">Query OK, 1 rows affected (0.00 sec)</div><div class="line">mysql&gt;</div><div class="line"><span class="comment"></span></div><div class="line">// 读取数据表</div><div class="line">select * from runoob_tbl;</div></pre></td></tr></table></figure>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/03/71971E68-78B3-4964-AC4C-E75114D3B5B5.jpg" alt="image"></p>
<h1 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h1><p>语法:SELECT column_name,column_nameFROM table_name[WHERE Clause][LIMIT N][ OFFSET M];</p>
<ul>
<li>查询语句中你可以使用一个或者多个表，表之间使用逗号(,)分割，并使用WHERE语句来设定查询条件</li>
<li>SELECT 命令可以读取一条或者多条记录</li>
<li>使用星号（*）来代替其他字段，SELECT语句会返回表的所有字段数据</li>
<li>使用 WHERE 语句来包含任何条件</li>
<li>使用 LIMIT 属性来设定返回的记录数</li>
<li>通过OFFSET指定SELECT语句开始查询的数据偏移量。默认情况下偏移量为0</li>
</ul>
<h2 id="通过命令提示符获取数据"><a href="#通过命令提示符获取数据" class="headerlink" title="通过命令提示符获取数据"></a>通过命令提示符获取数据</h2><p>通过 SQL SELECT 命令来获取 MySQL 数据表 runoob_tbl 的所有数据</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> runoob_tbl;</div></pre></td></tr></table></figure>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/03/DB742246-84F3-4447-BD43-6BAEADD7CA91.jpg" alt="image"></p>
<h1 id="WHERE-子句"><a href="#WHERE-子句" class="headerlink" title="WHERE 子句"></a>WHERE 子句</h1><p>如需有条件地从表中选取数据，可将 WHERE 子句添加到 SELECT 语句中</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> field1, field2,<span class="params">...</span>fieldN FROM table_name1, table_name2<span class="params">...</span></div><div class="line"><span class="meta">[</span><span class="keyword">WHERE</span> condition1 <span class="meta">[</span><span class="literal">AND</span> <span class="meta">[</span><span class="literal">OR</span><span class="meta">]</span>] condition2.....</div></pre></td></tr></table></figure>
<h2 id="从命令提示符中读取数据"><a href="#从命令提示符中读取数据" class="headerlink" title="从命令提示符中读取数据"></a>从命令提示符中读取数据</h2><p>读取 runoob_tbl 表中 runoob_author 字段值为 Sanjay 的所有记录</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> runoob_tbl <span class="keyword">WHERE</span> runoob_author=<span class="string">'菜鸟教程'</span>;</div></pre></td></tr></table></figure>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/03/CED9CA9C-E4C7-4809-875C-A7E48F430059.jpg" alt="image"></p>
<p>MySQL 的 WHERE 子句的字符串比较是不区分大小写的</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 因为使用了 BINARY 关键字，是区分大小写的，所以 runoob_author='runoob.com' 的查询条件是没有数据的</span></div><div class="line">mysql&gt; SELECT * from runoob<span class="emphasis">_tbl WHERE BINARY runoob_</span>author=<span class="emphasis">'runoob.com'</span>;</div><div class="line">Empty set (0.01 sec)</div><div class="line"><span class="code"> </span></div><div class="line"><span class="section">mysql&gt; SELECT * from runoob_tbl WHERE BINARY runoob_author='RUNOOB.COM';</span></div><div class="line">+-----------+---------------+---------------+-----------------+</div><div class="line"><span class="section">| runoob_id | runoob_title  | runoob_author | submission_date |</span></div><div class="line">+-----------+---------------+---------------+-----------------+</div><div class="line">| 3         | JAVA 教程   | RUNOOB.COM    | 2016-05-06      |</div><div class="line"><span class="section">| 4         | 学习 Python | RUNOOB.COM    | 2016-03-06      |</span></div><div class="line">+-----------+---------------+---------------+-----------------+</div><div class="line">2 rows in set (0.01 sec)</div></pre></td></tr></table></figure>
<h1 id="UPDATE-查询"><a href="#UPDATE-查询" class="headerlink" title="UPDATE 查询"></a>UPDATE 查询</h1><p>修改或更新 MySQL 中的数据，可以使用 SQL UPDATE 命令来操作</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> table_name <span class="keyword">SET</span> field1=<span class="keyword">new</span>-value1, field2=<span class="keyword">new</span>-value2</div><div class="line">[<span class="keyword">WHERE</span> Clause]</div></pre></td></tr></table></figure>
<h2 id="通过命令提示符更新数据"><a href="#通过命令提示符更新数据" class="headerlink" title="通过命令提示符更新数据"></a>通过命令提示符更新数据</h2><p>将更新数据表中 runoob_id 为 3 的 runoob_title 字段值</p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mysql&gt; UPDATE runoob_tbl SET runoob_title='学习 C++' WHERE runoob_id=<span class="number">3</span>;</div><div class="line">Query OK, <span class="number">1</span> rows affected (<span class="number">0.01</span> sec)</div><div class="line"> </div><div class="line">mysql&gt; SELECT * from runoob_tbl WHERE runoob_id=<span class="number">3</span>;</div><div class="line">+-----------+--------------+---------------+-----------------+</div><div class="line">| <span class="type">runoob_id</span> | <span class="type">runoob_title</span> | <span class="type">runoob_author</span> | <span class="type">submission_date</span> |</div><div class="line"><span class="type">+-----------+--------------+---------------+-----------------+</span></div><div class="line">| 3         | <span class="type">学习 C</span>++   | <span class="type">RUNOOB</span>.COM    | <span class="type">2016</span><span class="number">-05</span><span class="number">-06</span>      |</div><div class="line"><span class="type">+-----------+--------------+---------------+-----------------+</span></div><div class="line">1 rows <span class="built_in">in</span> <span class="built_in">set</span> (<span class="number">0.01</span> sec)</div></pre></td></tr></table></figure>
<h1 id="DELETE-语句"><a href="#DELETE-语句" class="headerlink" title="DELETE 语句"></a>DELETE 语句</h1><p>使用 SQL 的 DELETE FROM 命令来删除 MySQL 数据表中的记录</p>
<p>语法:DELETE FROM table_name [WHERE Clause]</p>
<h2 id="从命令行中删除数据"><a href="#从命令行中删除数据" class="headerlink" title="从命令行中删除数据"></a>从命令行中删除数据</h2><p>在 SQL DELETE 命令中使用 WHERE 子句来删除 MySQL 数据表 runoob_tbl 所选的数据</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将删除 runoob_tbl 表中 runoob_id 为3</span></div><div class="line">mysql&gt; use RUNOOB;</div><div class="line">Database <span class="section">changed</span></div><div class="line">mysql&gt; DELETE FROM runoob_tbl WHERE runoob_id=<span class="number">3</span>;</div><div class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.23</span> sec)</div></pre></td></tr></table></figure>
<h1 id="LIKE-子句"><a href="#LIKE-子句" class="headerlink" title="LIKE 子句"></a>LIKE 子句</h1><p>“runoob_author = ‘RUNOOB.COM’”,获取 runoob_author 字段含有 “COM” 字符的所有记录，需要在 WHERE 子句中使用 SQL LIKE 子句</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> field1, field2,...fieldN </div><div class="line"><span class="keyword">FROM</span> table_name</div><div class="line"><span class="keyword">WHERE</span> field1 <span class="keyword">LIKE</span> condition1 [<span class="keyword">AND</span> [<span class="keyword">OR</span>]] filed2 = <span class="string">'somevalue'</span></div></pre></td></tr></table></figure>
<h2 id="在命令提示符中使用LIKE子句"><a href="#在命令提示符中使用LIKE子句" class="headerlink" title="在命令提示符中使用LIKE子句"></a>在命令提示符中使用LIKE子句</h2><p>runoob_tbl 表中获取 runoob_author 字段中以 COM 为结尾的的所有记录</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mysql&gt; use RUNOOB;</div><div class="line">Database changed</div><div class="line"><span class="section">mysql&gt; SELECT * from runoob_tbl  WHERE runoob_author LIKE '%COM';</span></div><div class="line">+-----------+---------------+---------------+-----------------+</div><div class="line"><span class="section">| runoob_id | runoob_title  | runoob_author | submission_date |</span></div><div class="line">+-----------+---------------+---------------+-----------------+</div><div class="line">| 3         | 学习 Java   | RUNOOB.COM    | 2015-05-01      |</div><div class="line"><span class="section">| 4         | 学习 Python | RUNOOB.COM    | 2016-03-06      |</span></div><div class="line">+-----------+---------------+---------------+-----------------+</div><div class="line">2 rows in set (0.01 sec)</div></pre></td></tr></table></figure>
<h1 id="UNION-操作符"><a href="#UNION-操作符" class="headerlink" title="UNION 操作符"></a>UNION 操作符</h1><p>MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合</p>
<p>参数</p>
<ul>
<li>expression1, expression2, … expression_n: 要检索的列</li>
<li>tables: 要检索的数据表</li>
<li>WHERE conditions: 可选， 检索条件</li>
<li>DISTINCT: 可选，删除结果集中重复的数据。默认情况下 UNION 操作符已经删除了重复数据，所以 DISTINCT 修饰符对结果没啥影响</li>
<li>ALL: 可选，返回所有结果集，包含重复数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> expression1, expression2, ... expression_n</div><div class="line"><span class="keyword">FROM</span> <span class="keyword">tables</span></div><div class="line">[<span class="keyword">WHERE</span> conditions]</div><div class="line"><span class="keyword">UNION</span> [ALL | <span class="keyword">DISTINCT</span>]</div><div class="line"><span class="keyword">SELECT</span> expression1, expression2, ... expression_n</div><div class="line"><span class="keyword">FROM</span> <span class="keyword">tables</span></div><div class="line">[<span class="keyword">WHERE</span> conditions];</div></pre></td></tr></table></figure>
<h2 id="演示数据库"><a href="#演示数据库" class="headerlink" title="演示数据库"></a>演示数据库</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// websites数据库</div><div class="line">mysql&gt; SELECT <span class="symbol">*</span> FROM Websites;</div><div class="line">+----+--------------+---------------------------+-------+---------+</div><div class="line">|<span class="string"> id </span>|<span class="string"> name         </span>|<span class="string"> url                       </span>|<span class="string"> alexa </span>|<span class="string"> country </span>|</div><div class="line">+----+--------------+---------------------------+-------+---------+</div><div class="line">|<span class="string"> 1  </span>|<span class="string"> Google       </span>|<span class="string"> https://www.google.cm/    </span>|<span class="string"> 1     </span>|<span class="string"> USA     </span>|</div><div class="line">|<span class="string"> 2  </span>|<span class="string"> 淘宝          </span>|<span class="string"> https://www.taobao.com/   </span>|<span class="string"> 13    </span>|<span class="string"> CN      </span>|</div><div class="line">|<span class="string"> 3  </span>|<span class="string"> 菜鸟教程      </span>|<span class="string"> http://www.runoob.com/    </span>|<span class="string"> 4689  </span>|<span class="string"> CN      </span>|</div><div class="line">|<span class="string"> 4  </span>|<span class="string"> 微博          </span>|<span class="string"> http://weibo.com/         </span>|<span class="string"> 20    </span>|<span class="string"> CN      </span>|</div><div class="line">|<span class="string"> 5  </span>|<span class="string"> Facebook     </span>|<span class="string"> https://www.facebook.com/ </span>|<span class="string"> 3     </span>|<span class="string"> USA     </span>|</div><div class="line">|<span class="string"> 7  </span>|<span class="string"> stackoverflow </span>|<span class="string"> http://stackoverflow.com/ </span>|<span class="string">   0 </span>|<span class="string"> IND     </span>|</div><div class="line">+----+---------------+---------------------------+-------+---------+</div><div class="line"></div><div class="line">// app数据库</div><div class="line">mysql&gt; SELECT <span class="symbol">*</span> FROM apps;</div><div class="line">+----+------------+-------------------------+---------+</div><div class="line">|<span class="string"> id </span>|<span class="string"> app_name   </span>|<span class="string"> url                     </span>|<span class="string"> country </span>|</div><div class="line">+----+------------+-------------------------+---------+</div><div class="line">|<span class="string">  1 </span>|<span class="string"> QQ APP     </span>|<span class="string"> http://im.qq.com/       </span>|<span class="string"> CN      </span>|</div><div class="line">|<span class="string">  2 </span>|<span class="string"> 微博 APP </span>|<span class="string"> http://weibo.com/       </span>|<span class="string"> CN      </span>|</div><div class="line">|<span class="string">  3 </span>|<span class="string"> 淘宝 APP </span>|<span class="string"> https://www.taobao.com/ </span>|<span class="string"> CN      </span>|</div><div class="line">+----+------------+-------------------------+---------+</div><div class="line">3 rows in set (0.00 sec)</div></pre></td></tr></table></figure>
<h2 id="SQL-UNION-实例"><a href="#SQL-UNION-实例" class="headerlink" title="SQL UNION 实例"></a>SQL UNION 实例</h2><p>SQL 语句从 “Websites” 和 “apps” 表中选取所有不同的country（只有不同的值）</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> country <span class="keyword">FROM</span> Websites</div><div class="line"><span class="keyword">UNION</span></div><div class="line"><span class="keyword">SELECT</span> country <span class="keyword">FROM</span> apps</div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> country;</div></pre></td></tr></table></figure>
<p><img src="http://www.runoob.com/wp-content/uploads/2013/09/union1.jpg" alt="image"></p>
<h2 id="SQL-UNION-ALL-实例"><a href="#SQL-UNION-ALL-实例" class="headerlink" title="SQL UNION ALL 实例"></a>SQL UNION ALL 实例</h2><p>SQL 语句使用 UNION ALL 从 “Websites” 和 “apps” 表中选取所有的country（也有重复的值）</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> country <span class="keyword">FROM</span> Websites</div><div class="line"><span class="keyword">UNION</span> ALL</div><div class="line"><span class="keyword">SELECT</span> country <span class="keyword">FROM</span> apps</div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> country;</div></pre></td></tr></table></figure>
<p><img src="http://www.runoob.com/wp-content/uploads/2013/09/union2.jpg" alt="image"></p>
<h2 id="带有-WHERE-的-SQL-UNION-ALL"><a href="#带有-WHERE-的-SQL-UNION-ALL" class="headerlink" title="带有 WHERE 的 SQL UNION ALL"></a>带有 WHERE 的 SQL UNION ALL</h2><p>SQL 语句使用 UNION ALL 从 “Websites” 和 “apps” 表中选取所有的中国(CN)的数据（也有重复的值）</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> country, <span class="keyword">name</span> <span class="keyword">FROM</span> Websites</div><div class="line"><span class="keyword">WHERE</span> country=<span class="string">'CN'</span></div><div class="line"><span class="keyword">UNION</span> ALL</div><div class="line"><span class="keyword">SELECT</span> country, app_name <span class="keyword">FROM</span> apps</div><div class="line"><span class="keyword">WHERE</span> country=<span class="string">'CN'</span></div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> country;</div></pre></td></tr></table></figure>
<p><img src="http://www.runoob.com/wp-content/uploads/2013/09/AAA99C7B-36A5-43FB-B489-F8CE63B62C71.jpg" alt="image"></p>
<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>对读取的数据进行排序，我们就可以使用 MySQL 的 ORDER BY 子句来设定你想按哪个字段哪种方式来进行排序，再返回搜索结果</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> field1, field2,<span class="params">...</span>fieldN table_name1, table_name2<span class="params">...</span></div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> field1, <span class="meta">[</span>field2<span class="params">...</span><span class="meta">]</span> <span class="meta">[</span>ASC <span class="meta">[</span>DESC<span class="meta">]</span>]</div></pre></td></tr></table></figure>
<h2 id="在命令提示符中使用-ORDER-BY-子句"><a href="#在命令提示符中使用-ORDER-BY-子句" class="headerlink" title="在命令提示符中使用 ORDER BY 子句"></a>在命令提示符中使用 ORDER BY 子句</h2><p>ASC 或 DESC 关键字来设置查询结果是按升序或降序排列</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">mysql&gt; use RUNOOB;</div><div class="line">Database changed</div><div class="line"><span class="section">mysql&gt; SELECT * from runoob_tbl ORDER BY submission_date ASC;</span></div><div class="line">+-----------+---------------+---------------+-----------------+</div><div class="line"><span class="section">| runoob_id | runoob_title  | runoob_author | submission_date |</span></div><div class="line">+-----------+---------------+---------------+-----------------+</div><div class="line">| 3         | 学习 Java   | RUNOOB.COM    | 2015-05-01      |</div><div class="line">| 4         | 学习 Python | RUNOOB.COM    | 2016-03-06      |</div><div class="line">| 1         | 学习 PHP    | 菜鸟教程  | 2017-04-12      |</div><div class="line"><span class="section">| 2         | 学习 MySQL  | 菜鸟教程  | 2017-04-12      |</span></div><div class="line">+-----------+---------------+---------------+-----------------+</div><div class="line">4 rows in set (0.01 sec)</div><div class="line"><span class="code"> </span></div><div class="line"><span class="section">mysql&gt; SELECT * from runoob_tbl ORDER BY submission_date DESC;</span></div><div class="line">+-----------+---------------+---------------+-----------------+</div><div class="line"><span class="section">| runoob_id | runoob_title  | runoob_author | submission_date |</span></div><div class="line">+-----------+---------------+---------------+-----------------+</div><div class="line">| 1         | 学习 PHP    | 菜鸟教程  | 2017-04-12      |</div><div class="line">| 2         | 学习 MySQL  | 菜鸟教程  | 2017-04-12      |</div><div class="line">| 4         | 学习 Python | RUNOOB.COM    | 2016-03-06      |</div><div class="line"><span class="section">| 3         | 学习 Java   | RUNOOB.COM    | 2015-05-01      |</span></div><div class="line">+-----------+---------------+---------------+-----------------+</div><div class="line">4 rows in set (0.01 sec)</div></pre></td></tr></table></figure>
<h1 id="GROUP-BY-语句"><a href="#GROUP-BY-语句" class="headerlink" title="GROUP BY 语句"></a>GROUP BY 语句</h1><p>GROUP BY 语句根据一个或多个列对结果集进行分组</p>
<p>在分组的列上我们可以使用 COUNT, SUM, AVG,等函数</p>
<p>语法</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> column_name, <span class="keyword">function</span>(column_name)</div><div class="line"><span class="keyword">FROM</span> table_name</div><div class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">operator</span> <span class="keyword">value</span></div><div class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> column_name;</div></pre></td></tr></table></figure>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>使用前我们可以先将以下数据导入数据库中</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SET</span> <span class="keyword">NAMES</span> utf8;</div><div class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">--  Table structure for `employee_tbl`</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`employee_tbl`</span>;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employee_tbl`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`name`</span> <span class="built_in">char</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</div><div class="line">  <span class="string">`date`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`singin`</span> tinyint(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'登录次数'</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">--  Records of `employee_tbl`</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">BEGIN</span>;</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`employee_tbl`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'小明'</span>, <span class="string">'2016-04-22 15:25:33'</span>, <span class="string">'1'</span>), (<span class="string">'2'</span>, <span class="string">'小王'</span>, <span class="string">'2016-04-20 15:25:47'</span>, <span class="string">'3'</span>), (<span class="string">'3'</span>, <span class="string">'小丽'</span>, <span class="string">'2016-04-19 15:26:02'</span>, <span class="string">'2'</span>), (<span class="string">'4'</span>, <span class="string">'小王'</span>, <span class="string">'2016-04-07 15:26:14'</span>, <span class="string">'4'</span>), (<span class="string">'5'</span>, <span class="string">'小明'</span>, <span class="string">'2016-04-11 15:26:40'</span>, <span class="string">'4'</span>), (<span class="string">'6'</span>, <span class="string">'小明'</span>, <span class="string">'2016-04-04 15:26:54'</span>, <span class="string">'2'</span>);</div><div class="line"><span class="keyword">COMMIT</span>;</div><div class="line"></div><div class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">1</span>;</div></pre></td></tr></table></figure>
<p>导入成功,执行以下 SQL 语句</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">mysql&gt; set names utf8;</div><div class="line">mysql&gt; SELECT <span class="symbol">*</span> FROM employee_tbl;</div><div class="line">+----+--------+---------------------+--------+</div><div class="line">|<span class="string"> id </span>|<span class="string"> name   </span>|<span class="string"> date                </span>|<span class="string"> singin </span>|</div><div class="line">+----+--------+---------------------+--------+</div><div class="line">|<span class="string">  1 </span>|<span class="string"> 小明 </span>|<span class="string"> 2016-04-22 15:25:33 </span>|<span class="string">      1 </span>|</div><div class="line">|<span class="string">  2 </span>|<span class="string"> 小王 </span>|<span class="string"> 2016-04-20 15:25:47 </span>|<span class="string">      3 </span>|</div><div class="line">|<span class="string">  3 </span>|<span class="string"> 小丽 </span>|<span class="string"> 2016-04-19 15:26:02 </span>|<span class="string">      2 </span>|</div><div class="line">|<span class="string">  4 </span>|<span class="string"> 小王 </span>|<span class="string"> 2016-04-07 15:26:14 </span>|<span class="string">      4 </span>|</div><div class="line">|<span class="string">  5 </span>|<span class="string"> 小明 </span>|<span class="string"> 2016-04-11 15:26:40 </span>|<span class="string">      4 </span>|</div><div class="line">|<span class="string">  6 </span>|<span class="string"> 小明 </span>|<span class="string"> 2016-04-04 15:26:54 </span>|<span class="string">      2 </span>|</div><div class="line">+----+--------+---------------------+--------+</div><div class="line">6 rows in set (0.00 sec)</div></pre></td></tr></table></figure>
<h2 id="使用-GROUP-BY-语句"><a href="#使用-GROUP-BY-语句" class="headerlink" title="使用 GROUP BY 语句"></a>使用 GROUP BY 语句</h2><p>将数据表按名字进行分组，并统计每个人有多少条记录</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; SELECT name, COUNT(*) FROM   employee_tbl GROUP BY name;</span></div><div class="line">+--------+----------+</div><div class="line"><span class="section">| name   | COUNT(*) |</span></div><div class="line">+--------+----------+</div><div class="line">| 小丽 |        1 |</div><div class="line">| 小明 |        3 |</div><div class="line"><span class="section">| 小王 |        2 |</span></div><div class="line">+--------+----------+</div><div class="line">3 rows in set (0.01 sec)</div></pre></td></tr></table></figure>
<h2 id="使用-WITH-ROLLUP"><a href="#使用-WITH-ROLLUP" class="headerlink" title="使用 WITH ROLLUP"></a>使用 WITH ROLLUP</h2><p>WITH ROLLUP 可以实现在分组统计数据基础上再进行相同的统计（SUM,AVG,COUNT…）</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将以上的数据表按名字进行分组，再统计每个人登录的次数</span></div><div class="line"><span class="comment">// 记录 NULL 表示所有人的登录次数</span></div><div class="line"><span class="section">mysql&gt; SELECT name, SUM(singin) as singin_count FROM  employee_tbl GROUP BY name WITH ROLLUP;</span></div><div class="line">+--------+--------------+</div><div class="line"><span class="section">| name   | singin_count |</span></div><div class="line">+--------+--------------+</div><div class="line">| 小丽 |            2 |</div><div class="line">| 小明 |            7 |</div><div class="line">| 小王 |            7 |</div><div class="line"><span class="section">| NULL   |           16 |</span></div><div class="line">+--------+--------------+</div><div class="line">4 rows in set (0.00 sec)</div></pre></td></tr></table></figure>
<p>可以使用 coalesce 来设置一个可以取代 NUll 的名称，coalesce 语法</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">coalesce</span>(a,b,c);</div></pre></td></tr></table></figure>
<p>参数说明：如果a==null,则选择b；如果b==null,则选择c；如果a!=null,则选择a；如果a b c 都为null ，则返回为null（没意义）</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; SELECT coalesce(name, '总数'), SUM(singin) as singin_count FROM  employee_tbl GROUP BY name WITH ROLLUP;</span></div><div class="line">+--------------------------+--------------+</div><div class="line"><span class="section">| coalesce(name, '总数') | singin_count |</span></div><div class="line">+--------------------------+--------------+</div><div class="line">| 小丽                   |            2 |</div><div class="line">| 小明                   |            7 |</div><div class="line">| 小王                   |            7 |</div><div class="line"><span class="section">| 总数                   |           16 |</span></div><div class="line">+--------------------------+--------------+</div><div class="line">4 rows in set (0.01 sec)</div></pre></td></tr></table></figure>
<h1 id="连接的使用"><a href="#连接的使用" class="headerlink" title="连接的使用"></a>连接的使用</h1><p>在 SELECT, UPDATE 和 DELETE 语句中使用 Mysql 的 JOIN 来联合多表查询</p>
<p>JOIN按照功能大致分为如下三类</p>
<ul>
<li>INNER JOIN（内连接,或等值连接）：获取两个表中字段匹配关系的记录</li>
<li>LEFT JOIN（左连接）：获取左表所有记录，即使右表没有对应匹配的记录</li>
<li>RIGHT JOIN（右连接）： 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录</li>
</ul>
<h2 id="在命令提示符中使用-INNER-JOIN"><a href="#在命令提示符中使用-INNER-JOIN" class="headerlink" title="在命令提示符中使用 INNER JOIN"></a>在命令提示符中使用 INNER JOIN</h2><p>RUNOOB数据库中有两张表 tcount_tbl 和 runoob_tbl</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">mysql&gt; use RUNOOB;</div><div class="line">Database changed</div><div class="line"><span class="section">mysql&gt; SELECT * FROM tcount_tbl;</span></div><div class="line">+---------------+--------------+</div><div class="line"><span class="section">| runoob_author | runoob_count |</span></div><div class="line">+---------------+--------------+</div><div class="line">| 菜鸟教程  | 10           |</div><div class="line">| RUNOOB.COM    | 20           |</div><div class="line"><span class="section">| Google        | 22           |</span></div><div class="line">+---------------+--------------+</div><div class="line">3 rows in set (0.01 sec)</div><div class="line"><span class="code"> </span></div><div class="line"><span class="section">mysql&gt; SELECT * from runoob_tbl;</span></div><div class="line">+-----------+---------------+---------------+-----------------+</div><div class="line"><span class="section">| runoob_id | runoob_title  | runoob_author | submission_date |</span></div><div class="line">+-----------+---------------+---------------+-----------------+</div><div class="line">| 1         | 学习 PHP    | 菜鸟教程  | 2017-04-12      |</div><div class="line">| 2         | 学习 MySQL  | 菜鸟教程  | 2017-04-12      |</div><div class="line">| 3         | 学习 Java   | RUNOOB.COM    | 2015-05-01      |</div><div class="line">| 4         | 学习 Python | RUNOOB.COM    | 2016-03-06      |</div><div class="line"><span class="section">| 5         | 学习 C      | FK            | 2017-04-05      |</span></div><div class="line">+-----------+---------------+---------------+-----------------+</div><div class="line">5 rows in set (0.01 sec)</div></pre></td></tr></table></figure>
<p>MySQL的INNER JOIN来连接以上两张表来读取runoob_tbl表中所有runoob_author字段在tcount_tbl表对应的runoob_count字段值</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a INNER JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;</span></div><div class="line">+-------------+-----------------+----------------+</div><div class="line"><span class="section">| a.runoob_id | a.runoob_author | b.runoob_count |</span></div><div class="line">+-------------+-----------------+----------------+</div><div class="line">| 1           | 菜鸟教程    | 10             |</div><div class="line">| 2           | 菜鸟教程    | 10             |</div><div class="line">| 3           | RUNOOB.COM      | 20             |</div><div class="line"><span class="section">| 4           | RUNOOB.COM      | 20             |</span></div><div class="line">+-------------+-----------------+----------------+</div><div class="line">4 rows in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="comment">// 以上 SQL 语句等价于</span></div><div class="line"><span class="section">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a, tcount_tbl b WHERE a.runoob_author = b.runoob_author;</span></div><div class="line">+-------------+-----------------+----------------+</div><div class="line"><span class="section">| a.runoob_id | a.runoob_author | b.runoob_count |</span></div><div class="line">+-------------+-----------------+----------------+</div><div class="line">| 1           | 菜鸟教程    | 10             |</div><div class="line">| 2           | 菜鸟教程    | 10             |</div><div class="line">| 3           | RUNOOB.COM      | 20             |</div><div class="line"><span class="section">| 4           | RUNOOB.COM      | 20             |</span></div><div class="line">+-------------+-----------------+----------------+</div><div class="line">4 rows in set (0.01 sec)</div></pre></td></tr></table></figure>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/03/img_innerjoin.gif" alt="image"></p>
<h2 id="MySQL-LEFT-JOIN"><a href="#MySQL-LEFT-JOIN" class="headerlink" title="MySQL LEFT JOIN"></a>MySQL LEFT JOIN</h2><p>MySQL LEFT JOIN 会读取左边数据表的全部数据，即便右边表无对应数据</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 以 runoob_tbl 为左表，tcount_tbl 为右表</span></div><div class="line"><span class="comment">// 读取左边的数据表 runoob_tbl 的所有选取的字段数据，即便在右侧表 tcount_tbl中 没有对应的 runoob_author 字段值</span></div><div class="line"><span class="section">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a LEFT JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;</span></div><div class="line">+-------------+-----------------+----------------+</div><div class="line"><span class="section">| a.runoob_id | a.runoob_author | b.runoob_count |</span></div><div class="line">+-------------+-----------------+----------------+</div><div class="line">| 1           | 菜鸟教程    | 10             |</div><div class="line">| 2           | 菜鸟教程    | 10             |</div><div class="line">| 3           | RUNOOB.COM      | 20             |</div><div class="line">| 4           | RUNOOB.COM      | 20             |</div><div class="line"><span class="section">| 5           | FK              | NULL           |</span></div><div class="line">+-------------+-----------------+----------------+</div><div class="line">5 rows in set (0.01 sec)</div></pre></td></tr></table></figure>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/03/img_leftjoin.gif" alt="image"></p>
<h2 id="MySQL-RIGHT-JOIN"><a href="#MySQL-RIGHT-JOIN" class="headerlink" title="MySQL RIGHT JOIN"></a>MySQL RIGHT JOIN</h2><p>MySQL RIGHT JOIN 会读取右边数据表的全部数据，即便左边边表无对应数据</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 以 runoob_tbl 为左表，tcount_tbl 为右表，理解MySQL RIGHT JOIN的应用</span></div><div class="line"><span class="section">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a RIGHT JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;</span></div><div class="line">+-------------+-----------------+----------------+</div><div class="line"><span class="section">| a.runoob_id | a.runoob_author | b.runoob_count |</span></div><div class="line">+-------------+-----------------+----------------+</div><div class="line">| 1           | 菜鸟教程    | 10             |</div><div class="line">| 2           | 菜鸟教程    | 10             |</div><div class="line">| 3           | RUNOOB.COM      | 20             |</div><div class="line">| 4           | RUNOOB.COM      | 20             |</div><div class="line"><span class="section">| NULL        | NULL            | 22             |</span></div><div class="line">+-------------+-----------------+----------------+</div><div class="line">5 rows in set (0.01 sec)</div></pre></td></tr></table></figure>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/03/img_rightjoin.gif" alt="image"></p>
<h1 id="NULL-值处理"><a href="#NULL-值处理" class="headerlink" title="NULL 值处理"></a>NULL 值处理</h1><p>SQL SELECT 命令及 WHERE 子句来读取数据表中的数据,当提供的查询条件字段为 NULL 时，该命令可能就无法正常工作</p>
<p>为了处理这种情况，MySQL提供了三大运算符</p>
<ul>
<li>IS NULL: 当列的值是 NULL,此运算符返回 true</li>
<li>IS NOT NULL: 当列的值不为 NULL, 运算符返回 true</li>
<li>&lt;=&gt;: 比较操作符（不同于=运算符），当比较的的两个值为 NULL 时返回 true</li>
</ul>
<h2 id="在命令提示符中使用-NULL-值"><a href="#在命令提示符中使用-NULL-值" class="headerlink" title="在命令提示符中使用 NULL 值"></a>在命令提示符中使用 NULL 值</h2><p>数据库 RUNOOB 中的表 runoob_test_tbl 含有两列 runoob_author 和 runoob_count, runoob_count 中设置插入NULL值</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">root@host# mysql -u root -p password;</div><div class="line">Enter password:*******</div><div class="line">mysql&gt; use RUNOOB;</div><div class="line">Database changed</div><div class="line">mysql&gt; create table runoob<span class="emphasis">_test_</span>tbl</div><div class="line"><span class="code">    -&gt; (</span></div><div class="line"><span class="code">    -&gt; runoob_author varchar(40) NOT NULL,</span></div><div class="line"><span class="code">    -&gt; runoob_count  INT</span></div><div class="line"><span class="code">    -&gt; );</span></div><div class="line">Query OK, 0 rows affected (0.05 sec)</div><div class="line">mysql&gt; INSERT INTO runoob<span class="emphasis">_test_</span>tbl (runoob<span class="emphasis">_author, runoob_</span>count) values (<span class="emphasis">'RUNOOB'</span>, 20);</div><div class="line">mysql&gt; INSERT INTO runoob<span class="emphasis">_test_</span>tbl (runoob<span class="emphasis">_author, runoob_</span>count) values (<span class="emphasis">'菜鸟教程'</span>, NULL);</div><div class="line">mysql&gt; INSERT INTO runoob<span class="emphasis">_test_</span>tbl (runoob<span class="emphasis">_author, runoob_</span>count) values (<span class="emphasis">'Google'</span>, NULL);</div><div class="line">mysql&gt; INSERT INTO runoob<span class="emphasis">_test_</span>tbl (runoob<span class="emphasis">_author, runoob_</span>count) values (<span class="emphasis">'FK'</span>, 20);</div><div class="line"><span class="code"> </span></div><div class="line"><span class="section">mysql&gt; SELECT * from runoob_test_tbl;</span></div><div class="line">+---------------+--------------+</div><div class="line"><span class="section">| runoob_author | runoob_count |</span></div><div class="line">+---------------+--------------+</div><div class="line">| RUNOOB        | 20           |</div><div class="line">| 菜鸟教程  | NULL         |</div><div class="line">| Google        | NULL         |</div><div class="line"><span class="section">| FK            | 20           |</span></div><div class="line">+---------------+--------------+</div><div class="line">4 rows in set (0.01 sec)</div></pre></td></tr></table></figure>
<p>可以看到 = 和 != 运算符是不起作用的</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql&gt; <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> runoob_test_tbl <span class="keyword">WHERE</span> runoob_count = NULL;</div><div class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div><div class="line">mysql&gt; <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> runoob_test_tbl <span class="keyword">WHERE</span> runoob_count != NULL;</div><div class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</div></pre></td></tr></table></figure>
<p>查找数据表中 runoob_test_tbl 列是否为 NULL，必须使用 IS NULL 和 IS NOT NULL</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; SELECT * FROM runoob_test_tbl WHERE runoob_count IS NULL;</span></div><div class="line">+---------------+--------------+</div><div class="line"><span class="section">| runoob_author | runoob_count |</span></div><div class="line">+---------------+--------------+</div><div class="line">| 菜鸟教程  | NULL         |</div><div class="line"><span class="section">| Google        | NULL         |</span></div><div class="line">+---------------+--------------+</div><div class="line">2 rows in set (0.01 sec)</div><div class="line"><span class="code"> </span></div><div class="line"><span class="section">mysql&gt; SELECT * from runoob_test_tbl WHERE runoob_count IS NOT NULL;</span></div><div class="line">+---------------+--------------+</div><div class="line"><span class="section">| runoob_author | runoob_count |</span></div><div class="line">+---------------+--------------+</div><div class="line">| RUNOOB        | 20           |</div><div class="line"><span class="section">| FK            | 20           |</span></div><div class="line">+---------------+--------------+</div><div class="line">2 rows in set (0.01 sec)</div></pre></td></tr></table></figure>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>MySQL中使用 REGEXP 操作符来进行正则表达式匹配</p>
<ul>
<li>^    匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置</li>
<li>$    匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置</li>
<li>.    匹配除 “\n” 之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用象 ‘[.\n]’ 的模式</li>
<li>[…]    字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’</li>
<li>[^…]    负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’</li>
<li>p1|p2|p3    匹配 p1 或 p2 或 p3。例如，’z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”</li>
<li><ul>
<li>匹配前面的子表达式零次或多次。例如，zo<em> 能匹配 “z” 以及 “zoo”。</em> 等价于{0,}</li>
</ul>
</li>
<li><ul>
<li>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}</li>
</ul>
</li>
<li>{n}    n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o</li>
<li>{n,m}    m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次</li>
</ul>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 查找name字段中以'st'为开头的所有数据</span></div><div class="line">mysql&gt; <span class="built_in">SELECT</span> <span class="built_in">name</span> <span class="keyword">FROM</span> person_tbl WHERE <span class="built_in">name</span> REGEXP <span class="string">'^st'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 查找name字段中以'ok'为结尾的所有数据</span></div><div class="line">mysql&gt; <span class="built_in">SELECT</span> <span class="built_in">name</span> <span class="keyword">FROM</span> person_tbl WHERE <span class="built_in">name</span> REGEXP <span class="string">'ok$'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 查找name字段中包含'mar'字符串的所有数据</span></div><div class="line">mysql&gt; <span class="built_in">SELECT</span> <span class="built_in">name</span> <span class="keyword">FROM</span> person_tbl WHERE <span class="built_in">name</span> REGEXP <span class="string">'mar'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 查找name字段中以元音字符开头或以'ok'字符串结尾的所有数据</span></div><div class="line">mysql&gt; <span class="built_in">SELECT</span> <span class="built_in">name</span> <span class="keyword">FROM</span> person_tbl WHERE <span class="built_in">name</span> REGEXP <span class="string">'^[aeiou]|ok$'</span>;</div></pre></td></tr></table></figure>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>MySQL 事务主要用于处理操作量大，复杂度高的数据</p>
<ul>
<li>在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务。</li>
<li>事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。</li>
<li>事务用来管理 insert,update,delete 语句</li>
</ul>
<p>事务是必须满足4个条件:原子性、一致性、隔离性、持久性</p>
<ul>
<li>原子性：一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节</li>
<li>一致性：在事务开始之前和事务结束以后，数据库的完整性没有被破坏</li>
<li>隔离性：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致</li>
<li>持久性：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失</li>
</ul>
<h2 id="事务控制语句"><a href="#事务控制语句" class="headerlink" title="事务控制语句"></a>事务控制语句</h2><ul>
<li>BEGIN或START TRANSACTION；显式地开启一个事务</li>
<li>COMMIT；也可以使用COMMIT WORK，不过二者是等价的。COMMIT会提交事务，并使已对数据库进行的所有修改成为永久性的</li>
<li>ROLLBACK；有可以使用ROLLBACK WORK，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改</li>
<li>SAVEPOINT identifier；SAVEPOINT允许在事务中创建一个保存点，一个事务中可以有多个SAVEPOINT</li>
<li>RELEASE SAVEPOINT identifier；删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常</li>
<li>ROLLBACK TO identifier；把事务回滚到标记点</li>
<li>SET TRANSACTION；用来设置事务的隔离级别</li>
</ul>
<h2 id="MYSQL-事务处理主要有两种方法"><a href="#MYSQL-事务处理主要有两种方法" class="headerlink" title="MYSQL 事务处理主要有两种方法"></a>MYSQL 事务处理主要有两种方法</h2><p>用 BEGIN, ROLLBACK, COMMIT来实现</p>
<ul>
<li>BEGIN 开始一个事务</li>
<li>ROLLBACK 事务回滚</li>
<li>COMMIT 事务确认</li>
</ul>
<p>直接用 SET 来改变 MySQL 的自动提交模式</p>
<ul>
<li>SET AUTOCOMMIT=0 禁止自动提交</li>
<li>SET AUTOCOMMIT=1 开启自动提交</li>
</ul>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">mysql&gt; use RUNOOB;</div><div class="line">Database changed</div><div class="line">mysql&gt; CREATE TABLE runoob<span class="emphasis">_transaction_</span>test( id int(5)) engine=innodb;  # 创建数据表</div><div class="line">Query OK, 0 rows affected (0.04 sec)</div><div class="line"><span class="code"> </span></div><div class="line">mysql&gt; select * from runoob<span class="emphasis">_transaction_</span>test;</div><div class="line">Empty set (0.01 sec)</div><div class="line"><span class="code"> </span></div><div class="line">mysql&gt; begin;  # 开始事务</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"><span class="code"> </span></div><div class="line">mysql&gt; insert into runoob<span class="emphasis">_transaction_</span>test value(5);</div><div class="line">Query OK, 1 rows affected (0.01 sec)</div><div class="line"><span class="code"> </span></div><div class="line">mysql&gt; insert into runoob<span class="emphasis">_transaction_</span>test value(6);</div><div class="line">Query OK, 1 rows affected (0.00 sec)</div><div class="line"><span class="code"> </span></div><div class="line">mysql&gt; commit; # 提交事务</div><div class="line">Query OK, 0 rows affected (0.01 sec)</div><div class="line"><span class="code"> </span></div><div class="line"><span class="section">mysql&gt;  select * from runoob_transaction_test;</span></div><div class="line">+------+</div><div class="line"><span class="section">| id   |</span></div><div class="line">+------+</div><div class="line">| 5    |</div><div class="line"><span class="section">| 6    |</span></div><div class="line">+------+</div><div class="line">2 rows in set (0.01 sec)</div><div class="line"><span class="code"> </span></div><div class="line">mysql&gt; begin;    # 开始事务</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"><span class="code"> </span></div><div class="line">mysql&gt;  insert into runoob<span class="emphasis">_transaction_</span>test values(7);</div><div class="line">Query OK, 1 rows affected (0.00 sec)</div><div class="line"><span class="code"> </span></div><div class="line">mysql&gt; rollback;   # 回滚</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"><span class="code"> </span></div><div class="line"><span class="section">mysql&gt;   select * from runoob_transaction_test;   # 因为回滚所以数据没有插入</span></div><div class="line">+------+</div><div class="line"><span class="section">| id   |</span></div><div class="line">+------+</div><div class="line">| 5    |</div><div class="line"><span class="section">| 6    |</span></div><div class="line">+------+</div><div class="line">2 rows in set (0.01 sec)</div><div class="line"><span class="code"> </span></div><div class="line">mysql&gt;</div></pre></td></tr></table></figure>
<h1 id="ALTER命令"><a href="#ALTER命令" class="headerlink" title="ALTER命令"></a>ALTER命令</h1><p>修改数据表名或者修改数据表字段时，就需要使用到MySQL ALTER命令</p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// 创建一张表，表名为：testalter_tbl</div><div class="line">mysql -u root -p password;</div><div class="line">mysql&gt; use RUNOOB;</div><div class="line">Database changed</div><div class="line">mysql&gt; create table testalter_tbl</div><div class="line">    -&gt; (</div><div class="line">    -&gt; i INT,</div><div class="line">    -&gt; c CHAR(<span class="number">1</span>)</div><div class="line">    -&gt; );</div><div class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.05</span> sec)</div><div class="line">mysql&gt; SHOW COLUMNS FROM testalter_tbl;</div><div class="line">+-------+---------+------+-----+---------+-------+</div><div class="line">| <span class="type">Field</span> | <span class="type">Type</span>    | <span class="type">Null</span> | <span class="type">Key</span> | <span class="type">Default</span> | <span class="type">Extra</span> |</div><div class="line"><span class="type">+-------+---------+------+-----+---------+-------+</span></div><div class="line">| i     | <span class="type">int</span>(<span class="number">11</span>) | <span class="type">YES</span>  |     <span class="type">| NULL</span>    |       <span class="type">|</span></div><div class="line">| c     | <span class="type">char</span>(<span class="number">1</span>) | <span class="type">YES</span>  |     <span class="type">| NULL</span>    |       <span class="type">|</span></div><div class="line">+-------+---------+------+-----+---------+-------+</div><div class="line">2 rows <span class="built_in">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure>
<h2 id="删除，添加或修改表字段"><a href="#删除，添加或修改表字段" class="headerlink" title="删除，添加或修改表字段"></a>删除，添加或修改表字段</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ALTER 命令及 DROP 子句来删除以上创建表的 i 字段</span></div><div class="line">mysql&gt; ALTER TABLE testalter<span class="emphasis">_tbl  DROP i;</span></div><div class="line"></div><div class="line"><span class="comment">// MySQL 中使用 ADD 子句来向数据表中添加列，如下实例在表 testalter_tbl 中添加 i 字段，并定义数据类型</span></div><div class="line">mysql&gt; ALTER TABLE testalter<span class="emphasis">_tbl ADD i INT;</span></div><div class="line"></div><div class="line"><span class="comment">// 执行以上命令后，i 字段会自动添加到数据表字段的末尾</span></div><div class="line"><span class="section">mysql&gt; SHOW COLUMNS FROM testalter_tbl;</span></div><div class="line">+-------+---------+------+-----+---------+-------+</div><div class="line"><span class="section">| Field | Type    | Null | Key | Default | Extra |</span></div><div class="line">+-------+---------+------+-----+---------+-------+</div><div class="line">| c     | char(1) | YES  |     | NULL    |       |</div><div class="line"><span class="section">| i     | int(11) | YES  |     | NULL    |       |</span></div><div class="line">+-------+---------+------+-----+---------+-------+</div><div class="line">2 rows in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="comment">// 指定新增字段的位置，可以使用MySQL提供的关键字 FIRST (设定位第一列)， AFTER 字段名（设定位于某个字段之后）</span></div><div class="line">ALTER TABLE testalter<span class="emphasis">_tbl DROP i;</span></div><div class="line">ALTER TABLE testalter_tbl ADD i INT FIRST;</div><div class="line">ALTER TABLE testalter<span class="emphasis">_tbl DROP i;</span></div><div class="line">ALTER TABLE testalter_tbl ADD i INT AFTER c;</div></pre></td></tr></table></figure>
<h2 id="修改字段类型及名称"><a href="#修改字段类型及名称" class="headerlink" title="修改字段类型及名称"></a>修改字段类型及名称</h2><p>需要修改字段类型及名称, 你可以在ALTER命令中使用 MODIFY 或 CHANGE 子句</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 把字段 c 的类型从 CHAR(1) 改为 CHAR(10)，执行以下命令</span></div><div class="line">mysql&gt; ALTER <span class="keyword">TABLE</span> testalter_tbl <span class="comment">MODIFY c CHAR(10)</span>;</div><div class="line"></div><div class="line"><span class="comment">// 使用 CHANGE 子句,在 CHANGE 关键字之后，紧跟着的是你要修改的字段名，然后指定新字段名及类型</span></div><div class="line">mysql&gt; ALTER <span class="keyword">TABLE</span> testalter_tbl <span class="comment">CHANGE i j BIGINT</span>;</div><div class="line">mysql&gt; ALTER <span class="keyword">TABLE</span> testalter_tbl <span class="comment">CHANGE j j INT</span>;</div></pre></td></tr></table></figure>
<h2 id="ALTER-TABLE-对-Null-值和默认值的影响"><a href="#ALTER-TABLE-对-Null-值和默认值的影响" class="headerlink" title="ALTER TABLE 对 Null 值和默认值的影响"></a>ALTER TABLE 对 Null 值和默认值的影响</h2><p>当你修改字段时，你可以指定是否包含值或者是否设置默认值</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 指定字段 j 为 <span class="literal">NOT</span> <span class="literal">NULL</span> 且默认值为<span class="number">100</span> </div><div class="line">mysql&gt; ALTER TABLE testalter_tbl </div><div class="line">    -&gt; MODIFY j BIGINT <span class="literal">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">100</span><span class="comment">;</span></div></pre></td></tr></table></figure>
<h2 id="修改字段默认值"><a href="#修改字段默认值" class="headerlink" title="修改字段默认值"></a>修改字段默认值</h2><p>可以使用 ALTER 来修改字段的默认值</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mysql&gt; ALTER TABLE testalter_tbl ALTER i SET DEFAULT 1000;</div><div class="line">mysql&gt; SHOW COLUMNS FROM testalter_tbl;</div><div class="line">+-------+---------+------+-----+---------+-------+</div><div class="line">|<span class="string"> Field </span>|<span class="string"> Type    </span>|<span class="string"> Null </span>|<span class="string"> Key </span>|<span class="string"> Default </span>|<span class="string"> Extra </span>|</div><div class="line">+-------+---------+------+-----+---------+-------+</div><div class="line">|<span class="string"> c     </span>|<span class="string"> char(1) </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">       </span>|</div><div class="line">|<span class="string"> i     </span>|<span class="string"> int(11) </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> 1000    </span>|<span class="string">       </span>|</div><div class="line">+-------+---------+------+-----+---------+-------+</div><div class="line">2 rows in set (0.00 sec)</div></pre></td></tr></table></figure>
<p>使用 ALTER 命令及 DROP子句来删除字段的默认值</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mysql&gt; ALTER TABLE testalter_tbl ALTER i DROP DEFAULT;</div><div class="line">mysql&gt; SHOW COLUMNS FROM testalter_tbl;</div><div class="line">+-------+---------+------+-----+---------+-------+</div><div class="line">|<span class="string"> Field </span>|<span class="string"> Type    </span>|<span class="string"> Null </span>|<span class="string"> Key </span>|<span class="string"> Default </span>|<span class="string"> Extra </span>|</div><div class="line">+-------+---------+------+-----+---------+-------+</div><div class="line">|<span class="string"> c     </span>|<span class="string"> char(1) </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">       </span>|</div><div class="line">|<span class="string"> i     </span>|<span class="string"> int(11) </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">       </span>|</div><div class="line">+-------+---------+------+-----+---------+-------+</div><div class="line">2 rows in set (0.00 sec)</div><div class="line">Changing a Table Type:</div></pre></td></tr></table></figure>
<p>修改数据表类型，可以使用 ALTER 命令及 TYPE 子句来完成。表 testalter_tbl 的类型修改为 MYISAM </p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">mysql&gt; ALTER TABLE testalter_tbl ENGINE = MYISAM;</div><div class="line">mysql&gt;  SHOW TABLE STATUS LIKE <span class="string">'testalter_tbl'</span>\G</div><div class="line">*************************** <span class="number">1.</span> row ****************</div><div class="line"><span class="attr">           Name:</span> testalter_tbl</div><div class="line"><span class="attr">           Type:</span> MyISAM</div><div class="line"><span class="attr">     Row_format:</span> Fixed</div><div class="line"><span class="attr">           Rows:</span> <span class="number">0</span></div><div class="line"><span class="attr"> Avg_row_length:</span> <span class="number">0</span></div><div class="line"><span class="attr">    Data_length:</span> <span class="number">0</span></div><div class="line"><span class="attr">Max_data_length:</span> <span class="number">25769803775</span></div><div class="line"><span class="attr">   Index_length:</span> <span class="number">1024</span></div><div class="line"><span class="attr">      Data_free:</span> <span class="number">0</span></div><div class="line"><span class="attr"> Auto_increment:</span> <span class="literal">NULL</span></div><div class="line"><span class="attr">    Create_time:</span> <span class="number">2007</span><span class="bullet">-06</span><span class="bullet">-03</span> <span class="number">08</span>:<span class="number">04</span>:<span class="number">36</span></div><div class="line"><span class="attr">    Update_time:</span> <span class="number">2007</span><span class="bullet">-06</span><span class="bullet">-03</span> <span class="number">08</span>:<span class="number">04</span>:<span class="number">36</span></div><div class="line"><span class="attr">     Check_time:</span> <span class="literal">NULL</span></div><div class="line"><span class="attr"> Create_options:</span></div><div class="line"><span class="attr">        Comment:</span></div><div class="line"><span class="number">1</span> row in set (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure>
<h2 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h2><p>修改数据表的名称，可以在 ALTER TABLE 语句中使用 RENAME 子句来实现</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将数据表 testalter_tbl 重命名为 alter_tbl</span></div><div class="line">mysql&gt; ALTER <span class="keyword">TABLE</span> testalter_tbl <span class="comment">RENAME TO alter_tbl</span>;</div></pre></td></tr></table></figure>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>索引分单列索引和组合索引</p>
<p>单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引</p>
<p>组合索引，即一个索引包含多个列</p>
<h2 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h2><p>这是最基本的索引，它没有任何限制。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 创建索引</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> indexName <span class="keyword">ON</span> mytable(username(<span class="keyword">length</span>)); </div><div class="line"></div><div class="line">// 修改表结构(添加索引)</div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> tableName <span class="keyword">ADD</span> <span class="keyword">INDEX</span> indexName(columnName)</div><div class="line"></div><div class="line">// 创建表的时候直接指定</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable(  </div><div class="line"><span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,   </div><div class="line">username <span class="built_in">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,  </div><div class="line"><span class="keyword">INDEX</span> [indexName] (username(<span class="keyword">length</span>))  </div><div class="line">);</div><div class="line"></div><div class="line">// 删除索引的语法</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> [indexName] <span class="keyword">ON</span> mytable;</div></pre></td></tr></table></figure>
<h2 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h2><p>索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 创建索引</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> indexName <span class="keyword">ON</span> mytable(username(<span class="keyword">length</span>)) </div><div class="line"></div><div class="line">// 修改表结构</div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> mytable <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> [indexName] (username(<span class="keyword">length</span>))</div><div class="line"></div><div class="line">// 创建表的时候直接指定</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable(  </div><div class="line"><span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,   </div><div class="line">username <span class="built_in">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,  </div><div class="line"><span class="keyword">UNIQUE</span> [indexName] (username(<span class="keyword">length</span>))  </div><div class="line">);</div></pre></td></tr></table></figure>
<h2 id="使用ALTER-命令添加和删除索引"><a href="#使用ALTER-命令添加和删除索引" class="headerlink" title="使用ALTER 命令添加和删除索引"></a>使用ALTER 命令添加和删除索引</h2><ul>
<li>ALTER TABLE tbl_name ADD PRIMARY KEY (column_list): 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL</li>
<li>ALTER TABLE tbl_name ADD UNIQUE index_name (column_list): 这条语句创建索引的值必须是唯一的</li>
<li>ALTER TABLE tbl_name ADD INDEX index_name (column_list): 添加普通索引，索引值可出现多次</li>
<li>ALTER TABLE tbl_name ADD FULLTEXT index_name (column_list):该语句指定了索引为 FULLTEXT ，用于全文索引</li>
</ul>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在表中添加索引</span></div><div class="line">mysql&gt; ALTER <span class="keyword">TABLE</span> testalter_tbl <span class="comment">ADD INDEX (c)</span>;</div><div class="line"></div><div class="line"><span class="comment">// ALTER 命令中使用 DROP 子句来删除索引</span></div><div class="line">mysql&gt; ALTER <span class="keyword">TABLE</span> testalter_tbl <span class="comment">DROP INDEX c</span>;</div></pre></td></tr></table></figure>
<h2 id="使用-ALTER-命令添加和删除主键"><a href="#使用-ALTER-命令添加和删除主键" class="headerlink" title="使用 ALTER 命令添加和删除主键"></a>使用 ALTER 命令添加和删除主键</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 主键只能作用于一个列上，添加主键索引时，你需要确保该主键默认不为空（NOT NULL）</span></div><div class="line">mysql&gt; ALTER <span class="keyword">TABLE</span> testalter_tbl <span class="comment">MODIFY i INT NOT NULL</span>;</div><div class="line">mysql&gt; ALTER <span class="keyword">TABLE</span> testalter_tbl <span class="comment">ADD PRIMARY KEY (i)</span>;</div><div class="line"></div><div class="line"><span class="comment">// 使用 ALTER 命令删除主键</span></div><div class="line">mysql&gt; ALTER <span class="keyword">TABLE</span> testalter_tbl <span class="comment">DROP PRIMARY KEY</span>;</div></pre></td></tr></table></figure>
<h2 id="显示索引信息"><a href="#显示索引信息" class="headerlink" title="显示索引信息"></a>显示索引信息</h2><p>SHOW INDEX 命令来列出表中的相关的索引信息。可以通过添加 \G 来格式化输出信息</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SHOW INDEX FROM table_name; \G</div><div class="line">........</div></pre></td></tr></table></figure>
<h1 id="临时表"><a href="#临时表" class="headerlink" title="临时表"></a>临时表</h1><p>MySQL临时表只在当前连接可见，如果你使用PHP脚本来创建MySQL临时表，那每当PHP脚本执行完成后，该临时表也会自动销毁</p>
<p>使用MySQL 临时表的简单实例，以下的SQL代码可以适用于PHP脚本的mysql_query()函数</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">mysql&gt; CREATE TEMPORARY TABLE SalesSummary (</div><div class="line"><span class="code">    -&gt; product_name VARCHAR(50) NOT NULL</span></div><div class="line"><span class="code">    -&gt; , total_sales DECIMAL(12,2) NOT NULL DEFAULT 0.00</span></div><div class="line"><span class="code">    -&gt; , avg_unit_price DECIMAL(7,2) NOT NULL DEFAULT 0.00</span></div><div class="line"><span class="code">    -&gt; , total_units_sold INT UNSIGNED NOT NULL DEFAULT 0</span></div><div class="line">);</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; INSERT INTO SalesSummary</div><div class="line"><span class="code">    -&gt; (product_name, total_sales, avg_unit_price, total_units_sold)</span></div><div class="line"><span class="code">    -&gt; VALUES</span></div><div class="line"><span class="code">    -&gt; ('cucumber', 100.25, 90, 2);</span></div><div class="line"></div><div class="line"><span class="section">mysql&gt; SELECT * FROM SalesSummary;</span></div><div class="line">+--------------+-------------+----------------+------------------+</div><div class="line"><span class="section">| product_name | total_sales | avg_unit_price | total_units_sold |</span></div><div class="line">+--------------+-------------+----------------+------------------+</div><div class="line"><span class="section">| cucumber     |      100.25 |          90.00 |                2 |</span></div><div class="line">+--------------+-------------+----------------+------------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure>
<h2 id="删除MySQL-临时表"><a href="#删除MySQL-临时表" class="headerlink" title="删除MySQL 临时表"></a>删除MySQL 临时表</h2><p>可以在当前MySQL会话使用 DROP TABLE 命令来手动删除临时表</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">mysql&gt; CREATE TEMPORARY TABLE SalesSummary (</div><div class="line"><span class="code">    -&gt; product_name VARCHAR(50) NOT NULL</span></div><div class="line"><span class="code">    -&gt; , total_sales DECIMAL(12,2) NOT NULL DEFAULT 0.00</span></div><div class="line"><span class="code">    -&gt; , avg_unit_price DECIMAL(7,2) NOT NULL DEFAULT 0.00</span></div><div class="line"><span class="code">    -&gt; , total_units_sold INT UNSIGNED NOT NULL DEFAULT 0</span></div><div class="line">);</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; INSERT INTO SalesSummary</div><div class="line"><span class="code">    -&gt; (product_name, total_sales, avg_unit_price, total_units_sold)</span></div><div class="line"><span class="code">    -&gt; VALUES</span></div><div class="line"><span class="code">    -&gt; ('cucumber', 100.25, 90, 2);</span></div><div class="line"></div><div class="line"><span class="section">mysql&gt; SELECT * FROM SalesSummary;</span></div><div class="line">+--------------+-------------+----------------+------------------+</div><div class="line"><span class="section">| product_name | total_sales | avg_unit_price | total_units_sold |</span></div><div class="line">+--------------+-------------+----------------+------------------+</div><div class="line"><span class="section">| cucumber     |      100.25 |          90.00 |                2 |</span></div><div class="line">+--------------+-------------+----------------+------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">mysql&gt; DROP TABLE SalesSummary;</div><div class="line">mysql&gt;  SELECT * FROM SalesSummary;</div><div class="line">ERROR 1146: Table <span class="emphasis">'RUNOOB.SalesSummary'</span> doesn't exist</div></pre></td></tr></table></figure>
<h1 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h1><ul>
<li>使用 SHOW CREATE TABLE 命令获取创建数据表(CREATE TABLE) 语句，该语句包含了原数据表的结构，索引等</li>
<li>复制以下命令显示的SQL语句，修改数据表名，并执行SQL语句，通过以上命令 将完全的复制数据表结构</li>
<li>如果你想复制表的内容，你就可以使用 INSERT INTO … SELECT 语句来实现</li>
</ul>
<p>获取数据表的完整结构</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SHOW CREATE TABLE runoob_tbl \G;</div><div class="line">*************************** <span class="number">1.</span> row ***************************</div><div class="line">       Table: runoob_tbl</div><div class="line">Create Table: CREATE TABLE <span class="string">`runoob_tbl`</span> (</div><div class="line">  <span class="string">`runoob_id`</span> int(<span class="number">11</span>) <span class="literal">NOT</span> <span class="built_in">NULL</span> auto_increment,</div><div class="line">  <span class="string">`runoob_title`</span> varchar(<span class="number">100</span>) <span class="literal">NOT</span> <span class="built_in">NULL</span> default <span class="string">''</span>,</div><div class="line">  <span class="string">`runoob_author`</span> varchar(<span class="number">40</span>) <span class="literal">NOT</span> <span class="built_in">NULL</span> default <span class="string">''</span>,</div><div class="line">  <span class="string">`submission_date`</span> <span class="built_in">date</span> default <span class="built_in">NULL</span>,</div><div class="line">  PRIMARY KEY  (<span class="string">`runoob_id`</span>),</div><div class="line">  UNIQUE KEY <span class="string">`AUTHOR_INDEX`</span> (<span class="string">`runoob_author`</span>)</div><div class="line">) ENGINE=InnoDB </div><div class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">ERROR:</div><div class="line">No query specified</div></pre></td></tr></table></figure>
<p>修改SQL语句的数据表名，并执行SQL语句</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mysql&gt; CREATE TABLE `clone_tbl` (</div><div class="line">  -&gt; `runoob_id` int(<span class="number">11</span>) NOT NULL auto_increment,</div><div class="line">  -&gt; `runoob_title` varchar(<span class="number">100</span>) NOT NULL default <span class="string">''</span>,</div><div class="line">  -&gt; `runoob_author` varchar(<span class="number">40</span>) NOT NULL default <span class="string">''</span>,</div><div class="line">  -&gt; `submission_date` date default NULL,</div><div class="line">  -&gt; PRIMARY KEY  (`runoob_id`),</div><div class="line">  -&gt; UNIQUE KEY `AUTHOR_INDEX` (`runoob_author`)</div><div class="line">-&gt; ) ENGINE=InnoDB;</div><div class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">1.80</span> sec)</div></pre></td></tr></table></figure>
<p>执行完第二步骤后，你将在数据库中创建新的克隆表 clone_tbl。</p>
<p>拷贝数据表的数据你可以使用 INSERT INTO… SELECT 语句来实现</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mysql&gt; INSERT INTO clone_tbl (runoob_id,</div><div class="line">    -<span class="ruby">&gt;                        runoob_title,</span></div><div class="line">    -<span class="ruby">&gt;                        runoob_author,</span></div><div class="line">    -<span class="ruby">&gt;                        submission_date)</span></div><div class="line">    -<span class="ruby">&gt; SELECT runoob_id,runoob_title,</span></div><div class="line">    -<span class="ruby">&gt;        runoob_author,submission_date</span></div><div class="line">    -<span class="ruby">&gt; FROM runoob_tbl;</span></div><div class="line">Query OK, 3 rows affected (0.07 sec)</div><div class="line">Records: 3  Duplicates: 0  Warnings: 0</div></pre></td></tr></table></figure>
<h1 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h1><ul>
<li>查询结果信息： SELECT, UPDATE 或 DELETE语句影响的记录数</li>
<li>数据库和数据表的信息： 包含了数据库及数据表的结构信息</li>
<li>MySQL服务器信息： 包含了数据库服务器的当前状态，版本号等</li>
</ul>
<h2 id="获取查询语句影响的记录数"><a href="#获取查询语句影响的记录数" class="headerlink" title="获取查询语句影响的记录数"></a>获取查询语句影响的记录数</h2><p>在 DBI 脚本中， 语句影响的记录数通过函数 do( ) 或 execute( )返回</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 方法 1</span></div><div class="line"><span class="comment"># 使用do( ) 执行  $query </span></div><div class="line"><span class="keyword">my</span> $count = $dbh-&gt;<span class="keyword">do</span> ($query);</div><div class="line"><span class="comment"># 如果发生错误会输出 0</span></div><div class="line"><span class="keyword">printf</span> <span class="string">"%d 条数据被影响\n"</span>, (<span class="keyword">defined</span> ($count) ? $count : <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment"># 方法 2</span></div><div class="line"><span class="comment"># 使用prepare( ) 及 execute( ) 执行  $query </span></div><div class="line"><span class="keyword">my</span> $sth = $dbh-&gt;prepare ($query);</div><div class="line"><span class="keyword">my</span> $count = $sth-&gt;execute ( );</div><div class="line"><span class="keyword">printf</span> <span class="string">"%d 条数据被影响\n"</span>, (<span class="keyword">defined</span> ($count) ? $count : <span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>在PHP中，你可以使用 mysqli_affected_rows( ) 函数来获取查询语句影响的记录数</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$result_id</span> = mysqli_query (<span class="variable">$conn_id</span>, <span class="variable">$query</span>);</div><div class="line"><span class="comment"># 如果查询失败返回 </span></div><div class="line"><span class="variable">$count</span> = (<span class="variable">$result_id</span> ? mysqli_affected_rows (<span class="variable">$conn_id</span>) : 0);</div><div class="line"><span class="built_in">print</span> (<span class="string">"<span class="variable">$count</span> 条数据被影响\n"</span>);</div></pre></td></tr></table></figure>
<h2 id="数据库和数据表列表"><a href="#数据库和数据表列表" class="headerlink" title="数据库和数据表列表"></a>数据库和数据表列表</h2><p>在MySQL服务器中获取数据库和数据表列表。 如果你没有足够的权限，结果将返回 null</p>
<p>使用 SHOW TABLES 或 SHOW DATABASES 语句来获取数据库和数据表列表</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取当前数据库中所有可用的表。</span></div><div class="line"><span class="keyword">my</span> @tables = $dbh-&gt;tables ( );</div><div class="line"><span class="keyword">foreach</span> $table (@tables )&#123;</div><div class="line">   <span class="keyword">print</span> <span class="string">"表名 $table\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出 MySQL 服务器上的所有数据库</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$dbhost = <span class="string">'localhost:3306'</span>;  <span class="comment">// mysql服务器主机地址</span></div><div class="line">$dbuser = <span class="string">'root'</span>;            <span class="comment">// mysql用户名</span></div><div class="line">$dbpass = <span class="string">'123456'</span>;          <span class="comment">// mysql用户名密码</span></div><div class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</div><div class="line"><span class="keyword">if</span>(! $conn )</div><div class="line">&#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'连接失败: '</span> . mysqli_error($conn));</div><div class="line">&#125;</div><div class="line"><span class="comment">// 设置编码，防止中文乱码</span></div><div class="line">$db_list = mysqli_query($conn, <span class="string">'SHOW DATABASES'</span>);</div><div class="line"><span class="keyword">while</span> ($db = mysqli_fetch_object($db_list))</div><div class="line">&#123;</div><div class="line">  <span class="keyword">echo</span> $db-&gt;Database . <span class="string">"&lt;br /&gt;"</span>;</div><div class="line">&#125;</div><div class="line">mysqli_close($conn);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="获取服务器元数据"><a href="#获取服务器元数据" class="headerlink" title="获取服务器元数据"></a>获取服务器元数据</h2><p>在 MySQL 的命令提示符使用，也可以在脚本中 使用，如PHP脚本</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">VERSION</span>( )	服务器版本信息</div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">DATABASE</span>( )	当前数据库名 (或者返回空)</div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>( )	当前用户名</div><div class="line"><span class="keyword">SHOW</span> <span class="keyword">STATUS</span>	服务器状态</div><div class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span>	服务器配置变量</div></pre></td></tr></table></figure>
<h1 id="序列使用"><a href="#序列使用" class="headerlink" title="序列使用"></a>序列使用</h1><p>MySQL序列是一组整数：1, 2, 3, …，由于一张数据表只能有一个字段自增主键</p>
<h2 id="使用AUTO-INCREMENT"><a href="#使用AUTO-INCREMENT" class="headerlink" title="使用AUTO_INCREMENT"></a>使用AUTO_INCREMENT</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">mysql&gt; CREATE TABLE insect</div><div class="line"><span class="code">    -&gt; (</span></div><div class="line"><span class="code">    -&gt; id INT UNSIGNED NOT NULL AUTO_INCREMENT,</span></div><div class="line"><span class="code">    -&gt; PRIMARY KEY (id),</span></div><div class="line"><span class="code">    -&gt; name VARCHAR(30) NOT NULL, # type of insect</span></div><div class="line"><span class="code">    -&gt; date DATE NOT NULL, # date collected</span></div><div class="line"><span class="code">    -&gt; origin VARCHAR(30) NOT NULL # where collected</span></div><div class="line">);</div><div class="line">Query OK, 0 rows affected (0.02 sec)</div><div class="line">mysql&gt; INSERT INTO insect (id,name,date,origin) VALUES</div><div class="line"><span class="code">    -&gt; (NULL,'housefly','2001-09-10','kitchen'),</span></div><div class="line"><span class="code">    -&gt; (NULL,'millipede','2001-09-10','driveway'),</span></div><div class="line"><span class="code">    -&gt; (NULL,'grasshopper','2001-09-10','front yard');</span></div><div class="line">Query OK, 3 rows affected (0.02 sec)</div><div class="line">Records: 3  Duplicates: 0  Warnings: 0</div><div class="line"><span class="section">mysql&gt; SELECT * FROM insect ORDER BY id;</span></div><div class="line">+----+-------------+------------+------------+</div><div class="line"><span class="section">| id | name        | date       | origin     |</span></div><div class="line">+----+-------------+------------+------------+</div><div class="line">|  1 | housefly    | 2001-09-10 | kitchen    |</div><div class="line">|  2 | millipede   | 2001-09-10 | driveway   |</div><div class="line"><span class="section">|  3 | grasshopper | 2001-09-10 | front yard |</span></div><div class="line">+----+-------------+------------+------------+</div><div class="line">3 rows in set (0.00 sec)</div></pre></td></tr></table></figure>
<h2 id="获取AUTO-INCREMENT值"><a href="#获取AUTO-INCREMENT值" class="headerlink" title="获取AUTO_INCREMENT值"></a>获取AUTO_INCREMENT值</h2><p>使用 mysql_insertid 属性来获取 AUTO_INCREMENT 的值</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$dbh</span>-&gt;<span class="keyword">do</span> (<span class="string">"INSERT INTO insect (name,date,origin)</span></div><div class="line">VALUES('moth','2001-09-14','windowsill')");</div><div class="line">my <span class="variable">$seq</span> = <span class="variable">$dbh</span>-&gt;&#123;mysql_insertid&#125;;</div></pre></td></tr></table></figure>
<p>PHP 通过 mysql_insert_id ()函数来获取执行的插入SQL语句中 AUTO_INCREMENT列的值</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql_query ("<span class="keyword">INSERT</span> <span class="keyword">INTO</span> insect (<span class="keyword">name</span>,<span class="built_in">date</span>,origin)</div><div class="line"><span class="keyword">VALUES</span>(<span class="string">'moth'</span>,<span class="string">'2001-09-14'</span>,<span class="string">'windowsill'</span>)<span class="string">", $conn_id);</span></div><div class="line">$seq = mysql_insert_id ($conn_id);</div></pre></td></tr></table></figure>
<h2 id="重置序列"><a href="#重置序列" class="headerlink" title="重置序列"></a>重置序列</h2><p>删除了数据表中的多条记录，对剩下数据的AUTO_INCREMENT列进行重新排列，可以通过删除自增的列，重新添加来实现</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql&gt; ALTER <span class="keyword">TABLE</span> insect <span class="comment">DROP id</span>;</div><div class="line">mysql&gt; ALTER <span class="keyword">TABLE</span> insect</div><div class="line">    -&gt; ADD id INT UNSIGNED NOT NULL AUTO_INCREMENT FIRST,</div><div class="line">    -&gt; ADD PRIMARY KEY (id);</div></pre></td></tr></table></figure>
<h2 id="设置序列的开始值"><a href="#设置序列的开始值" class="headerlink" title="设置序列的开始值"></a>设置序列的开始值</h2><p>序列的开始值为1，需要指定一个开始值100，通过以下语句</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql&gt; <span class="keyword">CREATE</span> TABLE insect</div><div class="line">    -&gt; (</div><div class="line">    -&gt; id INT UNSIGNED <span class="keyword">NOT</span> <span class="built_in">NULL</span> AUTO_INCREMENT,</div><div class="line">    -&gt; PRIMARY <span class="built_in">KEY</span> (id),</div><div class="line">    -&gt; name VARCHAR(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="built_in">NULL</span>, </div><div class="line">    -&gt; <span class="built_in">date</span> <span class="built_in">DATE</span> <span class="keyword">NOT</span> <span class="built_in">NULL</span>,</div><div class="line">    -&gt; origin VARCHAR(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="built_in">NULL</span></div><div class="line">)engine=innodb auto_increment=<span class="number">100</span> charset=utf8;</div></pre></td></tr></table></figure>
<p>或者你也可以在表创建成功后，通过以下语句来实现</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; ALTER <span class="keyword">TABLE</span> t <span class="comment">AUTO_INCREMENT = 100</span>;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;h2 id=&quot;数据库简介&quot;&gt;&lt;a href=&quot;#数据库简介&quot; class=&quot;headerlink&quot; title=&quot;数据库简介&quot;&gt;&lt;/a&gt;数据库简介&lt;/h2&gt;&lt;p&gt;数据库是按照数据结构来组织、存储和管理数据的&lt;br&gt;
    
    </summary>
    
      <category term="BackEnd" scheme="http://yoursite.com/categories/BackEnd/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>PHP表单</title>
    <link href="http://yoursite.com/2018/07/23/2018.7.23/"/>
    <id>http://yoursite.com/2018/07/23/2018.7.23/</id>
    <published>2018-07-23T15:16:41.000Z</published>
    <updated>2018-07-22T13:55:21.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP-表单和用户输入"><a href="#PHP-表单和用户输入" class="headerlink" title="PHP 表单和用户输入"></a>PHP 表单和用户输入</h1><p>PHP 中的 $_GET 和 $_POST 变量用于检索表单中的信息，比如用户输入<br><a id="more"></a></p>
<h2 id="PHP-表单处理"><a href="#PHP-表单处理" class="headerlink" title="PHP 表单处理"></a>PHP 表单处理</h2><p>当处理 HTML 表单时，PHP 能把来自 HTML 页面中的表单元素自动变成可供 PHP 脚本使用</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// HTML 表单，带有两个输入框和一个提交按钮</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"welcome.php"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">名字: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"fname"</span>&gt;</span></div><div class="line">年龄: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当用户填写完上面的表单并点击提交按钮时，表单的数据会被送往名为 “welcome.php” 的 PHP 文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// welcome.php</div><div class="line">欢迎<span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $_POST[<span class="string">"fname"</span>]; <span class="meta">?&gt;</span></span>!<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">你的年龄是 <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $_POST[<span class="string">"age"</span>]; <span class="meta">?&gt;</span></span>  岁。</div></pre></td></tr></table></figure>
<h2 id="PHP-获取下拉菜单的数据"><a href="#PHP-获取下拉菜单的数据" class="headerlink" title="PHP 获取下拉菜单的数据"></a>PHP 获取下拉菜单的数据</h2><p>PHP 下拉菜单单选</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">// 表单使用 GET 方式获取数据</div><div class="line">// action 属性值为空表示提交到当前脚本</div><div class="line">// 通过 select 的 name 属性获取下拉菜单的值</div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$q = <span class="keyword">isset</span>($_GET[<span class="string">'q'</span>])? htmlspecialchars($_GET[<span class="string">'q'</span>]) : <span class="string">''</span>;</div><div class="line"><span class="keyword">if</span>($q) &#123;</div><div class="line">        <span class="keyword">if</span>($q ==<span class="string">'RUNOOB'</span>) &#123;</div><div class="line">                <span class="keyword">echo</span> <span class="string">'菜鸟教程&lt;br&gt;http://www.runoob.com'</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>($q ==<span class="string">'GOOGLE'</span>) &#123;</div><div class="line">                <span class="keyword">echo</span> <span class="string">'Google 搜索&lt;br&gt;http://www.google.com'</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>($q ==<span class="string">'TAOBAO'</span>) &#123;</div><div class="line">                <span class="keyword">echo</span> <span class="string">'淘宝&lt;br&gt;http://www.taobao.com'</span>;</div><div class="line">        &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"q"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>选择一个站点:<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"RUNOOB"</span>&gt;</span>Runoob<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"GOOGLE"</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"TAOBAO"</span>&gt;</span>Taobao<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>PHP 下拉菜单多选</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">// 设置 select name="q[]" 以数组的方式获取</div><div class="line">// 使用 POST 方式提交</div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$q = <span class="keyword">isset</span>($_POST[<span class="string">'q'</span>])? $_POST[<span class="string">'q'</span>] : <span class="string">''</span>;</div><div class="line"><span class="keyword">if</span>(is_array($q)) &#123;</div><div class="line">    $sites = <span class="keyword">array</span>(</div><div class="line">            <span class="string">'RUNOOB'</span> =&gt; <span class="string">'菜鸟教程: http://www.runoob.com'</span>,</div><div class="line">            <span class="string">'GOOGLE'</span> =&gt; <span class="string">'Google 搜索: http://www.google.com'</span>,</div><div class="line">            <span class="string">'TAOBAO'</span> =&gt; <span class="string">'淘宝: http://www.taobao.com'</span>,</div><div class="line">    );</div><div class="line">    <span class="keyword">foreach</span>($q <span class="keyword">as</span> $val) &#123;</div><div class="line">        <span class="comment">// PHP_EOL 为常量，用于换行</span></div><div class="line">        <span class="keyword">echo</span> $sites[$val] . PHP_EOL;</div><div class="line">    &#125;</div><div class="line">      </div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span> <span class="attr">name</span>=<span class="string">"q[]"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>选择一个站点:<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"RUNOOB"</span>&gt;</span>Runoob<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"GOOGLE"</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"TAOBAO"</span>&gt;</span>Taobao<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="单选按钮表单"><a href="#单选按钮表单" class="headerlink" title="单选按钮表单"></a>单选按钮表单</h2><p>PHP 单选按钮表单中 name 属性的值是一致的，value 值是不同的</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$q = <span class="keyword">isset</span>($_GET[<span class="string">'q'</span>])? htmlspecialchars($_GET[<span class="string">'q'</span>]) : <span class="string">''</span>;</div><div class="line"><span class="keyword">if</span>($q) &#123;</div><div class="line">        <span class="keyword">if</span>($q ==<span class="string">'RUNOOB'</span>) &#123;</div><div class="line">                <span class="keyword">echo</span> <span class="string">'菜鸟教程&lt;br&gt;http://www.runoob.com'</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>($q ==<span class="string">'GOOGLE'</span>) &#123;</div><div class="line">                <span class="keyword">echo</span> <span class="string">'Google 搜索&lt;br&gt;http://www.google.com'</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>($q ==<span class="string">'TAOBAO'</span>) &#123;</div><div class="line">                <span class="keyword">echo</span> <span class="string">'淘宝&lt;br&gt;http://www.taobao.com'</span>;</div><div class="line">        &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="meta">?&gt;</span><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"q"</span> <span class="attr">value</span>=<span class="string">"RUNOOB"</span> /&gt;</span>Runoob</div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"q"</span> <span class="attr">value</span>=<span class="string">"GOOGLE"</span> /&gt;</span>Google</div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"q"</span> <span class="attr">value</span>=<span class="string">"TAOBAO"</span> /&gt;</span>Taobao</div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="checkbox-复选框"><a href="#checkbox-复选框" class="headerlink" title="checkbox 复选框"></a>checkbox 复选框</h2><p>PHP checkbox 复选框可以选择多个值</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$q = <span class="keyword">isset</span>($_POST[<span class="string">'q'</span>])? $_POST[<span class="string">'q'</span>] : <span class="string">''</span>;</div><div class="line"><span class="keyword">if</span>(is_array($q)) &#123;</div><div class="line">    $sites = <span class="keyword">array</span>(</div><div class="line">            <span class="string">'RUNOOB'</span> =&gt; <span class="string">'菜鸟教程: http://www.runoob.com'</span>,</div><div class="line">            <span class="string">'GOOGLE'</span> =&gt; <span class="string">'Google 搜索: http://www.google.com'</span>,</div><div class="line">            <span class="string">'TAOBAO'</span> =&gt; <span class="string">'淘宝: http://www.taobao.com'</span>,</div><div class="line">    );</div><div class="line">    <span class="keyword">foreach</span>($q <span class="keyword">as</span> $val) &#123;</div><div class="line">        <span class="comment">// PHP_EOL 为常量，用于换行</span></div><div class="line">        <span class="keyword">echo</span> $sites[$val] . PHP_EOL;</div><div class="line">    &#125;</div><div class="line">      </div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="meta">?&gt;</span><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"q[]"</span> <span class="attr">value</span>=<span class="string">"RUNOOB"</span>&gt;</span> Runoob<span class="tag">&lt;<span class="name">br</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"q[]"</span> <span class="attr">value</span>=<span class="string">"GOOGLE"</span>&gt;</span> Google<span class="tag">&lt;<span class="name">br</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"q[]"</span> <span class="attr">value</span>=<span class="string">"TAOBAO"</span>&gt;</span> Taobao<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-表单验证"><a href="#PHP-表单验证" class="headerlink" title="PHP 表单验证"></a>PHP 表单验证</h1><p>在处理PHP表单时我们需要考虑安全性</p>
<h2 id="PHP-表单验证实例"><a href="#PHP-表单验证实例" class="headerlink" title="PHP 表单验证实例"></a>PHP 表单验证实例</h2><ul>
<li>名字: 必须。 +只能包含字母和空格</li>
<li>E-mail: 必须。 + 必须是一个有效的电子邮件地址（包含’@’和’.’）</li>
<li>性别: 必须。 必须选择一个</li>
<li>网址: 可选。如果存在，它必须包含一个有效的URL</li>
<li>备注: 可选。多行输入字段（文本域）</li>
</ul>
<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE HTML&gt;</span> </span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.error</span> &#123;<span class="attribute">color</span>: <span class="number">#FF0000</span>;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="comment">// 定义变量并默认设置为空值</span></div><div class="line">$nameErr = $emailErr = $genderErr = $websiteErr = <span class="string">""</span>;</div><div class="line">$name = $email = $gender = $comment = $website = <span class="string">""</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">"REQUEST_METHOD"</span>] == <span class="string">"POST"</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">"name"</span>]))</div><div class="line">    &#123;</div><div class="line">        $nameErr = <span class="string">"名字是必需的"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        $name = test_input($_POST[<span class="string">"name"</span>]);</div><div class="line">        <span class="comment">// 检测名字是否只包含字母跟空格</span></div><div class="line">        <span class="keyword">if</span> (!preg_match(<span class="string">"/^[a-zA-Z ]*$/"</span>,$name))</div><div class="line">        &#123;</div><div class="line">            $nameErr = <span class="string">"只允许字母和空格"</span>; </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">"email"</span>]))</div><div class="line">    &#123;</div><div class="line">      $emailErr = <span class="string">"邮箱是必需的"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        $email = test_input($_POST[<span class="string">"email"</span>]);</div><div class="line">        <span class="comment">// 检测邮箱是否合法</span></div><div class="line">        <span class="keyword">if</span> (!preg_match(<span class="string">"/([\w\-]+\@[\w\-]+\.[\w\-]+)/"</span>,$email))</div><div class="line">        &#123;</div><div class="line">            $emailErr = <span class="string">"非法邮箱格式"</span>; </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">"website"</span>]))</div><div class="line">    &#123;</div><div class="line">        $website = <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        $website = test_input($_POST[<span class="string">"website"</span>]);</div><div class="line">        <span class="comment">// 检测 URL 地址是否合法</span></div><div class="line">        <span class="keyword">if</span> (!preg_match(<span class="string">"/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&amp;@#\/%?=~_|!:,.;]*[-a-z0-9+&amp;@#\/%=~_|]/i"</span>,$website))</div><div class="line">        &#123;</div><div class="line">            $websiteErr = <span class="string">"非法的 URL 的地址"</span>; </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">"comment"</span>]))</div><div class="line">    &#123;</div><div class="line">        $comment = <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        $comment = test_input($_POST[<span class="string">"comment"</span>]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">"gender"</span>]))</div><div class="line">    &#123;</div><div class="line">        $genderErr = <span class="string">"性别是必需的"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        $gender = test_input($_POST[<span class="string">"gender"</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test_input</span><span class="params">($data)</span></span></div><div class="line">&#123;</div><div class="line">    $data = trim($data);</div><div class="line">    $data = stripslashes($data);</div><div class="line">    $data = htmlspecialchars($data);</div><div class="line">    <span class="keyword">return</span> $data;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>PHP 表单验证实例<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span>* 必需字段。<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"&lt;?php echo htmlspecialchars($_SERVER["</span><span class="attr">PHP_SELF</span>"]);?&gt;</span>"&gt; </div><div class="line">   名字: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"&lt;?php echo $name;?&gt;"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span>* <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $nameErr;<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   E-mail: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">value</span>=<span class="string">"&lt;?php echo $email;?&gt;"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span>* <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $emailErr;<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   网址: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"website"</span> <span class="attr">value</span>=<span class="string">"&lt;?php echo $website;?&gt;"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span><span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $websiteErr;<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   备注: <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"comment"</span> <span class="attr">rows</span>=<span class="string">"5"</span> <span class="attr">cols</span>=<span class="string">"40"</span>&gt;</span><span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $comment;<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   性别:</div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> &lt;?<span class="attr">php</span> <span class="attr">if</span> (<span class="attr">isset</span>($<span class="attr">gender</span>) &amp;&amp; $<span class="attr">gender</span>==<span class="string">"female"</span>) <span class="attr">echo</span> "<span class="attr">checked</span>";?&gt;</span>  value="female"&gt;女</div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> &lt;?<span class="attr">php</span> <span class="attr">if</span> (<span class="attr">isset</span>($<span class="attr">gender</span>) &amp;&amp; $<span class="attr">gender</span>==<span class="string">"male"</span>) <span class="attr">echo</span> "<span class="attr">checked</span>";?&gt;</span>  value="male"&gt;男</div><div class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span>* <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $genderErr;<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2&gt;您输入的内容是:&lt;/h2&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $name;</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $email;</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $website;</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $comment;</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $gender;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h2><p>$_SERVER[“PHP_SELF”] 会发送表单数据到当前页面，而不是跳转到不同的页面</p>
<p>htmlspecialchars():把一些预定义的字符转换为 HTML 实体</p>
<figure class="highlight monkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 使用 <span class="function"><span class="keyword">method</span>=</span><span class="string">"post"</span> 方法来提交数据</div><div class="line">&lt;form <span class="function"><span class="keyword">method</span>=</span><span class="string">"post"</span> action=<span class="string">"&lt;?php echo htmlspecialchars($_SERVER["</span>PHP_SELF<span class="string">"]);?&gt;"</span>&gt;</div></pre></td></tr></table></figure>
<h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>XSS又叫 CSS (Cross-Site Script) ,跨站脚本攻击</p>
<p>$_SERVER[“PHP_SELF”]的字符串就会包含HTTP链接后面的JavaScript程序代码,</p>
<p>利用这点重定向页面到另外一台服务器的页面上，页面 代码文件中可以保护恶意代码，代码可以修改全局变量或者获取用户的表单数据</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// test_form.php</span></div><div class="line">&lt;<span class="selector-tag">form</span> method=<span class="string">"post"</span> action=<span class="string">"&lt;?php echo $_SERVER["</span>PHP_SELF<span class="string">"];?&gt;"</span>&gt;</div><div class="line"></div><div class="line"><span class="comment">// 使用URL来指定提交地址 "test_form.php",以上代码修改为</span></div><div class="line">&lt;<span class="selector-tag">form</span> method=<span class="string">"post"</span> action=<span class="string">"test_form.php"</span>&gt;</div><div class="line"></div><div class="line"><span class="comment">// 考虑到用户会在浏览器地址栏中输入以下地址</span></div><div class="line">http:<span class="comment">//www.runoob.com/test_form.php/%22%3E%3Cscript%3Ealert('hacked')%3C/script%3E</span></div><div class="line"></div><div class="line"><span class="comment">// 代码被解析为</span></div><div class="line">&lt;<span class="selector-tag">form</span> method=<span class="string">"post"</span> action=<span class="string">"test_form.php/"</span>&gt;&lt;script&gt;alert(<span class="string">'hacked'</span>)&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="防止XXS"><a href="#防止XXS" class="headerlink" title="防止XXS"></a>防止XXS</h2><p>$_SERVER[“PHP_SELF”] 可以通过 htmlspecialchars() 函数来避免被利用</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// htmlspecialchars() 把一些预定义的字符转换为 HTML 实体</span></div><div class="line">&lt;<span class="selector-tag">form</span> method=<span class="string">"post"</span> action=<span class="string">"&lt;?php echo htmlspecialchars($_SERVER["</span>PHP_SELF<span class="string">"]);?&gt;"</span>&gt;</div><div class="line"></div><div class="line"><span class="comment">// 结果输出</span></div><div class="line">&lt;<span class="selector-tag">form</span> method=<span class="string">"post"</span> action=<span class="string">"test_form.php/&amp;quot;&amp;gt;&amp;lt;script&amp;gt;alert('hacked')&amp;lt;/script&amp;gt;"</span>&gt;</div></pre></td></tr></table></figure>
<h2 id="验证表单数据"><a href="#验证表单数据" class="headerlink" title="验证表单数据"></a>验证表单数据</h2><p>test_input封装过滤的数据</p>
<ul>
<li>用户所有提交的数据都通过 PHP 的 htmlspecialchars() 函数处理</li>
<li>使用 PHP trim() 函数去除用户输入数据中不必要的字符 (如：空格，tab，换行)</li>
<li>使用PHP stripslashes()函数去除用户输入数据中的反斜杠 ()</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">// REQUEST_METHOD 是 POST, 表单将被提交 - 数据将被验证</div><div class="line">// 如果表单未提交将跳过验证并显示空白</div><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="comment">// 定义变量并默认设置为空值</span></div><div class="line">$name = $email = $gender = $comment = $website = <span class="string">""</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">"REQUEST_METHOD"</span>] == <span class="string">"POST"</span>)</div><div class="line">&#123;</div><div class="line">   $name = test_input($_POST[<span class="string">"name"</span>]);</div><div class="line">   $email = test_input($_POST[<span class="string">"email"</span>]);</div><div class="line">   $website = test_input($_POST[<span class="string">"website"</span>]);</div><div class="line">   $comment = test_input($_POST[<span class="string">"comment"</span>]);</div><div class="line">   $gender = test_input($_POST[<span class="string">"gender"</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test_input</span><span class="params">($data)</span></span></div><div class="line">&#123;</div><div class="line">   $data = trim($data);</div><div class="line">   $data = stripslashes($data);</div><div class="line">   $data = htmlspecialchars($data);</div><div class="line">   <span class="keyword">return</span> $data;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>PHP 表单验证实例<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"&lt;?php echo htmlspecialchars($_SERVER["</span><span class="attr">PHP_SELF</span>"]);?&gt;</span>"&gt; </div><div class="line">   名字: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   E-mail: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   网址: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"website"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   备注: <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"comment"</span> <span class="attr">rows</span>=<span class="string">"5"</span> <span class="attr">cols</span>=<span class="string">"40"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   性别:</div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"female"</span>&gt;</span>女</div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"male"</span>&gt;</span>男</div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2&gt;您输入的内容是:&lt;/h2&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $name;</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $email;</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $website;</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $comment;</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $gender;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-表单-必需字段"><a href="#PHP-表单-必需字段" class="headerlink" title="PHP 表单 - 必需字段"></a>PHP 表单 - 必需字段</h1><p>设置表单必需字段及错误信息</p>
<h2 id="PHP-必需字段"><a href="#PHP-必需字段" class="headerlink" title="PHP - 必需字段"></a>PHP - 必需字段</h2><p>加入了一些新的变量: $nameErr, $emailErr, $genderErr, 和 $websiteErr,这些错误变量将显示在必需字段上</p>
<p>为每个$_POST变量增加了一个if else语句,这些语句将检查 $_POST 变量是 否为空（使用php的 empty() 函数）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">// 如果为空，将显示对应的错误信息。 如果不为空，数据将传递给test_input() 函数</div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="comment">// 定义变量并默认设为空值</span></div><div class="line">$nameErr = $emailErr = $genderErr = $websiteErr = <span class="string">""</span>;</div><div class="line">$name = $email = $gender = $comment = $website = <span class="string">""</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">"REQUEST_METHOD"</span>] == <span class="string">"POST"</span>) &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">"name"</span>])) &#123;</div><div class="line">    $nameErr = <span class="string">"名字是必需的。"</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    $name = test_input($_POST[<span class="string">"name"</span>]);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">"email"</span>])) &#123;</div><div class="line">    $emailErr = <span class="string">"邮箱是必需的。"</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    $email = test_input($_POST[<span class="string">"email"</span>]);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">"website"</span>])) &#123;</div><div class="line">    $website = <span class="string">""</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    $website = test_input($_POST[<span class="string">"website"</span>]);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">"comment"</span>])) &#123;</div><div class="line">    $comment = <span class="string">""</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    $comment = test_input($_POST[<span class="string">"comment"</span>]);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">"gender"</span>])) &#123;</div><div class="line">    $genderErr = <span class="string">"性别是必需的。"</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    $gender = test_input($_POST[<span class="string">"gender"</span>]);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP-显示错误信息"><a href="#PHP-显示错误信息" class="headerlink" title="PHP - 显示错误信息"></a>PHP - 显示错误信息</h2><p>为每个字段中添加了一些脚本， 各个脚本会在信息输入错误时显示错误信息</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// 如果用户未填写信息就提交表单则会输出错误信息</div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"&lt;?php echo htmlspecialchars($_SERVER['PHP_SELF']);?&gt;"</span>&gt;</span> </div><div class="line">   名字: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span>* <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $nameErr;<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   E-mail: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span>* <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $emailErr;<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   网址: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"website"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span><span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $websiteErr;<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   备注: <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"comment"</span> <span class="attr">rows</span>=<span class="string">"5"</span> <span class="attr">cols</span>=<span class="string">"40"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   性别:</div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"female"</span>&gt;</span>女</div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"male"</span>&gt;</span>男</div><div class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span>* <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $genderErr;<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-表单-验证邮件和URL"><a href="#PHP-表单-验证邮件和URL" class="headerlink" title="PHP 表单 - 验证邮件和URL"></a>PHP 表单 - 验证邮件和URL</h1><p>验证 names(名称), e-mails（邮件）, 和 URLs</p>
<h2 id="PHP-验证名称"><a href="#PHP-验证名称" class="headerlink" title="PHP - 验证名称"></a>PHP - 验证名称</h2><p>通过简单的方式来检测 name 字段是否包含字母和空格，如果 name 字段值不合法，将输出错误信息</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$name = test_input($_POST[<span class="string">"name"</span>])<span class="comment">;</span></div><div class="line"><span class="keyword">if</span> (!preg_match(<span class="string">"/^[a-zA-Z ]*$/"</span>,$name)) &#123;</div><div class="line">  $nameErr = <span class="string">"只允许字母和空格"</span><span class="comment">; </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="PHP-验证邮件"><a href="#PHP-验证邮件" class="headerlink" title="PHP - 验证邮件"></a>PHP - 验证邮件</h2><p>通过简单的方式来检测 e-mail 地址是否合法。如果 e-mail 地址不合法，将输出错误信息</p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">$email = test_input</span>($_POST["email"]);</div><div class="line">if (!preg_match("/([<span class="symbol">\w</span><span class="symbol">\-</span>]+<span class="symbol">\@</span>[<span class="symbol">\w</span><span class="symbol">\-</span>]+<span class="symbol">\.</span>[<span class="symbol">\w</span><span class="symbol">\-</span>]+)/",<span class="keyword">$email)) &#123;</span></div><div class="line">  $emailErr = "非法邮箱格式"; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="PHP-验证-URL"><a href="#PHP-验证-URL" class="headerlink" title="PHP - 验证 URL"></a>PHP - 验证 URL</h2><p>检测URL地址是否合法 (以下正则表达式运行URL中含有破折号:”-“)， 如果 URL 地址不合法，将输出错误信息</p>
<figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">$w</span>ebsite = test_input(<span class="string">$_</span>POST[<span class="comment">"website"</span>]);</div><div class="line">if (!preg_match(<span class="comment">"/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&amp;@#\/%?=~_|!:,.;]*[-a-z0-9+&amp;@#\/%=~_|]/i"</span>,<span class="string">$w</span>ebsite)) &#123;</div><div class="line">  <span class="string">$w</span>ebsiteErr = <span class="comment">"非法的 URL 的地址"</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="PHP-验证-Name-E-mail-和-URL"><a href="#PHP-验证-Name-E-mail-和-URL" class="headerlink" title="PHP - 验证 Name, E-mail, 和 URL"></a>PHP - 验证 Name, E-mail, 和 URL</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.error</span> &#123;<span class="attribute">color</span>: <span class="number">#FF0000</span>;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="comment">// 定义变量并默认设置为空值</span></div><div class="line">$nameErr = $emailErr = $genderErr = $websiteErr = <span class="string">""</span>;</div><div class="line">$name = $email = $gender = $comment = $website = <span class="string">""</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">"REQUEST_METHOD"</span>] == <span class="string">"POST"</span>) &#123;</div><div class="line">   <span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">"name"</span>])) &#123;</div><div class="line">      $nameErr = <span class="string">"Name is required"</span>;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">         $name = test_input($_POST[<span class="string">"name"</span>]);</div><div class="line">         <span class="comment">// 检测名字是否只包含字母跟空格</span></div><div class="line">         <span class="keyword">if</span> (!preg_match(<span class="string">"/^[a-zA-Z ]*$/"</span>,$name)) &#123;</div><div class="line">         $nameErr = <span class="string">"只允许字母和空格"</span>; </div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line">   </div><div class="line">   <span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">"email"</span>])) &#123;</div><div class="line">      $emailErr = <span class="string">"Email is required"</span>;</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">      $email = test_input($_POST[<span class="string">"email"</span>]);</div><div class="line">      <span class="comment">// 检测邮箱是否合法</span></div><div class="line">      <span class="keyword">if</span> (!preg_match(<span class="string">"/([\w\-]+\@[\w\-]+\.[\w\-]+)/"</span>,$email)) &#123;</div><div class="line">         $emailErr = <span class="string">"非法邮箱格式"</span>; </div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">     </div><div class="line">   <span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">"website"</span>])) &#123;</div><div class="line">      $website = <span class="string">""</span>;</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">      $website = test_input($_POST[<span class="string">"website"</span>]);</div><div class="line">      <span class="comment">// 检测 URL 地址是否合法</span></div><div class="line">     <span class="keyword">if</span> (!preg_match(<span class="string">"/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&amp;@#\/%?=~_|!:,.;]*[-a-z0-9+&amp;@#\/%=~_|]/i"</span>,$website)) &#123;</div><div class="line">         $websiteErr = <span class="string">"非法的 URL 的地址"</span>; </div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">"comment"</span>])) &#123;</div><div class="line">      $comment = <span class="string">""</span>;</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">      $comment = test_input($_POST[<span class="string">"comment"</span>]);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">"gender"</span>])) &#123;</div><div class="line">      $genderErr = <span class="string">"性别是必需的"</span>;</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">      $gender = test_input($_POST[<span class="string">"gender"</span>]);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test_input</span><span class="params">($data)</span> </span>&#123;</div><div class="line">   $data = trim($data);</div><div class="line">   $data = stripslashes($data);</div><div class="line">   $data = htmlspecialchars($data);</div><div class="line">   <span class="keyword">return</span> $data;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>PHP 表单验证实例<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span>* 必需字段。<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"&lt;?php echo htmlspecialchars($_SERVER["</span><span class="attr">PHP_SELF</span>"]);?&gt;</span>"&gt; </div><div class="line">   名字: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span>* <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $nameErr;<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   E-mail: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span>* <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $emailErr;<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   网址: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"website"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span><span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $websiteErr;<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   备注: <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"comment"</span> <span class="attr">rows</span>=<span class="string">"5"</span> <span class="attr">cols</span>=<span class="string">"40"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   性别:</div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"female"</span>&gt;</span>女</div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"male"</span>&gt;</span>男</div><div class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span>* <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $genderErr;<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2&gt;您输入的内容是:&lt;/h2&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $name;</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $email;</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $website;</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $comment;</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $gender;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-完整表单实例"><a href="#PHP-完整表单实例" class="headerlink" title="PHP 完整表单实例"></a>PHP 完整表单实例</h1><p>用户在点击”提交（submit）”按钮提交数据前保证所有字段正确输入</p>
<h2 id="PHP-在表单中确保输入值"><a href="#PHP-在表单中确保输入值" class="headerlink" title="PHP - 在表单中确保输入值"></a>PHP - 在表单中确保输入值</h2><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="xml">// 在HTML的input元素中插添加PHP脚本， 各字段名为: name, email, 和 website</span></div><div class="line">// 在备注中的 textarea 字段中，我们将脚本放于 <span class="tag">&lt;<span class="name">textarea</span>&gt;</span> 和 <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> 标签之间</div><div class="line">// PHP脚本输出值为： $name, $email, $website, 和 $comment 变量。 </div><div class="line">// 然后，我们同样需要检查被选中的单选按钮， 对于这一点，我们 必须设置好checked属性</div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"&lt;?php echo htmlspecialchars($_SERVER["</span><span class="attr">PHP_SELF</span>"]);?&gt;</span>"&gt; </div><div class="line">   名字: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"&lt;?php echo $name;?&gt;"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span>* <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $nameErr;<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   E-mail: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">value</span>=<span class="string">"&lt;?php echo $email;?&gt;"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span>* <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $emailErr;<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   网址: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"website"</span> <span class="attr">value</span>=<span class="string">"&lt;?php echo $website;?&gt;"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span><span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $websiteErr;<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   备注: <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"comment"</span> <span class="attr">rows</span>=<span class="string">"5"</span> <span class="attr">cols</span>=<span class="string">"40"</span>&gt;</span><span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $comment;<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   性别:</div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> &lt;?<span class="attr">php</span> <span class="attr">if</span> (<span class="attr">isset</span>($<span class="attr">gender</span>) &amp;&amp; $<span class="attr">gender</span>==<span class="string">"female"</span>) <span class="attr">echo</span> "<span class="attr">checked</span>";?&gt;</span>  value="female"&gt;女</div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> &lt;?<span class="attr">php</span> <span class="attr">if</span> (<span class="attr">isset</span>($<span class="attr">gender</span>) &amp;&amp; $<span class="attr">gender</span>==<span class="string">"male"</span>) <span class="attr">echo</span> "<span class="attr">checked</span>";?&gt;</span>  value="male"&gt;男</div><div class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span>* <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $genderErr;<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP-完整表单实例-1"><a href="#PHP-完整表单实例-1" class="headerlink" title="PHP - 完整表单实例"></a>PHP - 完整表单实例</h2><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE HTML&gt;</span> </span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.error</span> &#123;<span class="attribute">color</span>: <span class="number">#FF0000</span>;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="comment">// 定义变量并默认设置为空值</span></div><div class="line">$nameErr = $emailErr = $genderErr = $websiteErr = <span class="string">""</span>;</div><div class="line">$name = $email = $gender = $comment = $website = <span class="string">""</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">"REQUEST_METHOD"</span>] == <span class="string">"POST"</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">"name"</span>]))</div><div class="line">    &#123;</div><div class="line">        $nameErr = <span class="string">"名字是必需的"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        $name = test_input($_POST[<span class="string">"name"</span>]);</div><div class="line">        <span class="comment">// 检测名字是否只包含字母跟空格</span></div><div class="line">        <span class="keyword">if</span> (!preg_match(<span class="string">"/^[a-zA-Z ]*$/"</span>,$name))</div><div class="line">        &#123;</div><div class="line">            $nameErr = <span class="string">"只允许字母和空格"</span>; </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">"email"</span>]))</div><div class="line">    &#123;</div><div class="line">      $emailErr = <span class="string">"邮箱是必需的"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        $email = test_input($_POST[<span class="string">"email"</span>]);</div><div class="line">        <span class="comment">// 检测邮箱是否合法</span></div><div class="line">        <span class="keyword">if</span> (!preg_match(<span class="string">"/([\w\-]+\@[\w\-]+\.[\w\-]+)/"</span>,$email))</div><div class="line">        &#123;</div><div class="line">            $emailErr = <span class="string">"非法邮箱格式"</span>; </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">"website"</span>]))</div><div class="line">    &#123;</div><div class="line">        $website = <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        $website = test_input($_POST[<span class="string">"website"</span>]);</div><div class="line">        <span class="comment">// 检测 URL 地址是否合法</span></div><div class="line">        <span class="keyword">if</span> (!preg_match(<span class="string">"/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&amp;@#\/%?=~_|!:,.;]*[-a-z0-9+&amp;@#\/%=~_|]/i"</span>,$website))</div><div class="line">        &#123;</div><div class="line">            $websiteErr = <span class="string">"非法的 URL 的地址"</span>; </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">"comment"</span>]))</div><div class="line">    &#123;</div><div class="line">        $comment = <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        $comment = test_input($_POST[<span class="string">"comment"</span>]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">"gender"</span>]))</div><div class="line">    &#123;</div><div class="line">        $genderErr = <span class="string">"性别是必需的"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        $gender = test_input($_POST[<span class="string">"gender"</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test_input</span><span class="params">($data)</span></span></div><div class="line">&#123;</div><div class="line">    $data = trim($data);</div><div class="line">    $data = stripslashes($data);</div><div class="line">    $data = htmlspecialchars($data);</div><div class="line">    <span class="keyword">return</span> $data;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>PHP 表单验证实例<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span>* 必需字段。<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"&lt;?php echo htmlspecialchars($_SERVER["</span><span class="attr">PHP_SELF</span>"]);?&gt;</span>"&gt; </div><div class="line">   名字: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"&lt;?php echo $name;?&gt;"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span>* <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $nameErr;<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   E-mail: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">value</span>=<span class="string">"&lt;?php echo $email;?&gt;"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span>* <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $emailErr;<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   网址: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"website"</span> <span class="attr">value</span>=<span class="string">"&lt;?php echo $website;?&gt;"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span><span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $websiteErr;<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   备注: <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"comment"</span> <span class="attr">rows</span>=<span class="string">"5"</span> <span class="attr">cols</span>=<span class="string">"40"</span>&gt;</span><span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $comment;<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   性别:</div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> &lt;?<span class="attr">php</span> <span class="attr">if</span> (<span class="attr">isset</span>($<span class="attr">gender</span>) &amp;&amp; $<span class="attr">gender</span>==<span class="string">"female"</span>) <span class="attr">echo</span> "<span class="attr">checked</span>";?&gt;</span>  value="female"&gt;女</div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> &lt;?<span class="attr">php</span> <span class="attr">if</span> (<span class="attr">isset</span>($<span class="attr">gender</span>) &amp;&amp; $<span class="attr">gender</span>==<span class="string">"male"</span>) <span class="attr">echo</span> "<span class="attr">checked</span>";?&gt;</span>  value="male"&gt;男</div><div class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span>* <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $genderErr;<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2&gt;您输入的内容是:&lt;/h2&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $name;</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $email;</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $website;</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $comment;</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $gender;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-GET-变量"><a href="#PHP-GET-变量" class="headerlink" title="PHP $_GET 变量"></a>PHP $_GET 变量</h1><p>在 PHP 中，预定义的 $_GET 变量用于收集来自 method=”get” 的表单中的值</p>
<h2 id="GET-变量"><a href="#GET-变量" class="headerlink" title="$_GET 变量"></a>$_GET 变量</h2><p>预定义的 $_GET 变量用于收集来自 method=”get” 的表单中的值</p>
<p>从带有 GET 方法的表单发送的信息，对任何人都是可见的，并且对发送信息的量也有限制</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// form.html 文件</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"welcome.php"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></div><div class="line">名字: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"fname"</span>&gt;</span></div><div class="line">年龄: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当用户点击 “Submit” 按钮时，发送到服务器的 URL</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">http:</span><span class="comment">//www.runoob.com/welcome.php?fname=Runoob&amp;amp;age=3</span></div></pre></td></tr></table></figure>
<p>“welcome.php” 文件现在可以通过 $_GET 变量来收集表单数据</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">欢迎 <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $_GET[<span class="string">"fname"</span>]; <span class="meta">?&gt;</span></span>!<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">你的年龄是 <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $_GET[<span class="string">"age"</span>]; <span class="meta">?&gt;</span></span>  岁</div></pre></td></tr></table></figure>
<h1 id="PHP-POST-变量"><a href="#PHP-POST-变量" class="headerlink" title="PHP $_POST 变量"></a>PHP $_POST 变量</h1><p>在 PHP 中，预定义的 $_POST 变量用于收集来自 method=”post” 的表单中的值</p>
<p>从带有 POST 方法的表单发送的信息，对任何人都是不可见的，并且对发送信息的量也没有限制</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// form.html</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"welcome.php"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">名字: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"fname"</span>&gt;</span></div><div class="line">年龄: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当用户点击 “提交” 按钮时，URL 类似</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">http:</span><span class="comment">//www.runoob.com/welcome.php</span></div></pre></td></tr></table></figure>
<p>“welcome.php” 文件现在可以通过 $_POST 变量来收集表单数据</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">欢迎 <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $_POST[<span class="string">"fname"</span>]; <span class="meta">?&gt;</span></span>!<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">你的年龄是 <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $_POST[<span class="string">"age"</span>]; <span class="meta">?&gt;</span></span>  岁。</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PHP-表单和用户输入&quot;&gt;&lt;a href=&quot;#PHP-表单和用户输入&quot; class=&quot;headerlink&quot; title=&quot;PHP 表单和用户输入&quot;&gt;&lt;/a&gt;PHP 表单和用户输入&lt;/h1&gt;&lt;p&gt;PHP 中的 $_GET 和 $_POST 变量用于检索表单中的信息，比如用户输入&lt;br&gt;
    
    </summary>
    
      <category term="BackEnd" scheme="http://yoursite.com/categories/BackEnd/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>英语(一）</title>
    <link href="http://yoursite.com/2018/07/20/2018.7.20/"/>
    <id>http://yoursite.com/2018/07/20/2018.7.20/</id>
    <published>2018-07-20T15:16:41.000Z</published>
    <updated>2018-07-19T16:22:43.224Z</updated>
    
    <content type="html"><![CDATA[<p>从新概念一开始背 总结</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从新概念一开始背 总结&lt;/p&gt;

    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="英语" scheme="http://yoursite.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>PHP面向对象</title>
    <link href="http://yoursite.com/2018/07/18/2018.7.18/"/>
    <id>http://yoursite.com/2018/07/18/2018.7.18/</id>
    <published>2018-07-18T15:16:41.000Z</published>
    <updated>2018-07-17T15:24:24.605Z</updated>
    
    <content type="html"><![CDATA[<p>在面向对象的程序设计中，对象是一个由信息及对信息进行处理的描述所组成的整体，是对现实世界的抽象</p>
<p>对象的主要三个特性<br><a id="more"></a></p>
<ul>
<li>对象的行为：可以对 对象施加那些操作，开灯，关灯就是行为。</li>
<li>对象的形态：当施加那些方法是对象如何响应，颜色，尺寸，外型。</li>
<li>对象的表示：对象的表示就相当于身份证，具体区分在相同的行为与状态下有什么不同</li>
</ul>
<h1 id="面向对象名词"><a href="#面向对象名词" class="headerlink" title="面向对象名词"></a>面向对象名词</h1><ul>
<li>类 − 定义了一件事物的抽象特点</li>
<li>对象 − 是类的实例</li>
<li>成员变量 − 定义在类内部的变量</li>
<li>成员函数 − 定义在类的内部,可用于访问对象的数据</li>
<li>继承 − 继承性是子类自动共享父类数据结构和方法的机制,这是类之间的一种关系</li>
<li>父类 − 一个类被其他类继承，可将该类称为父类，或基类，或超类</li>
<li>子类 − 一个类继承其他类称为子类，也可称为派生类</li>
<li>多态 − 多态性是指相同的函数或方法可作用于多种类型的对象上并获得不同的结果</li>
<li>重载 − 简单说，就是函数或者方法有同样的名称，但是参数列表不相同的情形</li>
<li>抽象性 − 抽象性是指将具有一致的数据结构（属性）和行为（操作）的对象抽象成类</li>
<li>封装 − 封装是指将现实世界中存在的某个客体的属性与行为绑定在一起，并放置在一个逻辑单元内</li>
<li>构造函数 − 主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中</li>
<li>析构函数 − 析构函数与构造函数相反,当对象结束其生命周期时（例如对象所在的函数已调用完毕）,系统自动执行析构函数</li>
</ul>
<p>通过 Car 类 创建了三个对象：Mercedes, Bmw, 和 Audi</p>
<figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">$mercedes</span> = <span class="keyword">new</span> Car ()<span class="comment">;</span></div><div class="line"><span class="built_in">$bmw</span> = <span class="keyword">new</span> Car ()<span class="comment">;</span></div><div class="line"><span class="built_in">$audi</span> = <span class="keyword">new</span> Car ()<span class="comment">;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-类定义"><a href="#PHP-类定义" class="headerlink" title="PHP 类定义"></a>PHP 类定义</h1><p>PHP 定义类通常语法格式</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 类使用 class 关键字后加上类名定义</span></div><div class="line"><span class="comment">// 类名后的一对大括号(&#123;&#125;)内可以定义变量和方法</span></div><div class="line"><span class="comment">// 类的变量使用 var 来声明, 变量也可以初始化值</span></div><div class="line"><span class="comment">// 函数定义类似 PHP 函数的定义，但函数只能通过该类及其实例化的对象访问</span></div><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">phpClass</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> $var1;</div><div class="line">  <span class="keyword">var</span> $var2 = <span class="string">"constant string"</span>;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">myfunc</span> <span class="params">($arg1, $arg2)</span> </span>&#123;</div><div class="line">     [..]</div><div class="line">  &#125;</div><div class="line">  [..]</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>实例</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 变量 $this 代表自身的对象</span></div><div class="line"><span class="comment">// PHP_EOL 为换行符</span></div><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</div><div class="line">  <span class="comment">/* 成员变量 */</span></div><div class="line">  <span class="keyword">var</span> $url;</div><div class="line">  <span class="keyword">var</span> $title;</div><div class="line">  </div><div class="line">  <span class="comment">/* 成员函数 */</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setUrl</span><span class="params">($par)</span></span>&#123;</div><div class="line">     <span class="keyword">$this</span>-&gt;url = $par;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getUrl</span><span class="params">()</span></span>&#123;</div><div class="line">     <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;url . PHP_EOL;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setTitle</span><span class="params">($par)</span></span>&#123;</div><div class="line">     <span class="keyword">$this</span>-&gt;title = $par;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span><span class="params">()</span></span>&#123;</div><div class="line">     <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;title . PHP_EOL;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-中创建对象"><a href="#PHP-中创建对象" class="headerlink" title="PHP 中创建对象"></a>PHP 中创建对象</h1><p>类创建后，我们可以使用 new 运算符来实例化该类的对象</p>
<figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">$runoob</span> = <span class="keyword">new</span> Site<span class="comment">;</span></div><div class="line"><span class="built_in">$taobao</span> = <span class="keyword">new</span> Site<span class="comment">;</span></div><div class="line"><span class="built_in">$google</span> = <span class="keyword">new</span> Site<span class="comment">;</span></div></pre></td></tr></table></figure>
<h2 id="调用成员方法"><a href="#调用成员方法" class="headerlink" title="调用成员方法"></a>调用成员方法</h2><p>在实例化对象后，我们可以使用该对象调用成员方法，该对象的成员方法只能操作该对象的成员变量</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</div><div class="line">  <span class="comment">/* 成员变量 */</span></div><div class="line">  <span class="keyword">var</span> $url;</div><div class="line">  <span class="keyword">var</span> $title;</div><div class="line">  </div><div class="line">  <span class="comment">/* 成员函数 */</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setUrl</span><span class="params">($par)</span></span>&#123;</div><div class="line">     <span class="keyword">$this</span>-&gt;url = $par;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getUrl</span><span class="params">()</span></span>&#123;</div><div class="line">     <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;url . PHP_EOL;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setTitle</span><span class="params">($par)</span></span>&#123;</div><div class="line">     <span class="keyword">$this</span>-&gt;title = $par;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span><span class="params">()</span></span>&#123;</div><div class="line">     <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;title . PHP_EOL;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$runoob = <span class="keyword">new</span> Site;</div><div class="line">$taobao = <span class="keyword">new</span> Site;</div><div class="line">$google = <span class="keyword">new</span> Site;</div><div class="line"></div><div class="line"><span class="comment">// 调用成员函数，设置标题和URL</span></div><div class="line">$runoob-&gt;setTitle( <span class="string">"菜鸟教程"</span> );</div><div class="line">$taobao-&gt;setTitle( <span class="string">"淘宝"</span> );</div><div class="line">$google-&gt;setTitle( <span class="string">"Google 搜索"</span> );</div><div class="line"></div><div class="line">$runoob-&gt;setUrl( <span class="string">'www.runoob.com'</span> );</div><div class="line">$taobao-&gt;setUrl( <span class="string">'www.taobao.com'</span> );</div><div class="line">$google-&gt;setUrl( <span class="string">'www.google.com'</span> );</div><div class="line"></div><div class="line"><span class="comment">// 调用成员函数，获取标题和URL</span></div><div class="line">$runoob-&gt;getTitle();</div><div class="line">$taobao-&gt;getTitle();</div><div class="line">$google-&gt;getTitle();</div><div class="line"></div><div class="line">$runoob-&gt;getUrl();</div><div class="line">$taobao-&gt;getUrl();</div><div class="line">$google-&gt;getUrl();</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// 输出</div><div class="line">菜鸟教程</div><div class="line">淘宝</div><div class="line">Google 搜索</div><div class="line">www.runoob.com</div><div class="line">www.taobao.com</div><div class="line">www.google.com</div></pre></td></tr></table></figure>
<h1 id="PHP-构造函数"><a href="#PHP-构造函数" class="headerlink" title="PHP 构造函数"></a>PHP 构造函数</h1><p>用来在创建对象时初始化对象， 即为对象成员变量赋初始值，在创建对象的语句中与 new 运算符一起使用</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 通过构造方法来初始化 $url 和 $title 变量</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">( $par1, $par2 )</span> </span>&#123;</div><div class="line">   <span class="keyword">$this</span>-&gt;url = $par1;</div><div class="line">   <span class="keyword">$this</span>-&gt;title = $par2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们就不需要再调用 setTitle 和 setUrl 方法</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</div><div class="line">  <span class="comment">/* 成员变量 */</span></div><div class="line">  <span class="keyword">var</span> $url;</div><div class="line">  <span class="keyword">var</span> $title;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">( $par1, $par2 )</span> </span>&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;url = $par1;</div><div class="line">    <span class="keyword">$this</span>-&gt;title = $par2;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">/* 成员函数 */</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setUrl</span><span class="params">($par)</span></span>&#123;</div><div class="line">     <span class="keyword">$this</span>-&gt;url = $par;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getUrl</span><span class="params">()</span></span>&#123;</div><div class="line">     <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;url . PHP_EOL;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setTitle</span><span class="params">($par)</span></span>&#123;</div><div class="line">     <span class="keyword">$this</span>-&gt;title = $par;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span><span class="params">()</span></span>&#123;</div><div class="line">     <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;title . PHP_EOL;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$runoob = <span class="keyword">new</span> Site(<span class="string">'www.runoob.com'</span>, <span class="string">'菜鸟教程'</span>);</div><div class="line">$taobao = <span class="keyword">new</span> Site(<span class="string">'www.taobao.com'</span>, <span class="string">'淘宝'</span>);</div><div class="line">$google = <span class="keyword">new</span> Site(<span class="string">'www.google.com'</span>, <span class="string">'Google 搜索'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 调用成员函数，获取标题和URL</span></div><div class="line">$runoob-&gt;getTitle();</div><div class="line">$taobao-&gt;getTitle();</div><div class="line">$google-&gt;getTitle();</div><div class="line"></div><div class="line">$runoob-&gt;getUrl();</div><div class="line">$taobao-&gt;getUrl();</div><div class="line">$google-&gt;getUrl();</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">//输出</div><div class="line">菜鸟教程</div><div class="line">淘宝</div><div class="line">Google 搜索</div><div class="line">www.runoob.com</div><div class="line">www.taobao.com</div><div class="line">www.google.com</div></pre></td></tr></table></figure>
<h1 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h1><p>析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDestructableClass</span> </span>&#123;</div><div class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">print</span> <span class="string">"构造函数\n"</span>;</div><div class="line">       <span class="keyword">$this</span>-&gt;name = <span class="string">"MyDestructableClass"</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">print</span> <span class="string">"销毁 "</span> . <span class="keyword">$this</span>-&gt;name . <span class="string">"\n"</span>;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$obj = <span class="keyword">new</span> MyDestructableClass();</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// 输出</div><div class="line">构造函数</div><div class="line">销毁 MyDestructableClass</div></pre></td></tr></table></figure>
<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>PHP 使用关键字 extends 来继承一个类，PHP 不支持多继承</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 实例中 Child_Site 类继承了 Site 类，并扩展了功能</span></div><div class="line"><span class="meta">&lt;?php</span> </div><div class="line"><span class="comment">// 子类扩展站点类别</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child_Site</span> <span class="keyword">extends</span> <span class="title">Site</span> </span>&#123;</div><div class="line">   <span class="keyword">var</span> $category;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setCate</span><span class="params">($par)</span></span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;category = $par;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getCate</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;category . PHP_EOL;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h1><p>如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖，也称为方法的重写</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 实例中重写了 getUrl 与 getTitle 方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;url . PHP_EOL;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;url;</div><div class="line">&#125;</div><div class="line">   </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTitle</span><span class="params">()</span></span>&#123;</div><div class="line">   <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;title . PHP_EOL;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;title;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h1><p>PHP 对属性或方法的访问控制，是通过在前面添加关键字 public（公有），protected（受保护）或 private（私有）来实现的</p>
<ul>
<li>public（公有）：公有的类成员可以在任何地方被访问</li>
<li>protected（受保护）：受保护的类成员则可以被其自身以及其子类和父类访问</li>
<li>private（私有）：私有的类成员则只能被其定义所在的类访问</li>
</ul>
<h2 id="属性的访问控制"><a href="#属性的访问控制" class="headerlink" title="属性的访问控制"></a>属性的访问控制</h2><p>类属性必须定义为公有，受保护，私有之一。如果用 var 定义，则被视为公有</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Define MyClass</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> $public = <span class="string">'Public'</span>;</div><div class="line">    <span class="keyword">protected</span> $protected = <span class="string">'Protected'</span>;</div><div class="line">    <span class="keyword">private</span> $private = <span class="string">'Private'</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">printHello</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;public;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;protected;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;private;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$obj = <span class="keyword">new</span> MyClass();</div><div class="line"><span class="keyword">echo</span> $obj-&gt;public; <span class="comment">// 这行能被正常执行</span></div><div class="line"><span class="keyword">echo</span> $obj-&gt;protected; <span class="comment">// 这行会产生一个致命错误</span></div><div class="line"><span class="keyword">echo</span> $obj-&gt;private; <span class="comment">// 这行也会产生一个致命错误</span></div><div class="line">$obj-&gt;printHello(); <span class="comment">// 输出 Public、Protected 和 Private</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Define MyClass2</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass2</span> <span class="keyword">extends</span> <span class="title">MyClass</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 可以对 public 和 protected 进行重定义，但 private 而不能</span></div><div class="line">    <span class="keyword">protected</span> $protected = <span class="string">'Protected2'</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">printHello</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;public;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;protected;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;private;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$obj2 = <span class="keyword">new</span> MyClass2();</div><div class="line"><span class="keyword">echo</span> $obj2-&gt;public; <span class="comment">// 这行能被正常执行</span></div><div class="line"><span class="keyword">echo</span> $obj2-&gt;private; <span class="comment">// 未定义 private</span></div><div class="line"><span class="keyword">echo</span> $obj2-&gt;protected; <span class="comment">// 这行会产生一个致命错误</span></div><div class="line">$obj2-&gt;printHello(); <span class="comment">// 输出 Public、Protected2 和 Undefined</span></div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="方法的访问控制"><a href="#方法的访问控制" class="headerlink" title="方法的访问控制"></a>方法的访问控制</h2><p>类中的方法可以被定义为公有，私有或受保护。如果没有设置这些关键字，则该方法默认为公有</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Define MyClass</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 声明一个公有的构造函数</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 声明一个公有的方法</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">MyPublic</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 声明一个受保护的方法</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">MyProtected</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 声明一个私有的方法</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">MyPrivate</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 此方法为公有</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Foo</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;MyPublic();</div><div class="line">        <span class="keyword">$this</span>-&gt;MyProtected();</div><div class="line">        <span class="keyword">$this</span>-&gt;MyPrivate();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$myclass = <span class="keyword">new</span> MyClass;</div><div class="line">$myclass-&gt;MyPublic(); <span class="comment">// 这行能被正常执行</span></div><div class="line">$myclass-&gt;MyProtected(); <span class="comment">// 这行会产生一个致命错误</span></div><div class="line">$myclass-&gt;MyPrivate(); <span class="comment">// 这行会产生一个致命错误</span></div><div class="line">$myclass-&gt;Foo(); <span class="comment">// 公有，受保护，私有都可以执行</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Define MyClass2</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass2</span> <span class="keyword">extends</span> <span class="title">MyClass</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 此方法为公有</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Foo2</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;MyPublic();</div><div class="line">        <span class="keyword">$this</span>-&gt;MyProtected();</div><div class="line">        <span class="keyword">$this</span>-&gt;MyPrivate(); <span class="comment">// 这行会产生一个致命错误</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$myclass2 = <span class="keyword">new</span> MyClass2;</div><div class="line">$myclass2-&gt;MyPublic(); <span class="comment">// 这行能被正常执行</span></div><div class="line">$myclass2-&gt;Foo2(); <span class="comment">// 公有的和受保护的都可执行，但私有的不行</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;testPrivate();</div><div class="line">        <span class="keyword">$this</span>-&gt;testPublic();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testPublic</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Bar::testPublic\n"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">testPrivate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Bar::testPrivate\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">extends</span> <span class="title">Bar</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testPublic</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Foo::testPublic\n"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">testPrivate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Foo::testPrivate\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$myFoo = <span class="keyword">new</span> foo();</div><div class="line">$myFoo-&gt;test(); <span class="comment">// Bar::testPrivate </span></div><div class="line">                <span class="comment">// Foo::testPublic</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>使用接口（interface），可以指定某个类必须实现哪些方法，但不需要定义这些方法的具体内容</p>
<p>接口是通过 interface 关键字来定义的，就像定义一个标准的类一样，但其中定义所有的方法都是空的</p>
<p>接口中定义的所有方法都必须是公有，这是接口的特性</p>
<p>要实现一个接口，使用 implements 操作符。类中必须实现接口中定义的所有方法，否则会报一个致命错误。类可以实现多个接口，用逗号来分隔多个接口的名称</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"></div><div class="line"><span class="comment">// 声明一个'iTemplate'接口</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">iTemplate</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setVariable</span><span class="params">($name, $var)</span></span>;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getHtml</span><span class="params">($template)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 实现接口</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Template</span> <span class="keyword">implements</span> <span class="title">iTemplate</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $vars = <span class="keyword">array</span>();</div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setVariable</span><span class="params">($name, $var)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;vars[$name] = $var;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getHtml</span><span class="params">($template)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;vars <span class="keyword">as</span> $name =&gt; $value) &#123;</div><div class="line">            $template = str_replace(<span class="string">'&#123;'</span> . $name . <span class="string">'&#125;'</span>, $value, $template);</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> $template;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><p>可以把在类中始终保持不变的值定义为常量。在定义和使用常量的时候不需要使用 $ 符号</p>
<p>常量的值必须是一个定值，不能是变量，类属性，数学运算的结果或函数调用</p>
<p>用一个变量来动态调用类。但该变量的值不能为关键字（如 self，parent 或 static）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">const</span> constant = <span class="string">'常量值'</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showConstant</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span>  <span class="keyword">self</span>::constant . PHP_EOL;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> MyClass::constant . PHP_EOL;</div><div class="line"></div><div class="line">$classname = <span class="string">"MyClass"</span>;</div><div class="line"><span class="keyword">echo</span> $classname::constant . PHP_EOL; <span class="comment">// 自 5.3.0 起</span></div><div class="line"></div><div class="line">$class = <span class="keyword">new</span> MyClass();</div><div class="line">$class-&gt;showConstant();</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $class::constant . PHP_EOL; <span class="comment">// 自 PHP 5.3.0 起</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><p>任何一个类，如果它里面至少有一个方法是被声明为抽象的，那么这个类就必须被声明为抽象的</p>
<p>定义为抽象的类不能被实例化</p>
<p>被定义为抽象的方法只是声明了其调用方式（参数），不能定义其具体的功能实现</p>
<p>继承一个抽象类的时候，子类必须定义父类中的所有抽象方法,另外,这些方法的访问控制必须和父类中一样</p>
<p>例如某个抽象方法被声明为受保护的，那么子类中实现的方法就应该声明为受保护的或者公有的，而不能定义为私有的。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span></span></div><div class="line">&#123;</div><div class="line"> <span class="comment">// 强制要求子类定义这些方法</span></div><div class="line">    <span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getValue</span><span class="params">()</span></span>;</div><div class="line">    <span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">prefixValue</span><span class="params">($prefix)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// 普通方法（非抽象方法）</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">printOut</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">print</span> <span class="keyword">$this</span>-&gt;getValue() . PHP_EOL;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass1</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"ConcreteClass1"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">prefixValue</span><span class="params">($prefix)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"&#123;$prefix&#125;ConcreteClass1"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass2</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"ConcreteClass2"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">prefixValue</span><span class="params">($prefix)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"&#123;$prefix&#125;ConcreteClass2"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$class1 = <span class="keyword">new</span> ConcreteClass1;</div><div class="line">$class1-&gt;printOut();</div><div class="line"><span class="keyword">echo</span> $class1-&gt;prefixValue(<span class="string">'FOO_'</span>) . PHP_EOL;</div><div class="line"></div><div class="line">$class2 = <span class="keyword">new</span> ConcreteClass2;</div><div class="line">$class2-&gt;printOut();</div><div class="line"><span class="keyword">echo</span> $class2-&gt;prefixValue(<span class="string">'FOO_'</span>) . PHP_EOL;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// 输出</div><div class="line">ConcreteClass1</div><div class="line">FOO_ConcreteClass1</div><div class="line">ConcreteClass2</div><div class="line">FOO_ConcreteClass2</div></pre></td></tr></table></figure>
<p>子类方法可以包含父类抽象方法中不存在的可选参数</p>
<p>子类定义了一个可选参数，而父类抽象方法的声明里没有，则也是可以正常运行的</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 我们的抽象方法仅需要定义需要的参数</span></div><div class="line">    <span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">prefixName</span><span class="params">($name)</span></span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 我们的子类可以定义父类签名中不存在的可选参数</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">prefixName</span><span class="params">($name, $separator = <span class="string">"."</span>)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> ($name == <span class="string">"Pacman"</span>) &#123;</div><div class="line">            $prefix = <span class="string">"Mr"</span>;</div><div class="line">        &#125; <span class="keyword">elseif</span> ($name == <span class="string">"Pacwoman"</span>) &#123;</div><div class="line">            $prefix = <span class="string">"Mrs"</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            $prefix = <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="string">"&#123;$prefix&#125;&#123;$separator&#125; &#123;$name&#125;"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$class = <span class="keyword">new</span> ConcreteClass;</div><div class="line"><span class="keyword">echo</span> $class-&gt;prefixName(<span class="string">"Pacman"</span>), <span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> $class-&gt;prefixName(<span class="string">"Pacwoman"</span>), <span class="string">"\n"</span>;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// 输出</div><div class="line">Mr. Pacman</div><div class="line">Mrs. Pacwoman</div></pre></td></tr></table></figure>
<h1 id="Static-关键字"><a href="#Static-关键字" class="headerlink" title="Static 关键字"></a>Static 关键字</h1><p>声明类属性或方法为 static(静态)，就可以不实例化类而直接访问</p>
<p>静态属性不能通过一个类已实例化的对象来访问（但静态方法可以）</p>
<p>由于静态方法不需要通过对象即可调用，所以伪变量 $this 在静态方法中不可用</p>
<p>静态属性不可以由对象通过 -&gt; 操作符来访问</p>
<p>用一个变量来动态调用类。但该变量的值不能为关键字 self，parent 或 static</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> $my_static = <span class="string">'foo'</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">staticValue</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">self</span>::$my_static;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">print</span> Foo::$my_static . PHP_EOL;</div><div class="line">$foo = <span class="keyword">new</span> Foo();</div><div class="line"></div><div class="line"><span class="keyword">print</span> $foo-&gt;staticValue() . PHP_EOL;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// 输出</div><div class="line">foo</div><div class="line">foo</div></pre></td></tr></table></figure>
<h1 id="Final-关键字"><a href="#Final-关键字" class="headerlink" title="Final 关键字"></a>Final 关键字</h1><p>如果父类中的方法被声明为 final，则子类无法覆盖该方法。如果一个类被声明为 final，则不能被继承</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseClass</span> </span>&#123;</div><div class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">echo</span> <span class="string">"BaseClass::test() called"</span> . PHP_EOL;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="keyword">final</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">moreTesting</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">echo</span> <span class="string">"BaseClass::moreTesting() called"</span>  . PHP_EOL;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildClass</span> <span class="keyword">extends</span> <span class="title">BaseClass</span> </span>&#123;</div><div class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">moreTesting</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">echo</span> <span class="string">"ChildClass::moreTesting() called"</span>  . PHP_EOL;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 报错信息 Fatal error: Cannot override final method BaseClass::moreTesting()</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="调用父类构造方法"><a href="#调用父类构造方法" class="headerlink" title="调用父类构造方法"></a>调用父类构造方法</h1><p>PHP 不会在子类的构造方法中自动的调用父类的构造方法。要执行父类的构造方法，需要在子类的构造方法中调用 parent::__construct()</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseClass</span> </span>&#123;</div><div class="line">   function __construct() &#123;</div><div class="line">       print <span class="string">"BaseClass 类中构造方法"</span> . <span class="type">PHP_EOL</span>;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">BaseClass</span> </span>&#123;</div><div class="line">   function __construct() &#123;</div><div class="line">       parent::__construct();  <span class="comment">// 子类构造方法不能自动调用父类的构造方法</span></div><div class="line">       print <span class="string">"SubClass 类中构造方法"</span> . <span class="type">PHP_EOL</span>;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OtherSubClass</span> <span class="keyword">extends</span> <span class="title">BaseClass</span> </span>&#123;</div><div class="line">    <span class="comment">// 继承 BaseClass 的构造方法</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 调用 BaseClass 构造方法</span></div><div class="line">$obj = <span class="keyword">new</span> <span class="type">BaseClass</span>();</div><div class="line"></div><div class="line"><span class="comment">// 调用 BaseClass、SubClass 构造方法</span></div><div class="line">$obj = <span class="keyword">new</span> <span class="type">SubClass</span>();</div><div class="line"></div><div class="line"><span class="comment">// 调用 BaseClass 构造方法</span></div><div class="line">$obj = <span class="keyword">new</span> <span class="type">OtherSubClass</span>();</div><div class="line">?&gt;</div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="type">BaseClass</span> 类中构造方法</div><div class="line"><span class="type">BaseClass</span> 类中构造方法</div><div class="line"><span class="type">SubClass</span> 类中构造方法</div><div class="line"><span class="type">BaseClass</span> 类中构造方法</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在面向对象的程序设计中，对象是一个由信息及对信息进行处理的描述所组成的整体，是对现实世界的抽象&lt;/p&gt;
&lt;p&gt;对象的主要三个特性&lt;br&gt;
    
    </summary>
    
      <category term="BackEnd" scheme="http://yoursite.com/categories/BackEnd/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Node.js基础</title>
    <link href="http://yoursite.com/2018/07/13/2018.7.14/"/>
    <id>http://yoursite.com/2018/07/13/2018.7.14/</id>
    <published>2018-07-13T15:59:02.654Z</published>
    <updated>2018-07-24T12:21:14.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Node.js 就是运行在服务端的 JavaScript,是一个平台,提供I/O接口,基于Google的V8引擎</p>
<h1 id="创建第一个应用"><a href="#创建第一个应用" class="headerlink" title="创建第一个应用"></a>创建第一个应用</h1><a id="more"></a>
<h2 id="脚本模式"><a href="#脚本模式" class="headerlink" title="脚本模式"></a>脚本模式</h2><p>保存该文件，文件名为 helloworld.js</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(<span class="string">"Hello World"</span>)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p> 并通过 node命令来执行,输出Hello World!</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">node</span> <span class="title">helloworld</span>.js</div></pre></td></tr></table></figure>
<h2 id="交货模式"><a href="#交货模式" class="headerlink" title="交货模式"></a>交货模式</h2><p>打开终端，键入node进入命令交互模式，可以输入一条代码语句后立即执行并显示结果</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">node</span></div><div class="line"><span class="title">&gt; console</span>.log('Hello World!');</div><div class="line">Hello World!</div></pre></td></tr></table></figure>
<h1 id="NPM-使用介绍"><a href="#NPM-使用介绍" class="headerlink" title="NPM 使用介绍"></a>NPM 使用介绍</h1><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景</p>
<ul>
<li>允许用户从NPM服务器下载别人编写的第三方包到本地使用</li>
<li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用</li>
<li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用</li>
</ul>
<h2 id="使用-npm-命令安装模块"><a href="#使用-npm-命令安装模块" class="headerlink" title="使用 npm 命令安装模块"></a>使用 npm 命令安装模块</h2><p>使用 npm 命令安装常用的 Node.js web框架模块 express</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> express</div></pre></td></tr></table></figure>
<p>安装好之后，express 包就放在了工程目录下的 node_modules 目录中</p>
<p>因此在代码中只需要通过 require(‘express’) 的方式就好，无需指定第三方包路径</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var express</span> = require(<span class="string">'express'</span>);</div></pre></td></tr></table></figure>
<h2 id="全局安装与本地安装"><a href="#全局安装与本地安装" class="headerlink" title="全局安装与本地安装"></a>全局安装与本地安装</h2><p>npm 的包安装分为本地安装、全局安装</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> express      <span class="comment"># 本地安装</span></div><div class="line">npm <span class="keyword">install</span> express -g   <span class="comment"># 全局安装</span></div></pre></td></tr></table></figure>
<p>本地安装</p>
<ul>
<li>将安装包放在 ./node_modules 下，如果没有 node_modules 目录</li>
<li>可以通过 require() 来引入本地安装的包</li>
</ul>
<p>全局安装</p>
<ul>
<li>将安装包放在 /usr/local 下或者你 node 的安装目录。</li>
<li>可以直接在命令行里使用</li>
</ul>
<h2 id="使用-package-json"><a href="#使用-package-json" class="headerlink" title="使用 package.json"></a>使用 package.json</h2><p>package.json 位于模块的目录下，用于定义包的属性,属性说明</p>
<ul>
<li>name - 包名</li>
<li>version - 包的版本号</li>
<li>description - 包的描述</li>
<li>homepage - 包的官网 url</li>
<li>author - 包的作者姓名</li>
<li>contributors - 包的其他贡献者姓名</li>
<li>dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下</li>
<li>repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上</li>
<li>main - main 字段指定了程序的主入口文件，require(‘moduleName’) 就会加载这个文件。这个字段的默认值是模块根目录下面的 index.js</li>
<li>keywords - 关键字</li>
</ul>
<h2 id="卸载模块"><a href="#卸载模块" class="headerlink" title="卸载模块"></a>卸载模块</h2><p>使用以下命令来卸载 Node.js 模块</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> uninstall express</div></pre></td></tr></table></figure>
<h2 id="更新模块"><a href="#更新模块" class="headerlink" title="更新模块"></a>更新模块</h2><p>使用以下命令更新模块</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> update express</div></pre></td></tr></table></figure>
<h2 id="搜索模块"><a href="#搜索模块" class="headerlink" title="搜索模块"></a>搜索模块</h2><p>使用以下来搜索模块</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> search express</div></pre></td></tr></table></figure>
<h2 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h2><p>创建模块，package.json 文件是必不可少的</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> init</div></pre></td></tr></table></figure>
<p>使用以下命令在 npm 资源库中注册用户（使用邮箱注册）</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm adduser</div><div class="line"><span class="string">Username:</span> mcmohd</div><div class="line"><span class="string">Password:</span></div><div class="line"><span class="string">Email:</span> (<span class="keyword">this</span> IS <span class="keyword">public</span>) mcmohd<span class="meta">@gmail</span>.com</div></pre></td></tr></table></figure>
<p>用以下命令来发布模块</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> publish</div></pre></td></tr></table></figure>
<h2 id="NPM-常用命令"><a href="#NPM-常用命令" class="headerlink" title="NPM 常用命令"></a>NPM 常用命令</h2><p>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令</p>
<ul>
<li>使用npm help <command>可查看某条命令的详细帮助，例如npm help install</li>
<li>在package.json所在目录下使用npm install . -g可先在本地安装当前命令行程序，可用于发布前的本地测试</li>
<li>使用npm update <package>可以把当前目录下node_modules子目录里边的对应模块更新至最新版本</package></li>
<li>使用npm update <package> -g可以把全局安装的对应命令行程序更新至最新版</package></li>
<li>使用npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人</li>
<li>使用npm unpublish <package>@<version>可以撤销发布自己发布过的某个版本代码</version></package></li>
</ul>
<h2 id="使用淘宝-NPM-镜像"><a href="#使用淘宝-NPM-镜像" class="headerlink" title="使用淘宝 NPM 镜像"></a>使用淘宝 NPM 镜像</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm</span></div><div class="line">npm install -g cnpm --registry=<span class="string">https:</span><span class="comment">//registry.npm.taobao.org</span></div><div class="line"></div><div class="line"><span class="comment">// 使用 cnpm 命令来安装模块</span></div><div class="line"><span class="comment">// cnpm install [name]</span></div></pre></td></tr></table></figure>
<h1 id="REPL-交互式解释器"><a href="#REPL-交互式解释器" class="headerlink" title="REPL(交互式解释器)"></a>REPL(交互式解释器)</h1><p>Node 自带了交互式解释器，可以执行以下任务</p>
<ul>
<li>读取 - 读取用户输入，解析输入了Javascript 数据结构并存储在内存中。</li>
<li>执行 - 执行输入的数据结构</li>
<li>打印 - 输出结果</li>
<li>循环 - 循环操作以上步骤直到用户两次按下 ctrl-c 按钮退出</li>
</ul>
<p>输入以下命令来启动 Node 的终端</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">node</span></div><div class="line"><span class="title">&gt;</span></div></pre></td></tr></table></figure>
<h2 id="简单的表达式运算"><a href="#简单的表达式运算" class="headerlink" title="简单的表达式运算"></a>简单的表达式运算</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ node</div><div class="line">&gt; <span class="number">1</span> +<span class="number">4</span></div><div class="line"><span class="number">5</span></div><div class="line">&gt; <span class="number">5</span> / <span class="number">2</span></div><div class="line"><span class="number">2.5</span></div><div class="line">&gt; <span class="number">3</span> * <span class="number">6</span></div><div class="line"><span class="number">18</span></div><div class="line">&gt; <span class="number">4</span> - <span class="number">1</span></div><div class="line"><span class="number">3</span></div><div class="line">&gt; <span class="number">1</span> + ( <span class="number">2</span> * <span class="number">3</span> ) - <span class="number">4</span></div><div class="line"><span class="number">3</span></div><div class="line">&gt;</div></pre></td></tr></table></figure>
<h2 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h2><p>将数据存储在变量中，并在你需要的时候使用它</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ node</div><div class="line">&gt; x = <span class="number">10</span></div><div class="line"><span class="number">10</span></div><div class="line">&gt; <span class="keyword">var</span> y = <span class="number">10</span></div><div class="line"><span class="literal">undefined</span></div><div class="line">&gt; x + y</div><div class="line"><span class="number">20</span></div><div class="line">&gt; <span class="built_in">console</span>.log(<span class="string">"Hello World"</span>)</div><div class="line">Hello World</div><div class="line"><span class="literal">undefined</span></div><div class="line">&gt; <span class="built_in">console</span>.log(<span class="string">"www.runoob.com"</span>)</div><div class="line">www.runoob.com</div><div class="line"><span class="literal">undefined</span></div></pre></td></tr></table></figure>
<h2 id="多行表达式"><a href="#多行表达式" class="headerlink" title="多行表达式"></a>多行表达式</h2><p>Node REPL 支持输入多行表达式，这就有点类似 JavaScript</p>
<figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 三个点的符号是系统自动生成的，你回车换行后即可。Node 会自动检测是否为连续的表达式</div><div class="line"></div><div class="line">node</div><div class="line">&gt; var <span class="keyword">x</span> = <span class="number">0</span></div><div class="line">undefined</div><div class="line">&gt; do &#123;</div><div class="line">... <span class="keyword">x</span>++<span class="comment">;</span></div><div class="line">... console.log(<span class="string">"x: "</span> + <span class="keyword">x</span>)<span class="comment">;</span></div><div class="line">... &#125; while ( <span class="keyword">x</span> &lt; <span class="number">5</span> )<span class="comment">;</span></div><div class="line"><span class="keyword">x</span>: <span class="number">1</span></div><div class="line"><span class="keyword">x</span>: <span class="number">2</span></div><div class="line"><span class="keyword">x</span>: <span class="number">3</span></div><div class="line"><span class="keyword">x</span>: <span class="number">4</span></div><div class="line"><span class="keyword">x</span>: <span class="number">5</span></div><div class="line">undefined</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<h2 id="下划线-变量"><a href="#下划线-变量" class="headerlink" title="下划线(_)变量"></a>下划线(_)变量</h2><p>使用下划线(_)获取上一个表达式的运算结果</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ node</div><div class="line">&gt; <span class="keyword">var</span> x = <span class="number">10</span></div><div class="line"><span class="literal">undefined</span></div><div class="line">&gt; <span class="keyword">var</span> y = <span class="number">20</span></div><div class="line"><span class="literal">undefined</span></div><div class="line">&gt; x + y</div><div class="line"><span class="number">30</span></div><div class="line">&gt; <span class="keyword">var</span> sum = _</div><div class="line"><span class="literal">undefined</span></div><div class="line">&gt; <span class="built_in">console</span>.log(sum)</div><div class="line"><span class="number">30</span></div><div class="line"><span class="literal">undefined</span></div><div class="line">&gt;</div></pre></td></tr></table></figure>
<h2 id="REPL-命令"><a href="#REPL-命令" class="headerlink" title="REPL 命令"></a>REPL 命令</h2><ul>
<li>ctrl + c - 退出当前终端</li>
<li>ctrl + c 按下两次 - 退出 Node REPL</li>
<li>ctrl + d - 退出 Node REPL</li>
<li>向上/向下 键 - 查看输入的历史命令</li>
<li>tab 键 - 列出当前命令</li>
<li>.help - 列出使用命令</li>
<li>.break - 退出多行表达式</li>
<li>.clear - 退出多行表达式</li>
<li>.save filename - 保存当前的 Node REPL 会话到指定文件</li>
<li>.load filename - 载入当前 Node REPL 会话的文件内容</li>
</ul>
<h2 id="停止-REPL"><a href="#停止-REPL" class="headerlink" title="停止 REPL"></a>停止 REPL</h2><p>两次 ctrl + c 键就能退出 REPL</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">node</span></div><div class="line"><span class="title">&gt;</span></div><div class="line">(^C again to quit)</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<h1 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h1><p>Node.js 异步编程的直接体现就是回调</p>
<p>回调函数在完成任务后就会被调用，Node 使用了大量的回调函数，Node 所有 API 都支持回调函数</p>
<p>一边读取文件，一边执行其他命令，在文件读取完成后，我们将文件内容作为回调函数的参数返回。执行代码时就没有阻塞或等待文件 I/O 操作</p>
<h2 id="阻塞代码实例"><a href="#阻塞代码实例" class="headerlink" title="阻塞代码实例"></a>阻塞代码实例</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个文件 input.txt</span></div><div class="line">张扬博客地址：https:<span class="comment">//github.com/zy343134464</span></div><div class="line"></div><div class="line"><span class="comment">// 创建 main.js 文件</span></div><div class="line"><span class="built_in">var</span> fs = <span class="keyword">require</span>(<span class="string">"fs"</span>);</div><div class="line"><span class="built_in">var</span> <span class="built_in">data</span> = fs.readFileSync(<span class="string">'input.txt'</span>);</div><div class="line">console.<span class="keyword">log</span>(<span class="built_in">data</span>.toString());</div><div class="line">console.<span class="keyword">log</span>(<span class="string">"程序执行结束!"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 输出结果</span></div><div class="line"><span class="comment">// node main.js</span></div><div class="line">张扬博客地址：https:<span class="comment">//github.com/zy343134464</span></div><div class="line"></div><div class="line">程序执行结束!</div></pre></td></tr></table></figure>
<h2 id="非阻塞代码实例"><a href="#非阻塞代码实例" class="headerlink" title="非阻塞代码实例"></a>非阻塞代码实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个文件 input.txt</span></div><div class="line">张扬博客地址：https:<span class="comment">//github.com/zy343134464</span></div><div class="line"></div><div class="line"><span class="comment">// 创建 main.js 文件</span></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line">fs.readFile(<span class="string">'input.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</div><div class="line">    <span class="built_in">console</span>.log(data.toString());</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"程序执行结束!"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 输出结果</span></div><div class="line"><span class="comment">// node main.js</span></div><div class="line">程序执行结束!</div><div class="line">张扬博客地址：https:<span class="comment">//github.com/zy343134464</span></div></pre></td></tr></table></figure>
<h1 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h1><p>Node.js 是单进程单线程应用程序，V8 引擎提供的异步执行回调接口</p>
<p>Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现</p>
<p>Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数</p>
<h2 id="事件驱动程序"><a href="#事件驱动程序" class="headerlink" title="事件驱动程序"></a>事件驱动程序</h2><p>Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求</p>
<p>当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户</p>
<p>在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2015/09/event_loop.jpg" alt="image"></p>
<p>Node.js 有多个内置的事件，我们可以通过引入 events 模块，并通过实例化 EventEmitter 类来绑定和监听事件</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 引入 events 模块</span></div><div class="line"><span class="keyword">var</span> events = require(<span class="string">'events'</span>);</div><div class="line"><span class="comment">// 创建 eventEmitter 对象</span></div><div class="line"><span class="keyword">var</span> eventEmitter = <span class="keyword">new</span> <span class="type">events</span>.EventEmitter();</div></pre></td></tr></table></figure>
<p>绑定及触发事件处理程序</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 绑定事件及事件的处理程序</span></div><div class="line"><span class="selector-tag">eventEmitter</span><span class="selector-class">.on</span>(<span class="string">'eventName'</span>, eventHandler);</div><div class="line"></div><div class="line"><span class="comment">// 触发事件</span></div><div class="line"><span class="selector-tag">eventEmitter</span><span class="selector-class">.emit</span>(<span class="string">'eventName'</span>);</div></pre></td></tr></table></figure>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建main.js</span></div><div class="line"><span class="comment">// 引入 events 模块</span></div><div class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</div><div class="line"><span class="comment">// 创建 eventEmitter 对象</span></div><div class="line"><span class="keyword">var</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</div><div class="line"></div><div class="line"><span class="comment">// 创建事件处理程序</span></div><div class="line"><span class="keyword">var</span> connectHandler = <span class="function"><span class="keyword">function</span> <span class="title">connected</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'连接成功。'</span>);</div><div class="line">  </div><div class="line">   <span class="comment">// 触发 data_received 事件 </span></div><div class="line">   eventEmitter.emit(<span class="string">'data_received'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 绑定 connection 事件处理程序</span></div><div class="line">eventEmitter.on(<span class="string">'connection'</span>, connectHandler);</div><div class="line"> </div><div class="line"><span class="comment">// 使用匿名函数绑定 data_received 事件</span></div><div class="line">eventEmitter.on(<span class="string">'data_received'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'数据接收成功。'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 触发 connection 事件 </span></div><div class="line">eventEmitter.emit(<span class="string">'connection'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"程序执行完毕。"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="comment">// node main.js</span></div><div class="line">连接成功。</div><div class="line">数据接收成功。</div><div class="line">程序执行完毕。</div></pre></td></tr></table></figure>
<h2 id="应用程序工作机制"><a href="#应用程序工作机制" class="headerlink" title="应用程序工作机制"></a>应用程序工作机制</h2><p>在 Node 应用程序中,回调函数接收错误对象作为第一个参数，执行异步操作的函数将回调函数作为最后一个参数</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// fs.readFile() 是异步函数用于读取文件</span></div><div class="line"><span class="comment">// 如果在读取文件过程中发生错误，错误 err 对象就会输出错误信息</span></div><div class="line"><span class="comment">// 果没发生错误，readFile 跳过 err 对象的输出，文件内容就通过回调函数输出</span></div><div class="line"><span class="comment">// 创建一个 input.txt</span></div><div class="line">张扬博客地址：https:<span class="comment">//github.com/zy343134464</span></div><div class="line"></div><div class="line"><span class="comment">// 创建 main.js 文件</span></div><div class="line"><span class="keyword">var</span> fs = require(<span class="string">"fs"</span>);</div><div class="line">fs.readFile('<span class="keyword">input</span>.txt', function (<span class="keyword">err</span>, data) &#123;</div><div class="line">   <span class="keyword">if</span> (<span class="keyword">err</span>)&#123;</div><div class="line">      console.<span class="built_in">log</span>(<span class="keyword">err</span>.<span class="keyword">stack</span>);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line">   console.<span class="built_in">log</span>(data.<span class="keyword">toString</span>());</div><div class="line">&#125;);</div><div class="line">console.<span class="built_in">log</span>(<span class="string">"程序执行完毕"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line">程序执行完毕</div><div class="line">张扬博客地址：https:<span class="comment">//github.com/zy343134464</span></div><div class="line"></div><div class="line"><span class="comment">// 删除 input.txt 文件</span></div><div class="line"><span class="comment">//输出</span></div><div class="line">程序执行完毕</div><div class="line"><span class="keyword">Error</span>: ENOENT, <span class="keyword">open</span> '<span class="keyword">input</span>.txt'</div></pre></td></tr></table></figure>
<h1 id="EventEmitter"><a href="#EventEmitter" class="headerlink" title="EventEmitter"></a>EventEmitter</h1><p>Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列</p>
<h2 id="EventEmitter-类"><a href="#EventEmitter-类" class="headerlink" title="EventEmitter 类"></a>EventEmitter 类</h2><p>events 模块只提供了一个对象： events.EventEmitter</p>
<p>EventEmitter 的核心就是事件触发与事件监听器功能的封装</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 引入 events 模块</span></div><div class="line"><span class="keyword">var</span> events = require(<span class="string">'events'</span>);</div><div class="line"><span class="comment">// 创建 eventEmitter 对象</span></div><div class="line"><span class="keyword">var</span> eventEmitter = <span class="keyword">new</span> <span class="type">events</span>.EventEmitter();</div></pre></td></tr></table></figure>
<p>EventEmitter 对象如果在实例化时发生错误，会触发 error 事件</p>
<p>当添加新的监听器时，newListener 事件会触发，当监听器被移除时，removeListener 事件被触发</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 运行这段代码，1 秒后控制台输出了 'some_event 事件触发'</span></div><div class="line"><span class="comment">// 其原理是 event 对象注册了事件 some_event 的一个监听器</span></div><div class="line"><span class="comment">// 通过 setTimeout 在 1000 毫秒以后向 event 对象发送事件 some_event，此时会调用some_event 的监听器</span></div><div class="line"><span class="comment">//event.js 文件</span></div><div class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter; </div><div class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> EventEmitter(); </div><div class="line">event.on(<span class="string">'some_event'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'some_event 事件触发'</span>); </div><div class="line">&#125;); </div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">    event.emit(<span class="string">'some_event'</span>); </div><div class="line">&#125;, <span class="number">1000</span>); </div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="comment">// node event.js </span></div><div class="line">some_event 事件触发</div></pre></td></tr></table></figure>
<p>EventEmitter 的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的语义</p>
<p>对于每个事件，EventEmitter 支持 若干个事件监听器</p>
<p>当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// emitter 为事件 someEvent 注册了两个事件监听器，然后触发了 someEvent 事件</span></div><div class="line"><span class="comment">// 两个事件监听器回调函数被先后调用</span></div><div class="line"><span class="comment">//event.js 文件</span></div><div class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>); </div><div class="line"><span class="keyword">var</span> emitter = <span class="keyword">new</span> events.EventEmitter(); </div><div class="line">emitter.on(<span class="string">'someEvent'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">arg1, arg2</span>) </span>&#123; </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'listener1'</span>, arg1, arg2); </div><div class="line">&#125;); </div><div class="line">emitter.on(<span class="string">'someEvent'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">arg1, arg2</span>) </span>&#123; </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'listener2'</span>, arg1, arg2); </div><div class="line">&#125;); </div><div class="line">emitter.emit(<span class="string">'someEvent'</span>, <span class="string">'arg1 参数'</span>, <span class="string">'arg2 参数'</span>); </div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="comment">// node event.js </span></div><div class="line">listener1 arg1 参数 arg2 参数</div><div class="line">listener2 arg1 参数 arg2 参数</div></pre></td></tr></table></figure>
<p>EventEmitter 提供了多个属性，如 on 和 emit。on 函数用于绑定事件函数，emit 属性用于触发一个事件</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul>
<li><p>addListener(event, listener):为指定事件添加一个监听器到监听器数组的尾部</p>
</li>
<li><p>on(event, listener):为指定事件注册一个监听器，接受一个字符串 event 和一个回调函数</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">server.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">stream</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'someone connected!'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>once(event, listener):为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">server.once(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">stream</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Ah, we have our first user!'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>removeListener(event, listener):移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器</li>
</ul>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">callback</span> = <span class="function"><span class="keyword">function</span></span>(stream) &#123;</div><div class="line">  console.log(<span class="string">'someone connected!'</span>);</div><div class="line">&#125;;</div><div class="line">server.on(<span class="string">'connection'</span>, <span class="keyword">callback</span>);</div><div class="line"><span class="comment">// ...</span></div><div class="line">server.removeListener(<span class="string">'connection'</span>, <span class="keyword">callback</span>);</div></pre></td></tr></table></figure>
<ul>
<li><p>removeAllListeners([event]):移除所有事件的所有监听器， 如果指定事件，则移除指定事件的所有监听器</p>
</li>
<li><p>setMaxListeners(n):setMaxListeners 函数用于提高监听器的默认限制的数量</p>
</li>
<li><p>listeners(event):返回指定事件的监听器数组</p>
</li>
<li><p>emit(event, [arg1], [arg2], […]):按参数的顺序执行每个监听器，如果事件有注册监听返回 true，否则返回 false</p>
</li>
</ul>
<h2 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h2><ul>
<li>listenerCount(emitter, event):返回指定事件的监听器数量</li>
</ul>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul>
<li><p>newListener(emitter, event):该事件在添加新监听器时被触发</p>
</li>
<li><p>removeListener(emitter, event):从指定监听器数组中删除一个监听器</p>
</li>
</ul>
<h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><p>通过 connection（连接）事件演示了 EventEmitter 类的应用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建 main.js 文件</span></div><div class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</div><div class="line"><span class="keyword">var</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</div><div class="line"></div><div class="line"><span class="comment">// 监听器 #1</span></div><div class="line"><span class="keyword">var</span> listener1 = <span class="function"><span class="keyword">function</span> <span class="title">listener1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'监听器 listener1 执行。'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 监听器 #2</span></div><div class="line"><span class="keyword">var</span> listener2 = <span class="function"><span class="keyword">function</span> <span class="title">listener2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'监听器 listener2 执行。'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 绑定 connection 事件，处理函数为 listener1 </span></div><div class="line">eventEmitter.addListener(<span class="string">'connection'</span>, listener1);</div><div class="line"></div><div class="line"><span class="comment">// 绑定 connection 事件，处理函数为 listener2</span></div><div class="line">eventEmitter.on(<span class="string">'connection'</span>, listener2);</div><div class="line"></div><div class="line"><span class="keyword">var</span> eventListeners = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter.listenerCount(eventEmitter,<span class="string">'connection'</span>);</div><div class="line"><span class="built_in">console</span>.log(eventListeners + <span class="string">" 个监听器监听连接事件。"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 处理 connection 事件 </span></div><div class="line">eventEmitter.emit(<span class="string">'connection'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 移除监绑定的 listener1 函数</span></div><div class="line">eventEmitter.removeListener(<span class="string">'connection'</span>, listener1);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"listener1 不再受监听。"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 触发连接事件</span></div><div class="line">eventEmitter.emit(<span class="string">'connection'</span>);</div><div class="line"></div><div class="line">eventListeners = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter.listenerCount(eventEmitter,<span class="string">'connection'</span>);</div><div class="line"><span class="built_in">console</span>.log(eventListeners + <span class="string">" 个监听器监听连接事件。"</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"程序执行完毕。"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="comment">// node main.js</span></div><div class="line"><span class="number">2</span> 个监听器监听连接事件。</div><div class="line">监听器 listener1 执行。</div><div class="line">监听器 listener2 执行。</div><div class="line">listener1 不再受监听。</div><div class="line">监听器 listener2 执行。</div><div class="line"><span class="number">1</span> 个监听器监听连接事件。</div><div class="line">程序执行完毕。</div></pre></td></tr></table></figure>
<h2 id="error-事件"><a href="#error-事件" class="headerlink" title="error 事件"></a>error 事件</h2><p>EventEmitter 定义了一个特殊的事件 error，它包含了错误的语义，我们在遇到 异常的时候通常会触发 error 事件</p>
<p>一般要为会触发 error 事件的对象设置监听器，避免遇到错误后整个程序崩溃</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>); </div><div class="line"><span class="keyword">var</span> emitter = <span class="keyword">new</span> events.EventEmitter(); </div><div class="line">emitter.emit(<span class="string">'error'</span>); </div><div class="line"></div><div class="line"><span class="comment">// 运行时会显示以下错误</span></div><div class="line">node.js:<span class="number">201</span> </div><div class="line"><span class="keyword">throw</span> e; <span class="comment">// process.nextTick error, or 'error' event on first tick </span></div><div class="line">^ </div><div class="line"><span class="built_in">Error</span>: Uncaught, unspecified <span class="string">'error'</span> event. </div><div class="line">at EventEmitter.emit (events.js:<span class="number">50</span>:<span class="number">15</span>) </div><div class="line">at <span class="built_in">Object</span>.&lt;anonymous&gt; (<span class="regexp">/home/</span>byvoid/error.js:<span class="number">5</span>:<span class="number">9</span>) </div><div class="line">at Module._compile (<span class="built_in">module</span>.js:<span class="number">441</span>:<span class="number">26</span>) </div><div class="line">at <span class="built_in">Object</span>..js (<span class="built_in">module</span>.js:<span class="number">459</span>:<span class="number">10</span>) </div><div class="line">at Module.load (<span class="built_in">module</span>.js:<span class="number">348</span>:<span class="number">31</span>) </div><div class="line">at <span class="built_in">Function</span>._load (<span class="built_in">module</span>.js:<span class="number">308</span>:<span class="number">12</span>) </div><div class="line">at <span class="built_in">Array</span><span class="number">.0</span> (<span class="built_in">module</span>.js:<span class="number">479</span>:<span class="number">10</span>) </div><div class="line">at EventEmitter._tickCallback (node.js:<span class="number">192</span>:<span class="number">40</span>)</div></pre></td></tr></table></figure>
<h2 id="继承-EventEmitter"><a href="#继承-EventEmitter" class="headerlink" title="继承 EventEmitter"></a>继承 EventEmitter</h2><p>大多数时候我们不会直接使用 EventEmitter，而是在对象中继承它</p>
<p>包括 fs、net、 http 在内的，只要是支持事件响应的核心模块都是 EventEmitter 的子类</p>
<h1 id="Buffer-缓冲区"><a href="#Buffer-缓冲区" class="headerlink" title="Buffer(缓冲区)"></a>Buffer(缓冲区)</h1><p>JavaScript 语言自身只有字符串数据类型，没有二进制数据类型</p>
<p>处理像TCP流或文件流时，必须使用到二进制数据</p>
<p> Node.js中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区</p>
<h2 id="Buffer-与字符编码"><a href="#Buffer-与字符编码" class="headerlink" title="Buffer 与字符编码"></a>Buffer 与字符编码</h2><p>Buffer 实例一般用于表示编码字符的序列，比如 UTF-8 、 UCS2 、 Base64 、或十六进制编码的数据</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const buf = Buffer.<span class="keyword">from</span>(<span class="string">'runoob'</span>, <span class="string">'ascii'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 输出 72756e6f6f62</span></div><div class="line">console.<span class="built_in">log</span>(buf.<span class="built_in">toString</span>(<span class="string">'hex'</span>));</div><div class="line"></div><div class="line"><span class="comment">// 输出 cnVub29i</span></div><div class="line">console.<span class="built_in">log</span>(buf.<span class="built_in">toString</span>(<span class="string">'base64'</span>));</div></pre></td></tr></table></figure>
<p>Node.js 目前支持的字符编码包括</p>
<ul>
<li>ascii - 仅支持 7 位 ASCII 数据。如果设置去掉高位的话，这种编码是非常快的</li>
<li>utf8 - 多字节编码的 Unicode 字符。许多网页和其他文档格式都使用 UTF-8 </li>
<li>utf16le - 2 或 4 个字节，小字节序编码的 Unicode 字符。支持代理对（U+10000 至 U+10FFFF）</li>
<li>ucs2 - utf16le 的别名</li>
<li>base64 - Base64 编码</li>
<li>latin1 - 一种把 Buffer 编码成一字节编码的字符串的方式</li>
<li>binary - latin1 的别名</li>
<li>hex - 将每个字节编码为两个十六进制字</li>
</ul>
<h2 id="创建-Buffer-类"><a href="#创建-Buffer-类" class="headerlink" title="创建 Buffer 类"></a>创建 Buffer 类</h2><p>Buffer 提供了以下 API 来创建 Buffer 类</p>
<ul>
<li>Buffer.alloc(size[, fill[, encoding]])： 返回一个指定大小的 Buffer 实例，如果没有设置 fill，则默认填满 0</li>
<li>Buffer.allocUnsafe(size)： 返回一个指定大小的 Buffer 实例，但是它不会被初始化，所以它可能包含敏感的数据</li>
<li>Buffer.allocUnsafeSlow(size)</li>
<li>Buffer.from(array)： 返回一个被 array 的值初始化的新的 Buffer 实例（传入的 array 的元素只能是数字，不然就会自动被 0 覆盖）</li>
<li>Buffer.from(arrayBuffer[, byteOffset[, length]])： 返回一个新建的与给定的 ArrayBuffer 共享同一内存的 Buffer</li>
<li>Buffer.from(buffer)： 复制传入的 Buffer 实例的数据，并返回一个新的 Buffer 实例</li>
<li>Buffer.from(string[, encoding])： 返回一个被 string 的值初始化的新的 Buffer 实例</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// 创建一个长度为 <span class="number">10</span>、且用 <span class="number">0</span> 填充的 <span class="keyword">Buffer。</span></div><div class="line"><span class="symbol">const</span> <span class="keyword">buf1 </span>= <span class="keyword">Buffer.alloc(10);</span></div><div class="line"></div><div class="line">// 创建一个长度为 <span class="number">10</span>、且用 <span class="number">0x1</span> 填充的 <span class="keyword">Buffer。 </span></div><div class="line"><span class="symbol">const</span> <span class="keyword">buf2 </span>= <span class="keyword">Buffer.alloc(10, </span><span class="number">1</span>)<span class="comment">;</span></div><div class="line"></div><div class="line">// 创建一个长度为 <span class="number">10</span>、且未初始化的 <span class="keyword">Buffer。</span></div><div class="line">// 这个方法比调用 <span class="keyword">Buffer.alloc() </span>更快，</div><div class="line">// 但返回的 <span class="keyword">Buffer </span>实例可能包含旧数据，</div><div class="line">// 因此需要使用 <span class="meta">fill</span>() 或 write() 重写。</div><div class="line"><span class="symbol">const</span> <span class="keyword">buf3 </span>= <span class="keyword">Buffer.allocUnsafe(10);</span></div><div class="line"></div><div class="line">// 创建一个包含 [<span class="number">0x1</span>, <span class="number">0x2</span>, <span class="number">0x3</span>] 的 <span class="keyword">Buffer。</span></div><div class="line"><span class="symbol">const</span> <span class="keyword">buf4 </span>= <span class="keyword">Buffer.from([1, </span><span class="number">2</span>, <span class="number">3</span>])<span class="comment">;</span></div><div class="line"></div><div class="line">// 创建一个包含 UTF-<span class="number">8</span> 字节 [<span class="number">0x74</span>, <span class="number">0xc3</span>, <span class="number">0xa9</span>, <span class="number">0x73</span>, <span class="number">0x74</span>] 的 <span class="keyword">Buffer。</span></div><div class="line"><span class="symbol">const</span> <span class="keyword">buf5 </span>= <span class="keyword">Buffer.from('tést');</span></div><div class="line"></div><div class="line">// 创建一个包含 Latin-<span class="number">1</span> 字节 [<span class="number">0x74</span>, <span class="number">0xe9</span>, <span class="number">0x73</span>, <span class="number">0x74</span>] 的 <span class="keyword">Buffer。</span></div><div class="line"><span class="symbol">const</span> <span class="keyword">buf6 </span>= <span class="keyword">Buffer.from('tést', </span><span class="string">'latin1'</span>)<span class="comment">;</span></div></pre></td></tr></table></figure>
<h2 id="写入缓冲区"><a href="#写入缓冲区" class="headerlink" title="写入缓冲区"></a>写入缓冲区</h2><p>buf.write(string[, offset[, length]][, encoding]),返回值:实际写入的大小。如果 buffer 空间不足， 则只会写入部分字符串</p>
<ul>
<li>canshu - 写入缓冲区的字符串</li>
<li>offset - 缓冲区开始写入的索引值，默认为 0 </li>
<li>length - 写入的字节数，默认为 buffer.length</li>
<li>encoding - 使用的编码。默认为 ‘utf8’</li>
</ul>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">buf = Buffer.alloc(<span class="number">256</span>);</div><div class="line">len = buf.<span class="keyword">write</span>(<span class="string">"www.runoob.com"</span>);</div><div class="line"></div><div class="line">console.log(<span class="string">"写入字节数 : "</span>+  len);</div><div class="line"></div><div class="line">// 输出</div><div class="line">// <span class="keyword">node</span> <span class="title">main</span>.js</div><div class="line">写入字节数 : <span class="number">14</span></div></pre></td></tr></table></figure>
<h2 id="从缓冲区读取数据"><a href="#从缓冲区读取数据" class="headerlink" title="从缓冲区读取数据"></a>从缓冲区读取数据</h2><p>buf.toString([encoding[, start[, end]]]),返回值:解码缓冲区数据并使用指定的编码返回字符串</p>
<ul>
<li>encoding - 使用的编码。默认为 ‘utf8’</li>
<li>start - 指定开始读取的索引位置，默认为 0</li>
<li>end - 结束位置，默认为缓冲区的末尾</li>
</ul>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">buf = Buffer.alloc(<span class="number">26</span>);</div><div class="line"><span class="keyword">for</span> (var i = <span class="number">0</span> ; i &lt; <span class="number">26</span> ; i++) &#123;</div><div class="line">  buf[i] = i + <span class="number">97</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.<span class="built_in">log</span>( buf.<span class="built_in">toString</span>(<span class="string">'ascii'</span>));       <span class="comment">// 输出: abcdefghijklmnopqrstuvwxyz</span></div><div class="line">console.<span class="built_in">log</span>( buf.<span class="built_in">toString</span>(<span class="string">'ascii'</span>,<span class="number">0</span>,<span class="number">5</span>));   <span class="comment">// 输出: abcde</span></div><div class="line">console.<span class="built_in">log</span>( buf.<span class="built_in">toString</span>(<span class="string">'utf8'</span>,<span class="number">0</span>,<span class="number">5</span>));    <span class="comment">// 输出: abcde</span></div><div class="line">console.<span class="built_in">log</span>( buf.<span class="built_in">toString</span>(undefined,<span class="number">0</span>,<span class="number">5</span>)); <span class="comment">// 使用 'utf8' 编码, 并输出: abcde</span></div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="comment">// node main.js</span></div><div class="line">abcdefghijklmnopqrstuvwxyz</div><div class="line">abcde</div><div class="line">abcde</div><div class="line">abcde</div></pre></td></tr></table></figure>
<h2 id="将-Buffer-转换为-JSON-对象"><a href="#将-Buffer-转换为-JSON-对象" class="headerlink" title="将 Buffer 转换为 JSON 对象"></a>将 Buffer 转换为 JSON 对象</h2><p>buf.toJSON(),返回值:返回 JSON 对象</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> buf = Buffer.<span class="keyword">from</span>([<span class="number">0x1</span>, <span class="number">0x2</span>, <span class="number">0x3</span>, <span class="number">0x4</span>, <span class="number">0x5</span>]);</div><div class="line"><span class="keyword">const</span> json = JSON.stringify(buf);</div><div class="line"></div><div class="line"><span class="comment">// 输出: &#123;"type":"Buffer","data":[1,2,3,4,5]&#125;</span></div><div class="line">console.log(json);</div><div class="line"></div><div class="line"><span class="keyword">const</span> copy = JSON.parse(json, (key, <span class="keyword">value</span>) =&gt; &#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">value</span> &amp;&amp; <span class="keyword">value</span>.type === <span class="string">'Buffer'</span> ?</div><div class="line">    Buffer.<span class="keyword">from</span>(<span class="keyword">value</span>.data) :</div><div class="line">    <span class="keyword">value</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 输出: &lt;Buffer 01 02 03 04 05&gt;</span></div><div class="line">console.log(copy);</div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line">&#123;<span class="string">"type"</span>:<span class="string">"Buffer"</span>,<span class="string">"data"</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]&#125;</div><div class="line">&lt;Buffer <span class="number">01</span> <span class="number">02</span> <span class="number">03</span> <span class="number">04</span> <span class="number">05</span>&gt;</div></pre></td></tr></table></figure>
<h2 id="缓冲区合并"><a href="#缓冲区合并" class="headerlink" title="缓冲区合并"></a>缓冲区合并</h2><p>Buffer.concat(list[, totalLength]),返回一个多个成员合并的新 Buffer 对象</p>
<ul>
<li>list - 用于合并的 Buffer 对象数组列表</li>
<li>totalLength - 指定合并后Buffer对象的总长度</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">var</span> <span class="keyword">buffer1 </span>= <span class="keyword">Buffer.from(('张扬教程'));</span></div><div class="line"><span class="symbol">var</span> <span class="keyword">buffer2 </span>= <span class="keyword">Buffer.from(('www.zhangyang.com'));</span></div><div class="line"><span class="symbol">var</span> <span class="keyword">buffer3 </span>= <span class="keyword">Buffer.concat([buffer1,buffer2]);</span></div><div class="line"><span class="symbol">console.log</span>(<span class="string">"buffer3 内容: "</span> + <span class="keyword">buffer3.toString());</span></div><div class="line"></div><div class="line">// 输出</div><div class="line"><span class="keyword">buffer3 </span>内容: 张扬教程 www.zhangyang.com</div></pre></td></tr></table></figure>
<h2 id="缓冲区比较"><a href="#缓冲区比较" class="headerlink" title="缓冲区比较"></a>缓冲区比较</h2><p>buf.compare(otherBuffer),返回值:返回一个数字，表示 buf 在 otherBuffer 之前，之后或相同</p>
<ul>
<li>与 buf 对象比较的另外一个 Buffer 对象</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">var</span> <span class="keyword">buffer1 </span>= <span class="keyword">Buffer.from('ABC');</span></div><div class="line"><span class="symbol">var</span> <span class="keyword">buffer2 </span>= <span class="keyword">Buffer.from('ABCD');</span></div><div class="line"><span class="symbol">var</span> result = <span class="keyword">buffer1.compare(buffer2);</span></div><div class="line"></div><div class="line"><span class="symbol">if</span>(result &lt; <span class="number">0</span>) &#123;</div><div class="line">   console.log(<span class="keyword">buffer1 </span>+ <span class="string">" 在 "</span> + <span class="keyword">buffer2 </span>+ <span class="string">"之前"</span>)<span class="comment">;</span></div><div class="line">&#125;<span class="meta">else</span> <span class="meta">if</span>(result == <span class="number">0</span>)&#123;</div><div class="line">   console.log(<span class="keyword">buffer1 </span>+ <span class="string">" 与 "</span> + <span class="keyword">buffer2 </span>+ <span class="string">"相同"</span>)<span class="comment">;</span></div><div class="line">&#125;<span class="meta">else</span> &#123;</div><div class="line">   console.log(<span class="keyword">buffer1 </span>+ <span class="string">" 在 "</span> + <span class="keyword">buffer2 </span>+ <span class="string">"之后"</span>)<span class="comment">;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">// 输出</div><div class="line"><span class="symbol">ABC</span>再ABCD之前</div></pre></td></tr></table></figure>
<h2 id="拷贝缓冲区"><a href="#拷贝缓冲区" class="headerlink" title="拷贝缓冲区"></a>拷贝缓冲区</h2><p>buf.copy(targetBuffer[, targetStart[, sourceStart[, sourceEnd]]]),没有返回值</p>
<ul>
<li>targetBuffer - 要拷贝的 Buffer 对象</li>
<li>targetStart - 数字, 可选, 默认: 0</li>
<li>sourceStart - 数字, 可选, 默认: 0</li>
<li>sourceEnd - 数字, 可选, 默认: buffer.length</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">var</span> <span class="keyword">buf1 </span>= <span class="keyword">Buffer.from('abcdefghijkl');</span></div><div class="line"><span class="symbol">var</span> <span class="keyword">buf2 </span>= <span class="keyword">Buffer.from('RUNOOB');</span></div><div class="line"></div><div class="line">//将 <span class="keyword">buf2 </span>插入到 <span class="keyword">buf1 </span>指定位置上</div><div class="line"><span class="keyword">buf2.copy(buf1, </span><span class="number">2</span>)<span class="comment">;</span></div><div class="line"></div><div class="line"><span class="symbol">console.log</span>(<span class="keyword">buf1.toString());</span></div><div class="line"></div><div class="line">// 输出</div><div class="line"><span class="symbol">abRUNOOBijkl</span></div></pre></td></tr></table></figure>
<h2 id="缓冲区裁剪"><a href="#缓冲区裁剪" class="headerlink" title="缓冲区裁剪"></a>缓冲区裁剪</h2><p>buf.slice([start[, end]]),返回值:返回一个新的缓冲区，它和旧缓冲区指向同一块内存，但是从索引 start 到 end 的位置剪切</p>
<ul>
<li>start - 数字, 可选, 默认: 0</li>
<li>end - 数字, 可选, 默认: buffer.length</li>
</ul>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> buffer1 = Buffer.from('runoob');</div><div class="line"><span class="comment">// 剪切缓冲区</span></div><div class="line"><span class="keyword">var</span> buffer2 = buffer1.slice(0,2);</div><div class="line">console.<span class="built_in">log</span>(<span class="string">"buffer2 content: "</span> + buffer2.<span class="keyword">toString</span>());</div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line">buffer2 content: <span class="keyword">ru</span></div></pre></td></tr></table></figure>
<h2 id="缓冲区长度"><a href="#缓冲区长度" class="headerlink" title="缓冲区长度"></a>缓冲区长度</h2><p>buf.length,返回值:返回 Buffer 对象所占据的内存长度</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var <span class="built_in">buffer</span> = Buffer.from(<span class="string">'www.runoob.com'</span>);</div><div class="line"><span class="comment">//  缓冲区长度</span></div><div class="line">console.log(<span class="string">"buffer length: "</span> + <span class="built_in">buffer</span>.length);</div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="built_in">buffer</span> length: <span class="number">14</span></div></pre></td></tr></table></figure>
<h1 id="Stream-流"><a href="#Stream-流" class="headerlink" title="Stream(流)"></a>Stream(流)</h1><p>Stream 是一个抽象接口，Node 中有很多对象实现了这个接口</p>
<p>Node.js，Stream 有四种流类型</p>
<ul>
<li>Readable - 可读操作</li>
<li>Writable - 可写操作</li>
<li>Duplex - 可读可写操作</li>
<li>Transform - 操作被写入数据，然后读出结果</li>
</ul>
<p>所有的 Stream 对象都是 EventEmitter 的实例。常用的事件有</p>
<ul>
<li>data - 当有数据可读时触发</li>
<li>end - 没有更多的数据可读时触发</li>
<li>error - 在接收和写入过程中发生错误时触发</li>
<li>finish - 所有数据已被写入到底层系统时触发</li>
</ul>
<h2 id="从流中读取数据"><a href="#从流中读取数据" class="headerlink" title="从流中读取数据"></a>从流中读取数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建 input.txt 文件</span></div><div class="line">菜鸟教程官网地址：www.runoob.com</div><div class="line"></div><div class="line"><span class="comment">// 创建 main.js 文件</span></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"><span class="keyword">var</span> data = <span class="string">''</span>;</div><div class="line"></div><div class="line"><span class="comment">// 创建可读流</span></div><div class="line"><span class="keyword">var</span> readerStream = fs.createReadStream(<span class="string">'input.txt'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 设置编码为 utf8。</span></div><div class="line">readerStream.setEncoding(<span class="string">'UTF8'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 处理流事件 --&gt; data, end, and error</span></div><div class="line">readerStream.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</div><div class="line">   data += chunk;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">readerStream.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(data);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">readerStream.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(err.stack);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"程序执行完毕"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 运行 node main.js</span></div><div class="line">程序执行完毕</div><div class="line">菜鸟教程官网地址：www.runoob.com</div></pre></td></tr></table></figure>
<h2 id="写入流"><a href="#写入流" class="headerlink" title="写入流"></a>写入流</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建 main.js 文件</span></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"><span class="keyword">var</span> data = <span class="string">'菜鸟教程官网地址：www.runoob.com'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 创建一个可以写入的流，写入到文件 output.txt 中</span></div><div class="line"><span class="keyword">var</span> writerStream = fs.createWriteStream(<span class="string">'output.txt'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 使用 utf8 编码写入数据</span></div><div class="line">writerStream.write(data,<span class="string">'UTF8'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 标记文件末尾</span></div><div class="line">writerStream.end();</div><div class="line"></div><div class="line"><span class="comment">// 处理流事件 --&gt; data, end, and error</span></div><div class="line">writerStream.on(<span class="string">'finish'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"写入完成。"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">writerStream.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(err.stack);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"程序执行完毕"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 将 data 变量的数据写入到 output.txt 文件中</span></div><div class="line"><span class="comment">// 运行 node main.js</span></div><div class="line">程序执行完毕</div><div class="line">写入完成。</div><div class="line"></div><div class="line"><span class="comment">// 查看output.txt文件的内容</span></div><div class="line">cat output.txt</div><div class="line">菜鸟教程官网地址：www.runoob.com</div></pre></td></tr></table></figure>
<h2 id="管道流"><a href="#管道流" class="headerlink" title="管道流"></a>管道流</h2><p>管道提供了一个输出流到输入流的机制。通常我们用于从一个流中获取数据并将数据传递到另外一个流中</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置 input.txt 文件内容</span></div><div class="line">菜鸟教程官网地址：www.runoob.com</div><div class="line">管道流操作实例</div><div class="line"></div><div class="line"><span class="comment">// 创建 main.js 文件</span></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 创建一个可读流</span></div><div class="line"><span class="keyword">var</span> readerStream = fs.createReadStream(<span class="string">'input.txt'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 创建一个可写流</span></div><div class="line"><span class="keyword">var</span> writerStream = fs.createWriteStream(<span class="string">'output.txt'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 管道读写操作</span></div><div class="line"><span class="comment">// 读取 input.txt 文件内容，并将内容写入到 output.txt 文件中</span></div><div class="line">readerStream.pipe(writerStream);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"程序执行完毕"</span>);</div><div class="line"></div><div class="line"><span class="comment">// node main.js </span></div><div class="line">程序执行完毕</div><div class="line"></div><div class="line"><span class="comment">// 查看 output.txt 文件的内容</span></div><div class="line">cat output.txt </div><div class="line">菜鸟教程官网地址：www.runoob.com</div><div class="line">管道流操作实例</div></pre></td></tr></table></figure>
<h2 id="链式流"><a href="#链式流" class="headerlink" title="链式流"></a>链式流</h2><p>链式是通过连接输出流到另外一个流并创建多个流操作链的机制。链式流一般用于管道操作</p>
<p>用管道和链式来压缩和解压文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 当前目录下生成了 input.txt 的压缩文件 input.txt.gz</span></div><div class="line"><span class="comment">// 创建 compress.js 文件</span></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"><span class="keyword">var</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 压缩 input.txt 文件为 input.txt.gz</span></div><div class="line">fs.createReadStream(<span class="string">'input.txt'</span>)</div><div class="line">  .pipe(zlib.createGzip())</div><div class="line">  .pipe(fs.createWriteStream(<span class="string">'input.txt.gz'</span>));</div><div class="line">  </div><div class="line"><span class="built_in">console</span>.log(<span class="string">"文件压缩完成。"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 运行 node compress.js </span></div><div class="line">文件压缩完成。</div></pre></td></tr></table></figure>
<p>解压该文件，创建 decompress.js 文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"><span class="keyword">var</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 解压 input.txt.gz 文件为 input.txt</span></div><div class="line">fs.createReadStream(<span class="string">'input.txt.gz'</span>)</div><div class="line">  .pipe(zlib.createGunzip())</div><div class="line">  .pipe(fs.createWriteStream(<span class="string">'input.txt'</span>));</div><div class="line">  </div><div class="line"><span class="built_in">console</span>.log(<span class="string">"文件解压完成。"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 运行 node decompress.js </span></div><div class="line">文件解压完成。</div></pre></td></tr></table></figure>
<h1 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h1><p>为了让Node.js的文件可以相互调用，Node.js提供了一个简单的模块系统</p>
<p>Node.js 提供了 exports 和 require 两个对象</p>
<ul>
<li>exports 是模块公开的接口</li>
<li>require 用于从外部获取一个模块的接口，即所获取模块的 exports 对象</li>
</ul>
<h2 id="创建模块-1"><a href="#创建模块-1" class="headerlink" title="创建模块"></a>创建模块</h2><p>hello.js 通过 exports 对象把 world 作为模块的访问接口</p>
<p>main.js 中通过 require(‘./hello’) 加载这个模块</p>
<p>直接访 问 hello.js 中 exports 对象的成员函数</p>
<p>创建一个 main.js 文件</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span>  <span class="built_in">require</span>(<span class="string">'./hello'</span>) 引入了当前目录下的 hello.js 文件</div><div class="line">var hello = <span class="built_in">require</span>(<span class="string">'./hello'</span>);</div><div class="line">hello.world();</div></pre></td></tr></table></figure>
<p>创建 hello.js 文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">exports.world = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello World'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>把一个对象封装到模块中</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//hello.js </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="keyword">var</span> name; </div><div class="line">    <span class="keyword">this</span>.setName = <span class="function"><span class="keyword">function</span>(<span class="params">thyName</span>) </span>&#123; </div><div class="line">        name = thyName; </div><div class="line">    &#125;; </div><div class="line">    <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + name); </div><div class="line">    &#125;; </div><div class="line">&#125;; </div><div class="line"><span class="built_in">module</span>.exports = Hello;</div></pre></td></tr></table></figure>
<p>获得这个对象</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//main.js </span></div><div class="line"><span class="keyword">var</span> Hello = require(<span class="string">'./hello'</span>); </div><div class="line">hello = <span class="keyword">new</span> <span class="type">Hello</span>(); </div><div class="line">hello.setName(<span class="string">'BYVoid'</span>); </div><div class="line">hello.sayHello();</div></pre></td></tr></table></figure>
<h2 id="服务端的模块加载"><a href="#服务端的模块加载" class="headerlink" title="服务端的模块加载"></a>服务端的模块加载</h2><p>Node.js 的 require 方法中的文件查找策略:4 类模块(原生模块和3种文件模块)</p>
<p>从文件模块缓存中加载:尽管原生模块与文件模块的优先级不同，但是都会优先从文件模块的缓存中加载已经存在的模块</p>
<p>从原生模块加载:原生模块的优先级仅次于文件模块缓存的优先级。require 方法在解析文件名之后，优先检查模块是否在原生模块列表中</p>
<p>从文件加载:当文件模块缓存中不存在,而且不是原生模块的时候,Node.js会解析require方法传入的参数，并从文件系统中加载实际的文件</p>
<p>require方法接受以下几种参数的传递</p>
<ul>
<li>http、fs、path等，原生模块</li>
<li>./mod或../mod，相对路径的文件模块</li>
<li>/pathtomodule/mod，绝对路径的文件模块</li>
<li>mod，非原生模块的文件模块</li>
</ul>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>Node.js中函数的使用与Javascript类似</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">word</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(word);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params">someFunction, value</span>) </span>&#123;</div><div class="line">  someFunction(value);</div><div class="line">&#125;</div><div class="line"></div><div class="line">execute(say, <span class="string">"Hello"</span>);</div></pre></td></tr></table></figure>
<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>没有名字的函数叫做匿名函数</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span></span> execute(someFunction, <span class="keyword">value</span>) &#123;</div><div class="line">  someFunction(<span class="keyword">value</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">execute(<span class="function"><span class="keyword">function</span><span class="params">(word)</span></span>&#123; console.<span class="built_in">log</span>(word) &#125;, <span class="string">"Hello"</span>);</div></pre></td></tr></table></figure>
<h2 id="HTTP服务器工作机制"><a href="#HTTP服务器工作机制" class="headerlink" title="HTTP服务器工作机制"></a>HTTP服务器工作机制</h2><p>我们向 createServer 函数传递了一个匿名函数</p>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var http = require(<span class="string">"http"</span>);</div><div class="line"></div><div class="line">http.createServer(<span class="keyword">function</span>(<span class="built_in">request</span>, <span class="built_in">response</span>) &#123;</div><div class="line">  <span class="built_in">response</span>.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">  <span class="built_in">response</span>.write(<span class="string">"Hello World"</span>);</div><div class="line">  <span class="built_in">response</span>.<span class="keyword">end</span>();</div><div class="line">&#125;).listen(<span class="number">8888</span>);</div></pre></td></tr></table></figure>
<p>用这样的代码也可以达到同样的目的</p>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var http = require(<span class="string">"http"</span>);</div><div class="line"></div><div class="line"><span class="keyword">function</span> onRequest(<span class="built_in">request</span>, <span class="built_in">response</span>) &#123;</div><div class="line">  <span class="built_in">response</span>.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">  <span class="built_in">response</span>.write(<span class="string">"Hello World"</span>);</div><div class="line">  <span class="built_in">response</span>.<span class="keyword">end</span>();</div><div class="line">&#125;</div><div class="line"></div><div class="line">http.createServer(onRequest).listen(<span class="number">8888</span>);</div></pre></td></tr></table></figure>
<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>为路由提供请求的 URL 和其他需要的 GET 及 POST 参数，随后路由需要根据这些数据来执行相应的代码</p>
<p>所有数据都会包含在 request 对象中，该对象作为 onRequest() 回调函数的第一个参数传递</p>
<p>解析这些数据，需要Node.JS 模块，它们分别是 url 和 querystring 模块</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">如:http:<span class="comment">//localhost:8888/start?foo=bar&amp;hello=world</span></div><div class="line"></div><div class="line">url.<span class="built_in">parse</span>(<span class="keyword">string</span>).query <span class="comment">// foo=bar&amp;hello=world</span></div><div class="line">url.<span class="built_in">parse</span>(<span class="keyword">string</span>).pathname <span class="comment">// start</span></div><div class="line">querystring.<span class="built_in">parse</span>(queryString)[<span class="string">"foo"</span>] <span class="comment">// bar</span></div><div class="line">querystring.<span class="built_in">parse</span>(queryString)[<span class="string">"hello"</span>] <span class="comment">// world</span></div></pre></td></tr></table></figure>
<p>onRequest() 函数加上一些逻辑，用来找出浏览器请求的 URL 路径</p>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// server.js</span></div><div class="line"><span class="built_in">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="built_in">var</span> <span class="built_in">url</span> = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>) </span>&#123;</div><div class="line">    <span class="built_in">var</span> pathname = <span class="built_in">url</span>.parse(request.url).pathname;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>);</div><div class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">    response.write(<span class="string">"Hello World"</span>);</div><div class="line">    response.end();</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  http.createServer(onRequest).listen(<span class="number">8888</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Server has started."</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">exports.start = start;</div></pre></td></tr></table></figure>
<p>编写路由,新建router.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">route</span>(<span class="params">pathname</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"About to route a request for "</span> + pathname);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">exports.route = route;</div></pre></td></tr></table></figure>
<p>路由和服务器整合</p>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 扩展一下服务器的 start() 函数，以便将路由函数作为参数传递过去</span></div><div class="line"><span class="comment">// server.js 文件</span></div><div class="line"><span class="built_in">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="built_in">var</span> <span class="built_in">url</span> = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">route</span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>) </span>&#123;</div><div class="line">    <span class="built_in">var</span> pathname = <span class="built_in">url</span>.parse(request.url).pathname;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>);</div><div class="line"> </div><div class="line">    route(pathname);</div><div class="line"> </div><div class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">    response.write(<span class="string">"Hello World"</span>);</div><div class="line">    response.end();</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  http.createServer(onRequest).listen(<span class="number">8888</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Server has started."</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">exports.start = start;</div><div class="line"></div><div class="line"><span class="comment">// 相应扩展 index.js，使得路由函数可以被注入到服务器中</span></div><div class="line"><span class="comment">// index.js</span></div><div class="line"><span class="built_in">var</span> server = <span class="built_in">require</span>(<span class="string">"./server"</span>);</div><div class="line"><span class="built_in">var</span> router = <span class="built_in">require</span>(<span class="string">"./router"</span>);</div><div class="line"> </div><div class="line">server.start(router.route);</div><div class="line"></div><div class="line"><span class="comment">// 运行命令</span></div><div class="line">node index.js</div><div class="line">Server has started.</div></pre></td></tr></table></figure>
<h1 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h1><p>Node.js 中的全局对象是 global，所有全局变量都是 global 对象的属性</p>
<h2 id="filename"><a href="#filename" class="headerlink" title="__filename"></a>__filename</h2><p>当前正在执行的脚本的文件名,输出文件所在位置的绝对路径</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> main.js</div><div class="line"><span class="regexp">//</span> 输出全局变量 __filename 的值</div><div class="line">console.log( __filename );</div><div class="line"></div><div class="line"><span class="regexp">//</span> 运行命令行</div><div class="line">node main.js</div><div class="line"><span class="regexp">/web/</span>com<span class="regexp">/runoob/</span>nodejs<span class="regexp">/main.js</span></div></pre></td></tr></table></figure>
<h2 id="dirname"><a href="#dirname" class="headerlink" title="__dirname"></a>__dirname</h2><p>当前执行脚本所在的目录</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> main.js</div><div class="line"><span class="regexp">//</span> 输出全局变量 __dirname 的值</div><div class="line">console.log( __dirname );</div><div class="line"></div><div class="line"><span class="regexp">//</span> 运行命令行</div><div class="line">node main.js</div><div class="line"><span class="regexp">/web/</span>com<span class="regexp">/runoob/</span>nodejs</div></pre></td></tr></table></figure>
<h2 id="process"><a href="#process" class="headerlink" title="process"></a>process</h2><p>当前Node.js 进程状态的对象，提供了一个与操作系统的简单接口</p>
<p>常用的方法</p>
<ul>
<li>exit: 当进程准备退出时触发</li>
<li>beforeExit: 当 node 清空事件循环，并且没有其他安排时触发这个事件</li>
<li>uncaughtException: 当一个异常冒泡回到事件循环，触发这个事件</li>
<li>Signal事件: 当进程接收到信号时就触发</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.js</span></div><div class="line">process.on(<span class="string">'exit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">code</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 以下代码永远不会执行</span></div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"该代码不会执行"</span>);</div><div class="line">  &#125;, <span class="number">0</span>);</div><div class="line">  </div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'退出码为:'</span>, code);</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"程序执行结束"</span>);</div><div class="line"></div><div class="line">运行命令行 node main.js</div><div class="line">程序执行结束</div><div class="line">退出码为: <span class="number">0</span></div></pre></td></tr></table></figure>
<p>退出状态码</p>
<ul>
<li>1-Uncaught Fatal Exception:有未捕获异常，并且没有被域或 uncaughtException 处理函数处理</li>
<li>2-Unused:保留</li>
<li>3-Internal JavaScript Parse Error:JavaScript的源码启动 Node 进程时引起解析错误</li>
<li>4-Internal JavaScript Evaluation Failure:JavaScript 的源码启动 Node 进程，评估时返回函数失败</li>
<li>5-Fatal Error:V8 里致命的不可恢复的错误。通常会打印到 stderr ，内容为： FATAL ERROR</li>
<li>6-Non-function Internal Exception Handler:未捕获异常，内部异常处理函数不知为何设置为on-function，并且不能被调用</li>
<li>7-Internal Exception Handler Run-Time Failure:未捕获的异常， 并且异常处理函数处理时自己抛出了异常</li>
<li>8-Unused:保留</li>
<li>9-Invalid Argument:可能是给了未知的参数，或者给的参数没有值</li>
<li>10-Internal JavaScript Run-Time Failure:JavaScript的源码启动 Node 进程时抛出错误</li>
<li>12-Invalid Debug Argument:设置了参数–debug 和/或 –debug-brk，但是选择了错误端口</li>
<li>128-Signal Exits:如果 Node 接收到致命信号，比如SIGKILL 或 SIGHUP，那么退出代码就是128 加信号代码</li>
</ul>
<p>Process 属性</p>
<p>Process 提供了很多有用的属性，便于我们更好的控制系统的交互(查文档)</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// main.js</div><div class="line">// 输出到终端</div><div class="line">process.stdout.<span class="keyword">write</span>(<span class="string">"Hello World!"</span> + <span class="string">"\n"</span>);</div><div class="line"></div><div class="line">// 通过参数读取</div><div class="line">process.argv.forEach(function(val, index, array) &#123;</div><div class="line">   console.log(index + ': ' + val);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 获取执行路径</div><div class="line">console.log(process.execPath);</div><div class="line"></div><div class="line"></div><div class="line">// 平台信息</div><div class="line">console.log(process.platform);</div><div class="line"></div><div class="line">// 运行命令行</div><div class="line"><span class="keyword">node</span> <span class="title">main</span>.js</div><div class="line">Hello World!</div><div class="line"><span class="number">0</span>: <span class="keyword">node</span></div><div class="line">1:<span class="title"> /web</span>/www/<span class="keyword">node</span><span class="title">/main</span>.js</div><div class="line">/usr/local/<span class="keyword">node</span><span class="title">/0</span>.<span class="number">10.36</span>/bin/<span class="keyword">node</span></div><div class="line"><span class="title">darwin</span></div></pre></td></tr></table></figure>
<h1 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h1><p>util 是一个Node.js 核心模块，提供常用函数的集合</p>
<h2 id="util-inherits"><a href="#util-inherits" class="headerlink" title="util.inherits"></a>util.inherits</h2><p>util.inherits(constructor, superConstructor)是一个实现对象间原型继承 的函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义了一个基础对象Base 和一个继承自Base 的Sub，Base 有三个在构造函数 内定义的属性和一个原型中定义的函数，通过util.inherits 实现继承</span></div><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>); </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base</span>(<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="keyword">this</span>.name = <span class="string">'base'</span>; </div><div class="line">    <span class="keyword">this</span>.base = <span class="number">1991</span>; </div><div class="line">    <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + <span class="keyword">this</span>.name); </div><div class="line">    &#125;; </div><div class="line">&#125; </div><div class="line">Base.prototype.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;; </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="keyword">this</span>.name = <span class="string">'sub'</span>; </div><div class="line">&#125; </div><div class="line">util.inherits(Sub, Base); </div><div class="line"><span class="keyword">var</span> objBase = <span class="keyword">new</span> Base(); </div><div class="line">objBase.showName(); </div><div class="line">objBase.sayHello(); </div><div class="line"><span class="built_in">console</span>.log(objBase); </div><div class="line"><span class="keyword">var</span> objSub = <span class="keyword">new</span> Sub(); </div><div class="line">objSub.showName(); </div><div class="line"><span class="comment">//objSub.sayHello(); </span></div><div class="line"><span class="built_in">console</span>.log(objSub); </div><div class="line"></div><div class="line"><span class="comment">// 运行命令行 </span></div><div class="line">base </div><div class="line">Hello base </div><div class="line">&#123; <span class="attr">name</span>: <span class="string">'base'</span>, <span class="attr">base</span>: <span class="number">1991</span>, <span class="attr">sayHello</span>: [<span class="built_in">Function</span>] &#125; </div><div class="line">sub </div><div class="line">&#123; <span class="attr">name</span>: <span class="string">'sub'</span> &#125;</div></pre></td></tr></table></figure>
<h2 id="util-inspect"><a href="#util-inspect" class="headerlink" title="util.inspect"></a>util.inspect</h2><p>util.inspect(object,[showHidden],[depth],[colors])是一个将任意对象转换 为字符串的方法，通常用于调试和错误输出</p>
<p>至少接受一个参数 object，即要转换的对象</p>
<p>showHidden 是一个可选参数，如果值为 true，将会输出更多隐藏信息</p>
<p>depth 表示最大递归的层数，如果对象很复杂，你可以指定层数以控制输出信息的多少,默认2层</p>
<p>color 值为 true，输出格式将会以ANSI 颜色编码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>); </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="keyword">this</span>.name = <span class="string">'byvoid'</span>; </div><div class="line">    <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name; </div><div class="line">    &#125;; </div><div class="line">&#125; </div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Person(); </div><div class="line"><span class="built_in">console</span>.log(util.inspect(obj)); </div><div class="line"><span class="built_in">console</span>.log(util.inspect(obj, <span class="literal">true</span>)); </div><div class="line"></div><div class="line"><span class="comment">//运行命令行</span></div><div class="line">Person &#123; <span class="attr">name</span>: <span class="string">'byvoid'</span>, <span class="attr">toString</span>: [<span class="built_in">Function</span>] &#125;</div><div class="line">Person &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'byvoid'</span>,</div><div class="line">  <span class="attr">toString</span>: </div><div class="line">   &#123; [<span class="built_in">Function</span>]</div><div class="line">     [length]: <span class="number">0</span>,</div><div class="line">     [name]: <span class="string">''</span>,</div><div class="line">     [<span class="built_in">arguments</span>]: <span class="literal">null</span>,</div><div class="line">     [caller]: <span class="literal">null</span>,</div><div class="line">     [prototype]: &#123; [<span class="keyword">constructor</span>]: [Circular] &#125; &#125; &#125;</div></pre></td></tr></table></figure>
<h2 id="util-isArray-object"><a href="#util-isArray-object" class="headerlink" title="util.isArray(object)"></a>util.isArray(object)</h2><p>如果给定的参数 “object” 是一个数组返回true，否则返回false</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"></div><div class="line">util.isArray([])</div><div class="line">  <span class="comment">// true</span></div><div class="line">util.isArray(<span class="keyword">new</span> <span class="built_in">Array</span>)</div><div class="line">  <span class="comment">// true</span></div><div class="line">util.isArray(&#123;&#125;)</div><div class="line">  <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h2 id="util-isRegExp-object"><a href="#util-isRegExp-object" class="headerlink" title="util.isRegExp(object)"></a>util.isRegExp(object)</h2><p>如果给定的参数 “object” 是一个正则表达式返回true，否则返回false</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"></div><div class="line">util.isRegExp(<span class="regexp">/some regexp/</span>)</div><div class="line">  <span class="comment">// true</span></div><div class="line">util.isRegExp(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'another regexp'</span>))</div><div class="line">  <span class="comment">// true</span></div><div class="line">util.isRegExp(&#123;&#125;)</div><div class="line">  <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h2 id="util-isDate-object"><a href="#util-isDate-object" class="headerlink" title="util.isDate(object)"></a>util.isDate(object)</h2><p>如果给定的参数 “object” 是一个日期返回true，否则返回false</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"></div><div class="line">util.isDate(<span class="keyword">new</span> <span class="built_in">Date</span>())</div><div class="line">  <span class="comment">// true</span></div><div class="line">util.isDate(<span class="built_in">Date</span>())</div><div class="line">  <span class="comment">// false (without 'new' returns a String)</span></div><div class="line">util.isDate(&#123;&#125;)</div><div class="line">  <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h2 id="util-isError-object"><a href="#util-isError-object" class="headerlink" title="util.isError(object)"></a>util.isError(object)</h2><p>如果给定的参数 “object” 是一个错误对象返回true，否则返回false</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"></div><div class="line">util.isError(<span class="keyword">new</span> <span class="built_in">Error</span>())</div><div class="line">  <span class="comment">// true</span></div><div class="line">util.isError(<span class="keyword">new</span> <span class="built_in">TypeError</span>())</div><div class="line">  <span class="comment">// true</span></div><div class="line">util.isError(&#123; <span class="attr">name</span>: <span class="string">'Error'</span>, <span class="attr">message</span>: <span class="string">'an error occurred'</span> &#125;)</div><div class="line">  <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><p>Node.js 提供一组类似 UNIX（POSIX）标准的文件操作API</p>
<p>Node 导入文件系统模块(fs)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>)</div></pre></td></tr></table></figure>
<h2 id="异步和同步"><a href="#异步和同步" class="headerlink" title="异步和同步"></a>异步和同步</h2><p>Node.js 文件系统（fs 模块）模块中的方法均有异步和同步版本</p>
<p>读取文件内容的函数有异步的 fs.readFile() 和同步的 fs.readFileSync()</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建 input.txt 文件</span></div><div class="line">菜鸟教程官网地址：www.runoob.com</div><div class="line">文件读取实例</div><div class="line"></div><div class="line"><span class="comment">// 创建 file.js 文件</span></div><div class="line"><span class="keyword">var</span> fs = require(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 异步读取</span></div><div class="line">fs.readFile('<span class="keyword">input</span>.txt', function (<span class="keyword">err</span>, data) &#123;</div><div class="line">   <span class="keyword">if</span> (<span class="keyword">err</span>) &#123;</div><div class="line">       <span class="keyword">return</span> console.<span class="keyword">error</span>(<span class="keyword">err</span>);</div><div class="line">   &#125;</div><div class="line">   console.<span class="built_in">log</span>(<span class="string">"异步读取: "</span> + data.<span class="keyword">toString</span>());</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 同步读取</span></div><div class="line"><span class="keyword">var</span> data = fs.readFileSync('<span class="keyword">input</span>.txt');</div><div class="line">console.<span class="built_in">log</span>(<span class="string">"同步读取: "</span> + data.<span class="keyword">toString</span>());</div><div class="line"></div><div class="line">console.<span class="built_in">log</span>(<span class="string">"程序执行完毕。"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 运行命令行</span></div><div class="line">node <span class="keyword">file</span>.js </div><div class="line">同步读取: 菜鸟教程官网地址：www.runoob.com</div><div class="line">文件读取实例</div><div class="line"></div><div class="line">程序执行完毕。</div><div class="line">异步读取: 菜鸟教程官网地址：www.runoob.com</div><div class="line">文件读取实例</div></pre></td></tr></table></figure>
<h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><p>fs.open(path, flags[, mode], callback)</p>
<ul>
<li>path - 文件的路径</li>
<li>flags - 文件打开的行为。具体值详见下文</li>
<li>mode - 设置文件模式(权限)，文件创建默认权限为 0666(可读，可写)</li>
<li>callback - 回调函数，带有两个参数如：callback(err, fd)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建 file.js 文件，并打开 input.txt 文件进行读写</span></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 异步打开文件</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"准备打开文件！"</span>);</div><div class="line">fs.open(<span class="string">'input.txt'</span>, <span class="string">'r+'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, fd</span>) </span>&#123;</div><div class="line">   <span class="keyword">if</span> (err) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</div><div class="line">   &#125;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"文件打开成功！"</span>);     </div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 运行命令行</span></div><div class="line">node file.js </div><div class="line">准备打开文件！</div><div class="line">文件打开成功！</div></pre></td></tr></table></figure>
<h2 id="获取文件信息"><a href="#获取文件信息" class="headerlink" title="获取文件信息"></a>获取文件信息</h2><p>fs.stat(path, callback)</p>
<ul>
<li>path - 文件路径</li>
<li>callback - 回调函数，带有两个参数如：(err, stats), stats 是 fs.Stats 对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建 file.js</span></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"准备打开文件！"</span>);</div><div class="line">fs.stat(<span class="string">'input.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, stats</span>) </span>&#123;</div><div class="line">   <span class="keyword">if</span> (err) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</div><div class="line">   &#125;</div><div class="line">   <span class="built_in">console</span>.log(stats);</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">"读取文件信息成功！"</span>);</div><div class="line">   </div><div class="line">   <span class="comment">// 检测文件类型</span></div><div class="line">   <span class="built_in">console</span>.log(<span class="string">"是否为文件(isFile) ? "</span> + stats.isFile());</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">"是否为目录(isDirectory) ? "</span> + stats.isDirectory());    </div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 运行命令行</span></div><div class="line">node file.js </div><div class="line">准备打开文件！</div><div class="line">&#123; <span class="attr">dev</span>: <span class="number">16777220</span>,</div><div class="line">  <span class="attr">mode</span>: <span class="number">33188</span>,</div><div class="line">  <span class="attr">nlink</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">uid</span>: <span class="number">501</span>,</div><div class="line">  <span class="attr">gid</span>: <span class="number">20</span>,</div><div class="line">  <span class="attr">rdev</span>: <span class="number">0</span>,</div><div class="line">  <span class="attr">blksize</span>: <span class="number">4096</span>,</div><div class="line">  <span class="attr">ino</span>: <span class="number">40333161</span>,</div><div class="line">  <span class="attr">size</span>: <span class="number">61</span>,</div><div class="line">  <span class="attr">blocks</span>: <span class="number">8</span>,</div><div class="line">  <span class="attr">atime</span>: Mon Sep <span class="number">07</span> <span class="number">2015</span> <span class="number">17</span>:<span class="number">43</span>:<span class="number">55</span> GMT+<span class="number">0800</span> (CST),</div><div class="line">  <span class="attr">mtime</span>: Mon Sep <span class="number">07</span> <span class="number">2015</span> <span class="number">17</span>:<span class="number">22</span>:<span class="number">35</span> GMT+<span class="number">0800</span> (CST),</div><div class="line">  <span class="attr">ctime</span>: Mon Sep <span class="number">07</span> <span class="number">2015</span> <span class="number">17</span>:<span class="number">22</span>:<span class="number">35</span> GMT+<span class="number">0800</span> (CST) &#125;</div><div class="line">读取文件信息成功！</div><div class="line">是否为文件(isFile) ? <span class="literal">true</span></div><div class="line">是否为目录(isDirectory) ? <span class="literal">false</span></div></pre></td></tr></table></figure>
<h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><p>fs.writeFile(file, data[, options], callback)</p>
<ul>
<li>file - 文件名或文件描述符</li>
<li>data - 要写入文件的数据，可以是 String(字符串) 或 Buffer(流) 对象</li>
<li>options - 该参数是一个对象，包含 {encoding, mode, flag}。默认编码为 utf8,模式为 0666 ， flag 为 ‘w’</li>
<li>callback - 回调函数，回调函数只包含错误信息参数(err)，在写入失败时返回</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建 file.js</span></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"准备写入文件"</span>);</div><div class="line">fs.writeFile(<span class="string">'input.txt'</span>, <span class="string">'我是通 过fs.writeFile 写入文件的内容'</span>,  <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">   <span class="keyword">if</span> (err) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</div><div class="line">   &#125;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">"数据写入成功！"</span>);</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">"--------我是分割线-------------"</span>)</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">"读取写入的数据！"</span>);</div><div class="line">   fs.readFile(<span class="string">'input.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (err) &#123;</div><div class="line">         <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</div><div class="line">      &#125;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"异步读取文件数据: "</span> + data.toString());</div><div class="line">   &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 运行命令行</span></div><div class="line">node file.js </div><div class="line">准备写入文件</div><div class="line">数据写入成功！</div><div class="line">--------我是分割线-------------</div><div class="line">读取写入的数据！</div><div class="line">异步读取文件数据: 我是通 过fs.writeFile 写入文件的内容</div></pre></td></tr></table></figure>
<h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><p>fs.read(fd, buffer, offset, length, position, callback)</p>
<ul>
<li>fd - 通过 fs.open() 方法返回的文件描述符</li>
<li>buffer - 数据写入的缓冲区</li>
<li>offset - 缓冲区写入的写入偏移量</li>
<li>length - 要从文件中读取的字节数</li>
<li>position - 文件读取的起始位置，如果 position 的值为 null，则会从当前文件指针的位置读取</li>
<li>callback - 回调函数，有三个参数err, bytesRead, buffer，err 为错误信息， bytesRead 表示读取的字节数，buffer 为缓冲区对象</li>
</ul>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// input.txt 文件内容</span></div><div class="line">菜鸟教程官网地址：www.runoob.com</div><div class="line"></div><div class="line"><span class="comment">// 创建 file.js 文件</span></div><div class="line"><span class="keyword">var</span> fs = require(<span class="string">"fs"</span>);</div><div class="line"><span class="keyword">var</span> buf = new Buffer.alloc(1024);</div><div class="line"></div><div class="line">console.<span class="built_in">log</span>(<span class="string">"准备打开已存在的文件！"</span>);</div><div class="line">fs.<span class="keyword">open</span>('<span class="keyword">input</span>.txt', 'r+', function(<span class="keyword">err</span>, fd) &#123;</div><div class="line">   <span class="keyword">if</span> (<span class="keyword">err</span>) &#123;</div><div class="line">       <span class="keyword">return</span> console.<span class="keyword">error</span>(<span class="keyword">err</span>);</div><div class="line">   &#125;</div><div class="line">   console.<span class="built_in">log</span>(<span class="string">"文件打开成功！"</span>);</div><div class="line">   console.<span class="built_in">log</span>(<span class="string">"准备读取文件："</span>);</div><div class="line">   fs.<span class="keyword">read</span>(fd, buf, 0, buf.length, 0, function(<span class="keyword">err</span>, bytes)&#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">err</span>)&#123;</div><div class="line">         console.<span class="built_in">log</span>(<span class="keyword">err</span>);</div><div class="line">      &#125;</div><div class="line">      console.<span class="built_in">log</span>(bytes + <span class="string">"  字节被读取"</span>);</div><div class="line">      </div><div class="line">      <span class="comment">// 仅输出读取的字节</span></div><div class="line">      <span class="keyword">if</span>(bytes &gt; 0)&#123;</div><div class="line">         console.<span class="built_in">log</span>(buf.slice(0, bytes).<span class="keyword">toString</span>());</div><div class="line">      &#125;</div><div class="line">   &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 运行命令行</span></div><div class="line">node <span class="keyword">file</span>.js </div><div class="line">准备打开已存在的文件！</div><div class="line">文件打开成功！</div><div class="line">准备读取文件：</div><div class="line">42  字节被读取</div><div class="line">菜鸟教程官网地址：www.runoob.com</div></pre></td></tr></table></figure>
<h2 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h2><p>fs.close(fd, callback)</p>
<ul>
<li>fd - 通过 fs.open() 方法返回的文件描述符</li>
<li>callback - 回调函数，没有参数</li>
</ul>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// input.txt</span></div><div class="line">菜鸟教程官网地址：www.runoob.com</div><div class="line"></div><div class="line"><span class="comment">// 创建 file.js 文件</span></div><div class="line"><span class="keyword">var</span> fs = require(<span class="string">"fs"</span>);</div><div class="line"><span class="keyword">var</span> buf = new Buffer.alloc(1024);</div><div class="line"></div><div class="line">console.<span class="built_in">log</span>(<span class="string">"准备打开文件！"</span>);</div><div class="line">fs.<span class="keyword">open</span>('<span class="keyword">input</span>.txt', 'r+', function(<span class="keyword">err</span>, fd) &#123;</div><div class="line">   <span class="keyword">if</span> (<span class="keyword">err</span>) &#123;</div><div class="line">       <span class="keyword">return</span> console.<span class="keyword">error</span>(<span class="keyword">err</span>);</div><div class="line">   &#125;</div><div class="line">   console.<span class="built_in">log</span>(<span class="string">"文件打开成功！"</span>);</div><div class="line">   console.<span class="built_in">log</span>(<span class="string">"准备读取文件！"</span>);</div><div class="line">   fs.<span class="keyword">read</span>(fd, buf, 0, buf.length, 0, function(<span class="keyword">err</span>, bytes)&#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">err</span>)&#123;</div><div class="line">         console.<span class="built_in">log</span>(<span class="keyword">err</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// 仅输出读取的字节</span></div><div class="line">      <span class="keyword">if</span>(bytes &gt; 0)&#123;</div><div class="line">         console.<span class="built_in">log</span>(buf.slice(0, bytes).<span class="keyword">toString</span>());</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// 关闭文件</span></div><div class="line">      fs.<span class="keyword">close</span>(fd, function(<span class="keyword">err</span>)&#123;</div><div class="line">         <span class="keyword">if</span> (<span class="keyword">err</span>)&#123;</div><div class="line">            console.<span class="built_in">log</span>(<span class="keyword">err</span>);</div><div class="line">         &#125; </div><div class="line">         console.<span class="built_in">log</span>(<span class="string">"文件关闭成功"</span>);</div><div class="line">      &#125;);</div><div class="line">   &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 运行命令行</span></div><div class="line">node <span class="keyword">file</span>.js </div><div class="line">准备打开文件！</div><div class="line">文件打开成功！</div><div class="line">准备读取文件！</div><div class="line">菜鸟教程官网地址：www.runoob.com</div><div class="line">文件关闭成功</div></pre></td></tr></table></figure>
<h2 id="截取文件"><a href="#截取文件" class="headerlink" title="截取文件"></a>截取文件</h2><p>fs.ftruncate(fd, len, callback)</p>
<ul>
<li>fd - 通过 fs.open() 方法返回的文件描述符</li>
<li>len - 文件内容截取的长度</li>
<li>callback - 回调函数，没有参数</li>
</ul>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// input.txt</span></div><div class="line">site:www.runoob.com</div><div class="line"></div><div class="line"><span class="comment">// file.js</span></div><div class="line"><span class="keyword">var</span> fs = require(<span class="string">"fs"</span>);</div><div class="line"><span class="keyword">var</span> buf = new Buffer.alloc(1024);</div><div class="line"></div><div class="line">console.<span class="built_in">log</span>(<span class="string">"准备打开文件！"</span>);</div><div class="line">fs.<span class="keyword">open</span>('<span class="keyword">input</span>.txt', 'r+', function(<span class="keyword">err</span>, fd) &#123;</div><div class="line">   <span class="keyword">if</span> (<span class="keyword">err</span>) &#123;</div><div class="line">       <span class="keyword">return</span> console.<span class="keyword">error</span>(<span class="keyword">err</span>);</div><div class="line">   &#125;</div><div class="line">   console.<span class="built_in">log</span>(<span class="string">"文件打开成功！"</span>);</div><div class="line">   console.<span class="built_in">log</span>(<span class="string">"截取了10字节后的文件内容。"</span>);</div><div class="line">   </div><div class="line">   <span class="comment">// 截取文件</span></div><div class="line">   fs.ftruncate(fd, 10, function(<span class="keyword">err</span>)&#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">err</span>)&#123;</div><div class="line">         console.<span class="built_in">log</span>(<span class="keyword">err</span>);</div><div class="line">      &#125; </div><div class="line">      console.<span class="built_in">log</span>(<span class="string">"文件截取成功。"</span>);</div><div class="line">      console.<span class="built_in">log</span>(<span class="string">"读取相同的文件"</span>); </div><div class="line">      fs.<span class="keyword">read</span>(fd, buf, 0, buf.length, 0, function(<span class="keyword">err</span>, bytes)&#123;</div><div class="line">         <span class="keyword">if</span> (<span class="keyword">err</span>)&#123;</div><div class="line">            console.<span class="built_in">log</span>(<span class="keyword">err</span>);</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="comment">// 仅输出读取的字节</span></div><div class="line">         <span class="keyword">if</span>(bytes &gt; 0)&#123;</div><div class="line">            console.<span class="built_in">log</span>(buf.slice(0, bytes).<span class="keyword">toString</span>());</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="comment">// 关闭文件</span></div><div class="line">         fs.<span class="keyword">close</span>(fd, function(<span class="keyword">err</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">err</span>)&#123;</div><div class="line">               console.<span class="built_in">log</span>(<span class="keyword">err</span>);</div><div class="line">            &#125; </div><div class="line">            console.<span class="built_in">log</span>(<span class="string">"文件关闭成功！"</span>);</div><div class="line">         &#125;);</div><div class="line">      &#125;);</div><div class="line">   &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 运行命令行</span></div><div class="line">node <span class="keyword">file</span>.js </div><div class="line">准备打开文件！</div><div class="line">文件打开成功！</div><div class="line">截取了10字节后的文件内容。</div><div class="line">文件截取成功。</div><div class="line">读取相同的文件</div><div class="line">site:www.<span class="built_in">r</span></div><div class="line">文件关闭成功</div></pre></td></tr></table></figure>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>fs.unlink(path, callback)</p>
<ul>
<li>path - 文件路径</li>
<li>callback - 回调函数，没有参数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// input.txt</span></div><div class="line">site:www.runoob.com</div><div class="line"></div><div class="line"><span class="comment">// 创建 file.js</span></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"准备删除文件！"</span>);</div><div class="line">fs.unlink(<span class="string">'input.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">   <span class="keyword">if</span> (err) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</div><div class="line">   &#125;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">"文件删除成功！"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 运行命令行</span></div><div class="line">node file.js </div><div class="line">准备删除文件！</div><div class="line">文件删除成功！</div></pre></td></tr></table></figure>
<h2 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h2><p>fs.mkdir(path[, mode], callback)</p>
<ul>
<li>path - 文件路径</li>
<li>mode - 设置目录权限，默认为 0777</li>
<li>callback - 回调函数，没有参数</li>
</ul>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = require(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line">console.<span class="built_in">log</span>(<span class="string">"创建目录 /tmp/test/"</span>);</div><div class="line">fs.<span class="keyword">mkdir</span>(<span class="string">"/tmp/test/"</span>,function(<span class="keyword">err</span>)&#123;</div><div class="line">   <span class="keyword">if</span> (<span class="keyword">err</span>) &#123;</div><div class="line">       <span class="keyword">return</span> console.<span class="keyword">error</span>(<span class="keyword">err</span>);</div><div class="line">   &#125;</div><div class="line">   console.<span class="built_in">log</span>(<span class="string">"目录创建成功。"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 运行命令行</span></div><div class="line">node <span class="keyword">file</span>.js </div><div class="line">创建目录 /tmp/<span class="keyword">test</span>/</div><div class="line">目录创建成功。</div></pre></td></tr></table></figure>
<h2 id="读取目录"><a href="#读取目录" class="headerlink" title="读取目录"></a>读取目录</h2><p>fs.readdir(path, callback)</p>
<ul>
<li>path - 文件路径</li>
<li>callback - 回调函数，回调函数带有两个参数err, files，err 为错误信息，files 为 目录下的文件数组列表</li>
</ul>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建file.js</span></div><div class="line"><span class="keyword">var</span> fs = require(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line">console.<span class="built_in">log</span>(<span class="string">"查看 /tmp 目录"</span>);</div><div class="line">fs.readdir(<span class="string">"/tmp/"</span>,function(<span class="keyword">err</span>, files)&#123;</div><div class="line">   <span class="keyword">if</span> (<span class="keyword">err</span>) &#123;</div><div class="line">       <span class="keyword">return</span> console.<span class="keyword">error</span>(<span class="keyword">err</span>);</div><div class="line">   &#125;</div><div class="line">   files.<span class="keyword">forEach</span>( function (<span class="keyword">file</span>)&#123;</div><div class="line">       console.<span class="built_in">log</span>( <span class="keyword">file</span> );</div><div class="line">   &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 运行命令行</span></div><div class="line">node <span class="keyword">file</span>.js </div><div class="line">查看 /tmp 目录</div><div class="line"><span class="keyword">input</span>.<span class="keyword">out</span></div><div class="line">output.<span class="keyword">out</span></div><div class="line"><span class="keyword">test</span></div><div class="line"><span class="keyword">test</span>.txt</div></pre></td></tr></table></figure>
<h2 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h2><p>fs.rmdir(path, callback)</p>
<ul>
<li>path - 文件路径</li>
<li>callback - 回调函数，没有参数</li>
</ul>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建file.js</span></div><div class="line"><span class="keyword">var</span> fs = require(<span class="string">"fs"</span>);</div><div class="line"><span class="comment">// 执行前创建一个空的 /tmp/test 目录</span></div><div class="line">console.<span class="built_in">log</span>(<span class="string">"准备删除目录 /tmp/test"</span>);</div><div class="line">fs.<span class="keyword">rmdir</span>(<span class="string">"/tmp/test"</span>,function(<span class="keyword">err</span>)&#123;</div><div class="line">   <span class="keyword">if</span> (<span class="keyword">err</span>) &#123;</div><div class="line">       <span class="keyword">return</span> console.<span class="keyword">error</span>(<span class="keyword">err</span>);</div><div class="line">   &#125;</div><div class="line">   console.<span class="built_in">log</span>(<span class="string">"读取 /tmp 目录"</span>);</div><div class="line">   fs.readdir(<span class="string">"/tmp/"</span>,function(<span class="keyword">err</span>, files)&#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">err</span>) &#123;</div><div class="line">          <span class="keyword">return</span> console.<span class="keyword">error</span>(<span class="keyword">err</span>);</div><div class="line">      &#125;</div><div class="line">      files.<span class="keyword">forEach</span>( function (<span class="keyword">file</span>)&#123;</div><div class="line">          console.<span class="built_in">log</span>( <span class="keyword">file</span> );</div><div class="line">      &#125;);</div><div class="line">   &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 运行命令行</span></div><div class="line">node <span class="keyword">file</span>.js </div><div class="line">准备删除目录 /tmp/<span class="keyword">test</span></div><div class="line">读取 /tmp 目录</div><div class="line">……</div></pre></td></tr></table></figure>
<h1 id="GET-POST请求"><a href="#GET-POST请求" class="headerlink" title="GET/POST请求"></a>GET/POST请求</h1><p>表单提交到服务器一般都使用 GET/POST 请求</p>
<h2 id="获取GET请求内容"><a href="#获取GET请求内容" class="headerlink" title="获取GET请求内容"></a>获取GET请求内容</h2><p>node.js 中 url 模块中的 parse 函数提供了这个功能</p>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在浏览器中访问 http://localhost:3000/user?name=菜鸟教程&amp;url=www.runoob.com 然后查看返回结果</span></div><div class="line"><span class="built_in">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="built_in">var</span> <span class="built_in">url</span> = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"><span class="built_in">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"> </div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">    res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain; charset=utf-8'</span>&#125;);</div><div class="line">    res.end(util.inspect(<span class="built_in">url</span>.parse(req.url, <span class="literal">true</span>)));</div><div class="line">&#125;).listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
<p>使用 url.parse 方法来解析 URL 中的参数</p>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在浏览器中访问 http://localhost:3000/user?name=菜鸟教程&amp;url=www.runoob.com 然后查看返回结果</span></div><div class="line"><span class="built_in">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="built_in">var</span> <span class="built_in">url</span> = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"><span class="built_in">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"> </div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">    res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</div><div class="line"> </div><div class="line">    <span class="comment">// 解析 url 参数</span></div><div class="line">    <span class="built_in">var</span> params = <span class="built_in">url</span>.parse(req.url, <span class="literal">true</span>).query;</div><div class="line">    res.write(<span class="string">"网站名："</span> + params.name);</div><div class="line">    res.write(<span class="string">"\n"</span>);</div><div class="line">    res.write(<span class="string">"网站 URL："</span> + params.url);</div><div class="line">    res.end();</div><div class="line"> </div><div class="line">&#125;).listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
<h2 id="获取-POST-请求内容"><a href="#获取-POST-请求内容" class="headerlink" title="获取 POST 请求内容"></a>获取 POST 请求内容</h2><p>POST 请求的内容全部的都在请求体中，http.ServerRequest 并没有一个属性内容为请求体</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// node.js 默认是不会解析请求体的，当你需要的时候，需要手动来做</span></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</div><div class="line"> </div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">    <span class="comment">// 定义了一个post变量，用于暂存请求体的信息</span></div><div class="line">    <span class="keyword">var</span> post = <span class="string">''</span>;     </div><div class="line"> </div><div class="line">    <span class="comment">// 通过req的data事件监听函数，每当接受到请求体的数据，就累加到post变量中</span></div><div class="line">    req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;    </div><div class="line">        post += chunk;</div><div class="line">    &#125;);</div><div class="line"> </div><div class="line">    <span class="comment">// 在end事件触发后，通过querystring.parse将post解析为真正的POST请求格式，然后向客户端返回。</span></div><div class="line">    req.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    </div><div class="line">        post = querystring.parse(post);</div><div class="line">        res.end(util.inspect(post));</div><div class="line">    &#125;);</div><div class="line">&#125;).listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
<p>实例表单通过 POST 提交并输出数据</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</div><div class="line"> </div><div class="line"><span class="keyword">var</span> postHTML = </div><div class="line">  <span class="string">'&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;title&gt;菜鸟教程 Node.js 实例&lt;/title&gt;&lt;/head&gt;'</span> +</div><div class="line">  <span class="string">'&lt;body&gt;'</span> +</div><div class="line">  <span class="string">'&lt;form method="post"&gt;'</span> +</div><div class="line">  <span class="string">'网站名： &lt;input name="name"&gt;&lt;br&gt;'</span> +</div><div class="line">  <span class="string">'网站 URL： &lt;input name="url"&gt;&lt;br&gt;'</span> +</div><div class="line">  <span class="string">'&lt;input type="submit"&gt;'</span> +</div><div class="line">  <span class="string">'&lt;/form&gt;'</span> +</div><div class="line">  <span class="string">'&lt;/body&gt;&lt;/html&gt;'</span>;</div><div class="line"> </div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> body = <span class="string">""</span>;</div><div class="line">  req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">    body += chunk;</div><div class="line">  &#125;);</div><div class="line">  req.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 解析参数</span></div><div class="line">    body = querystring.parse(body);</div><div class="line">    <span class="comment">// 设置响应头部信息及编码</span></div><div class="line">    res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf8'</span>&#125;);</div><div class="line"> </div><div class="line">    <span class="keyword">if</span>(body.name &amp;&amp; body.url) &#123; <span class="comment">// 输出提交的数据</span></div><div class="line">        res.write(<span class="string">"网站名："</span> + body.name);</div><div class="line">        res.write(<span class="string">"&lt;br&gt;"</span>);</div><div class="line">        res.write(<span class="string">"网站 URL："</span> + body.url);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 输出表单</span></div><div class="line">        res.write(postHTML);</div><div class="line">    &#125;</div><div class="line">    res.end();</div><div class="line">  &#125;);</div><div class="line">&#125;).listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
<h1 id="工具模块"><a href="#工具模块" class="headerlink" title="工具模块"></a>工具模块</h1><h2 id="OS模块"><a href="#OS模块" class="headerlink" title="OS模块"></a>OS模块</h2><p>提供了一些基本的系统操作函数</p>
<p>var os = require(“os”)</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.js文件</span></div><div class="line"><span class="built_in">var</span> os = <span class="keyword">require</span>(<span class="string">"os"</span>);</div><div class="line"></div><div class="line"><span class="comment">// CPU 的字节序</span></div><div class="line">console.<span class="keyword">log</span>(<span class="string">'endianness : '</span> + os.endianness());</div><div class="line"></div><div class="line"><span class="comment">// 操作系统名</span></div><div class="line">console.<span class="keyword">log</span>(<span class="string">'type : '</span> + os.<span class="keyword">type</span>());</div><div class="line"></div><div class="line"><span class="comment">// 操作系统名</span></div><div class="line">console.<span class="keyword">log</span>(<span class="string">'platform : '</span> + os.platform());</div><div class="line"></div><div class="line"><span class="comment">// 系统内存总量</span></div><div class="line">console.<span class="keyword">log</span>(<span class="string">'total memory : '</span> + os.totalmem() + <span class="string">" bytes."</span>);</div><div class="line"></div><div class="line"><span class="comment">// 操作系统空闲内存量</span></div><div class="line">console.<span class="keyword">log</span>(<span class="string">'free memory : '</span> + os.freemem() + <span class="string">" bytes."</span>);</div><div class="line"></div><div class="line"><span class="comment">// 运行命令行</span></div><div class="line">node main.js </div><div class="line">endianness : LE</div><div class="line"><span class="keyword">type</span> : Linux</div><div class="line">platform : linux</div><div class="line">total memory : <span class="number">25103400960</span> <span class="built_in">bytes</span>.</div><div class="line">free memory : <span class="number">20676710400</span> <span class="built_in">bytes</span>.</div></pre></td></tr></table></figure>
<h2 id="Path-模块"><a href="#Path-模块" class="headerlink" title="Path 模块"></a>Path 模块</h2><p>提供了一些用于处理文件路径的小工具</p>
<p>var path = require(“path”)</p>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建main.js</span></div><div class="line">var <span class="built_in">path</span> = require(<span class="string">"path"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 格式化路径</span></div><div class="line">console.<span class="built_in">log</span>(<span class="string">'normalization : '</span> + <span class="built_in">path</span>.normalize(<span class="string">'/test/test1//2slashes/1slash/tab/..'</span>));</div><div class="line"></div><div class="line"><span class="comment">// 连接路径</span></div><div class="line">console.<span class="built_in">log</span>(<span class="string">'joint path : '</span> + <span class="built_in">path</span>.join(<span class="string">'/test'</span>, <span class="string">'test1'</span>, <span class="string">'2slashes/1slash'</span>, <span class="string">'tab'</span>, <span class="string">'..'</span>));</div><div class="line"></div><div class="line"><span class="comment">// 转换为绝对路径</span></div><div class="line">console.<span class="built_in">log</span>(<span class="string">'resolve : '</span> + <span class="built_in">path</span>.resolve(<span class="string">'main.js'</span>));</div><div class="line"></div><div class="line"><span class="comment">// 路径中文件的后缀名</span></div><div class="line">console.<span class="built_in">log</span>(<span class="string">'ext name : '</span> + <span class="built_in">path</span>.extname(<span class="string">'main.js'</span>));</div><div class="line"></div><div class="line"><span class="comment">// 运行命令行</span></div><div class="line">node main.js </div><div class="line">normalization : /test/test1/<span class="number">2</span>slashes/<span class="number">1</span>slash</div><div class="line">joint <span class="built_in">path</span> : /test/test1/<span class="number">2</span>slashes/<span class="number">1</span>slash</div><div class="line">resolve : /web/com/<span class="number">1427176256</span>_27423/main.js</div><div class="line">ext <span class="keyword">name</span> : .js</div></pre></td></tr></table></figure>
<h2 id="Net-模块"><a href="#Net-模块" class="headerlink" title="Net 模块"></a>Net 模块</h2><p>提供了一些用于底层的网络通信的小工具，包含了创建服务器/客户端的方法</p>
<p>var net = require(“net”)</p>
<p>net.Server通常用于创建一个 TCP 或本地服务器</p>
<p>net.Socket 对象是 TCP 或 UNIX Socket 的抽象</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// server.js</span></div><div class="line"><span class="keyword">var</span> net = <span class="keyword">require</span>(<span class="string">'net'</span>);</div><div class="line"><span class="keyword">var</span> server = net.createServer(<span class="function"><span class="keyword">function</span><span class="params">(connection)</span> </span>&#123; </div><div class="line">   console.log(<span class="string">'client connected'</span>);</div><div class="line">   connection.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">      console.log(<span class="string">'客户端关闭连接'</span>);</div><div class="line">   &#125;);</div><div class="line">   connection.write(<span class="string">'Hello World!\r\n'</span>);</div><div class="line">   connection.pipe(connection);</div><div class="line">&#125;);</div><div class="line">server.listen(<span class="number">8080</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123; </div><div class="line">  console.log(<span class="string">'server is listening'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 运行命令行</span></div><div class="line">node server.js</div><div class="line">server is listening   <span class="comment"># 服务已创建并监听 8080 端口</span></div></pre></td></tr></table></figure>
<p>新开一个窗口，创建 client.js 文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// client.js</span></div><div class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</div><div class="line"><span class="keyword">var</span> client = net.connect(&#123;<span class="attr">port</span>: <span class="number">8080</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'连接到服务器！'</span>);  </div><div class="line">&#125;);</div><div class="line">client.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(data.toString());</div><div class="line">   client.end();</div><div class="line">&#125;);</div><div class="line">client.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'断开与服务器的连接'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 运行命令行</span></div><div class="line">连接到服务器！</div><div class="line">Hello World!</div><div class="line"></div><div class="line">断开与服务器的连接</div></pre></td></tr></table></figure>
<h1 id="DNS-模块"><a href="#DNS-模块" class="headerlink" title="DNS 模块"></a>DNS 模块</h1><p>DNS 模块用于解析域名</p>
<p>var dns = require(“dns”)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.js</span></div><div class="line"><span class="keyword">var</span> dns = <span class="built_in">require</span>(<span class="string">'dns'</span>);</div><div class="line"></div><div class="line">dns.lookup(<span class="string">'www.github.com'</span>, <span class="function"><span class="keyword">function</span> <span class="title">onLookup</span>(<span class="params">err, address, family</span>) </span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'ip 地址:'</span>, address);</div><div class="line">   dns.reverse(address, <span class="function"><span class="keyword">function</span> (<span class="params">err, hostnames</span>) </span>&#123;</div><div class="line">   <span class="keyword">if</span> (err) &#123;</div><div class="line">      <span class="built_in">console</span>.log(err.stack);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'反向解析 '</span> + address + <span class="string">': '</span> + <span class="built_in">JSON</span>.stringify(hostnames));</div><div class="line">&#125;);  </div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 运行命令行</span></div><div class="line">address: <span class="number">192.30</span><span class="number">.252</span><span class="number">.130</span></div><div class="line">reverse <span class="keyword">for</span> <span class="number">192.30</span><span class="number">.252</span><span class="number">.130</span>: [<span class="string">"github.com"</span>]</div></pre></td></tr></table></figure>
<h1 id="Domain-模块"><a href="#Domain-模块" class="headerlink" title="Domain 模块"></a>Domain 模块</h1><p>Domain(域) 简化异步代码的异常处理，可以捕捉处理try catch无法捕捉的异常</p>
<p>var domain = require(“domain”)</p>
<p>Domain 模块可分为隐式绑定和显式绑定</p>
<ul>
<li>隐式绑定: 把在domain上下文中定义的变量，自动绑定到domain对象</li>
<li>显式绑定: 把不是在domain上下文中定义的变量，以代码的方式绑定到domain对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建 main.js</span></div><div class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">"events"</span>).EventEmitter;</div><div class="line"><span class="keyword">var</span> domain = <span class="built_in">require</span>(<span class="string">"domain"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> emitter1 = <span class="keyword">new</span> EventEmitter();</div><div class="line"></div><div class="line"><span class="comment">// 创建域</span></div><div class="line"><span class="keyword">var</span> domain1 = domain.create();</div><div class="line"></div><div class="line">domain1.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">"domain1 处理这个错误 ("</span>+err.message+<span class="string">")"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 显式绑定</span></div><div class="line">domain1.add(emitter1);</div><div class="line"></div><div class="line">emitter1.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">"监听器处理此错误 ("</span>+err.message+<span class="string">")"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">emitter1.emit(<span class="string">'error'</span>,<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'通过监听器来处理'</span>));</div><div class="line"></div><div class="line">emitter1.removeAllListeners(<span class="string">'error'</span>);</div><div class="line"></div><div class="line">emitter1.emit(<span class="string">'error'</span>,<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'通过 domain1 处理'</span>));</div><div class="line"></div><div class="line"><span class="keyword">var</span> domain2 = domain.create();</div><div class="line"></div><div class="line">domain2.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">"domain2 处理这个错误 ("</span>+err.message+<span class="string">")"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 隐式绑定</span></div><div class="line">domain2.run(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="keyword">var</span> emitter2 = <span class="keyword">new</span> EventEmitter();</div><div class="line">   emitter2.emit(<span class="string">'error'</span>,<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'通过 domain2 处理'</span>));   </div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">domain1.remove(emitter1);</div><div class="line">emitter1.emit(<span class="string">'error'</span>, <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'转换为异常，系统将崩溃!'</span>));</div><div class="line"></div><div class="line"><span class="comment">// 运行命令行</span></div><div class="line">监听器处理此错误 (通过监听器来处理)</div><div class="line">domain1 处理这个错误 (通过 domain1 处理)</div><div class="line">domain2 处理这个错误 (通过 domain2 处理)</div><div class="line"></div><div class="line">events.js:<span class="number">72</span></div><div class="line">        <span class="keyword">throw</span> er; <span class="comment">// Unhandled 'error' event</span></div><div class="line">              ^</div><div class="line"><span class="built_in">Error</span>: 转换为异常，系统将崩溃!</div><div class="line">    at <span class="built_in">Object</span>.&lt;anonymous&gt; (<span class="regexp">/www/</span>node/main.js:<span class="number">40</span>:<span class="number">24</span>)</div><div class="line">    at Module._compile (<span class="built_in">module</span>.js:<span class="number">456</span>:<span class="number">26</span>)</div><div class="line">    at <span class="built_in">Object</span>.Module._extensions..js (<span class="built_in">module</span>.js:<span class="number">474</span>:<span class="number">10</span>)</div><div class="line">    at Module.load (<span class="built_in">module</span>.js:<span class="number">356</span>:<span class="number">32</span>)</div><div class="line">    at <span class="built_in">Function</span>.Module._load (<span class="built_in">module</span>.js:<span class="number">312</span>:<span class="number">12</span>)</div><div class="line">    at <span class="built_in">Function</span>.Module.runMain (<span class="built_in">module</span>.js:<span class="number">497</span>:<span class="number">10</span>)</div><div class="line">    at startup (node.js:<span class="number">119</span>:<span class="number">16</span>)</div><div class="line">    at node.js:<span class="number">929</span>:<span class="number">3</span></div></pre></td></tr></table></figure>
<h1 id="Web-模块"><a href="#Web-模块" class="headerlink" title="Web 模块"></a>Web 模块</h1><p>Web服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，Web服务器的基本功能就是提供Web信息浏览服务</p>
<p>只需支持HTTP协议、HTML文档格式及URL，与客户端的网络浏览器配合</p>
<p>web 服务器支持服务端的脚本语言（php、python、ruby）等，并通过脚本语言从数据库获取数据，将结果返回给客户端浏览器</p>
<p>目前最主流的三个Web服务器是Apache、Nginx、IIS</p>
<h2 id="Web-应用架构"><a href="#Web-应用架构" class="headerlink" title="Web 应用架构"></a>Web 应用架构</h2><ul>
<li>Client - 客户端，一般指浏览器，浏览器可以通过 HTTP 协议向服务器请求数据</li>
<li>Server - 服务端，一般指 Web 服务器，可以接收客户端请求，并向客户端发送响应数据</li>
<li>Business - 业务层， 通过 Web 服务器处理应用程序，如与数据库交互，逻辑运算，调用外部程序等</li>
<li>Data - 数据层，一般由数据库组成</li>
</ul>
<h2 id="Node-创建-Web-服务器"><a href="#Node-创建-Web-服务器" class="headerlink" title="Node 创建 Web 服务器"></a>Node 创建 Web 服务器</h2><p>Node.js 提供了 http 模块，http 模块主要用于搭建 HTTP 服务端和客户端，使用 HTTP 服务器或客户端功能必须调用 http 模块</p>
<p>var http = require(‘http’);</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 最基本的 HTTP 服务器架构(使用 8080 端口)</span></div><div class="line"><span class="comment">// 创建 server.js</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"> </div><div class="line"><span class="comment">// 创建服务器</span></div><div class="line">http.createServer( <span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;  </div><div class="line">   <span class="comment">// 解析请求，包括文件名</span></div><div class="line">   <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</div><div class="line">   </div><div class="line">   <span class="comment">// 输出请求的文件名</span></div><div class="line">   <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>);</div><div class="line">   </div><div class="line">   <span class="comment">// 从文件系统中读取请求的文件内容</span></div><div class="line">   fs.readFile(pathname.substr(<span class="number">1</span>), <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (err) &#123;</div><div class="line">         <span class="built_in">console</span>.log(err);</div><div class="line">         <span class="comment">// HTTP 状态码: 404 : NOT FOUND</span></div><div class="line">         <span class="comment">// Content Type: text/plain</span></div><div class="line">         response.writeHead(<span class="number">404</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</div><div class="line">      &#125;<span class="keyword">else</span>&#123;             </div><div class="line">         <span class="comment">// HTTP 状态码: 200 : OK</span></div><div class="line">         <span class="comment">// Content Type: text/plain</span></div><div class="line">         response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);    </div><div class="line">         </div><div class="line">         <span class="comment">// 响应文件内容</span></div><div class="line">         response.write(data.toString());        </div><div class="line">      &#125;</div><div class="line">      <span class="comment">//  发送响应数据</span></div><div class="line">      response.end();</div><div class="line">   &#125;);   </div><div class="line">&#125;).listen(<span class="number">8080</span>);</div><div class="line"> </div><div class="line"><span class="comment">// 控制台会输出以下信息</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8080/'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 创建一个 index.html</span></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line">// 运行命令行</div><div class="line">node server.js</div><div class="line">Server running at http://127.0.0.1:8080/</div></pre></td></tr></table></figure>
<p>打开地址：<a href="http://127.0.0.1:8080/index.html" target="_blank" rel="external">http://127.0.0.1:8080/index.html</a></p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 执行 server.js 的控制台输出信息</span></div><div class="line"><span class="built_in">Server</span> <span class="built_in">running</span> at http:<span class="comment">//127.0.0.1:8080/</span></div><div class="line">Request <span class="built_in">for</span> /index.html received.     #  客户端请求信息</div></pre></td></tr></table></figure>
<h2 id="Node-创建-Web-客户端"><a href="#Node-创建-Web-客户端" class="headerlink" title="Node 创建 Web 客户端"></a>Node 创建 Web 客户端</h2><p>Node 创建 Web 客户端需要引入 http 模块</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建client.js</span></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"> </div><div class="line"><span class="comment">// 用于请求的选项</span></div><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">   <span class="attr">host</span>: <span class="string">'localhost'</span>,</div><div class="line">   <span class="attr">port</span>: <span class="string">'8080'</span>,</div><div class="line">   <span class="attr">path</span>: <span class="string">'/index.html'</span>  </div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="comment">// 处理响应的回调函数</span></div><div class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">   <span class="comment">// 不断更新数据</span></div><div class="line">   <span class="keyword">var</span> body = <span class="string">''</span>;</div><div class="line">   response.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">      body += data;</div><div class="line">   &#125;);</div><div class="line">   </div><div class="line">   response.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">// 数据接收完成</span></div><div class="line">      <span class="built_in">console</span>.log(body);</div><div class="line">   &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 向服务端发送请求</span></div><div class="line"><span class="keyword">var</span> req = http.request(options, callback);</div><div class="line">req.end();</div><div class="line"></div><div class="line"><span class="comment">// 运行命令行</span></div><div class="line">node  client.js </div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line">// 执行 server.js 的控制台输出信息</div><div class="line">Server running at http://127.0.0.1:8080/</div><div class="line">Request for /index.html received.   # 客户端请求信息</div></pre></td></tr></table></figure>
<h1 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h1><p>REST即表述性状态传递</p>
<p>表述性状态转移是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是RESTful</p>
<p>REST 通常使用 JSON 数据格式</p>
<p>REST 基本架构的四个方法</p>
<ul>
<li>GET - 用于获取数据</li>
<li>PUT - 用于更新或添加数据</li>
<li>DELETE - 用于删除数据</li>
<li>POST - 用于添加数据</li>
</ul>
<h2 id="RESTful-Web-Services"><a href="#RESTful-Web-Services" class="headerlink" title="RESTful Web Services"></a>RESTful Web Services</h2><p>基于 REST 架构的 Web Services 即是 RESTful</p>
<p>由于轻量级以及通过 HTTP 直接传输数据的特性，Web 服务的 RESTful 方法已经成为最常见的替代方法</p>
<p>可以使用各种语言（比如 Java 程序、Perl、Ruby、Python、PHP 和 Javascript[包括 Ajax]）实现客户端</p>
<h2 id="创建-RESTful"><a href="#创建-RESTful" class="headerlink" title="创建 RESTful"></a>创建 RESTful</h2><p>创建一个 json 数据资源文件 users.json</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="attr">"user1"</span> : &#123;</div><div class="line">      <span class="attr">"name"</span> : <span class="string">"mahesh"</span>,</div><div class="line">      <span class="attr">"password"</span> : <span class="string">"password1"</span>,</div><div class="line">      <span class="attr">"profession"</span> : <span class="string">"teacher"</span>,</div><div class="line">      <span class="attr">"id"</span>: <span class="number">1</span></div><div class="line">   &#125;,</div><div class="line">   <span class="attr">"user2"</span> : &#123;</div><div class="line">      <span class="attr">"name"</span> : <span class="string">"suresh"</span>,</div><div class="line">      <span class="attr">"password"</span> : <span class="string">"password2"</span>,</div><div class="line">      <span class="attr">"profession"</span> : <span class="string">"librarian"</span>,</div><div class="line">      <span class="attr">"id"</span>: <span class="number">2</span></div><div class="line">   &#125;,</div><div class="line">   <span class="attr">"user3"</span> : &#123;</div><div class="line">      <span class="attr">"name"</span> : <span class="string">"ramesh"</span>,</div><div class="line">      <span class="attr">"password"</span> : <span class="string">"password3"</span>,</div><div class="line">      <span class="attr">"profession"</span> : <span class="string">"clerk"</span>,</div><div class="line">      <span class="attr">"id"</span>: <span class="number">3</span></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>基于以上数据，我们创建以下 RESTful API</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>URI</th>
<th>HTTP方法</th>
<th>发送内容</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>listUsers</td>
<td>GET</td>
<td>空</td>
<td>显示所有用户列表</td>
</tr>
<tr>
<td>2</td>
<td>addUser</td>
<td>POST</td>
<td>JSON 字符串</td>
<td>添加新用户</td>
</tr>
<tr>
<td>3</td>
<td>deleteUser</td>
<td>DELETE</td>
<td>JSON 字符串</td>
<td>删除用户</td>
</tr>
<tr>
<td>4</td>
<td>:id</td>
<td>GET</td>
<td>空</td>
<td>显示用户详细信息</td>
</tr>
</tbody>
</table>
<h3 id="获取用户列表"><a href="#获取用户列表" class="headerlink" title="获取用户列表"></a>获取用户列表</h3><p>创建了 RESTful API listUsers，用于读取用户的信息列表</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// server.js</span></div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line">app.get(<span class="string">'/listUsers'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">   fs.readFile( __dirname + <span class="string">"/"</span> + <span class="string">"users.json"</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">       <span class="built_in">console</span>.log( data );</div><div class="line">       res.end( data );</div><div class="line">   &#125;);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> host = server.address().address</div><div class="line">  <span class="keyword">var</span> port = server.address().port</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</div><div class="line"></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 运行命令行</span></div><div class="line">node server.js </div><div class="line">应用实例，访问地址为 http:<span class="comment">//0.0.0.0:8081</span></div><div class="line"></div><div class="line"><span class="comment">// 在浏览器中访问 http://127.0.0.1:8081/listUsers</span></div><div class="line">&#123;</div><div class="line">   <span class="string">"user1"</span> : &#123;</div><div class="line">      <span class="string">"name"</span> : <span class="string">"mahesh"</span>,</div><div class="line">      <span class="string">"password"</span> : <span class="string">"password1"</span>,</div><div class="line">      <span class="string">"profession"</span> : <span class="string">"teacher"</span>,</div><div class="line">      <span class="string">"id"</span>: <span class="number">1</span></div><div class="line">   &#125;,</div><div class="line">   <span class="string">"user2"</span> : &#123;</div><div class="line">      <span class="string">"name"</span> : <span class="string">"suresh"</span>,</div><div class="line">      <span class="string">"password"</span> : <span class="string">"password2"</span>,</div><div class="line">      <span class="string">"profession"</span> : <span class="string">"librarian"</span>,</div><div class="line">      <span class="string">"id"</span>: <span class="number">2</span></div><div class="line">   &#125;,</div><div class="line">   <span class="string">"user3"</span> : &#123;</div><div class="line">      <span class="string">"name"</span> : <span class="string">"ramesh"</span>,</div><div class="line">      <span class="string">"password"</span> : <span class="string">"password3"</span>,</div><div class="line">      <span class="string">"profession"</span> : <span class="string">"clerk"</span>,</div><div class="line">      <span class="string">"id"</span>: <span class="number">3</span></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><p>创建了 RESTful API addUser， 用于添加新的用户数据</p>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// server.js</span></div><div class="line"><span class="built_in">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="built_in">var</span> app = express();</div><div class="line"><span class="built_in">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line"><span class="comment">//添加的新用户数据</span></div><div class="line"><span class="built_in">var</span> user = &#123;</div><div class="line">   <span class="string">"user4"</span> : &#123;</div><div class="line">      <span class="string">"name"</span> : <span class="string">"mohit"</span>,</div><div class="line">      <span class="string">"password"</span> : <span class="string">"password4"</span>,</div><div class="line">      <span class="string">"profession"</span> : <span class="string">"teacher"</span>,</div><div class="line">      <span class="string">"id"</span>: <span class="number">4</span></div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">app.get(<span class="string">'/addUser'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">   <span class="comment">// 读取已存在的数据</span></div><div class="line">   fs.readFile( __dirname + <span class="string">"/"</span> + <span class="string">"users.json"</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">       data = <span class="built_in">JSON</span>.parse( data );</div><div class="line">       data[<span class="string">"user4"</span>] = user[<span class="string">"user4"</span>];</div><div class="line">       <span class="built_in">console</span>.log( data );</div><div class="line">       res.end( <span class="built_in">JSON</span>.stringify(data));</div><div class="line">   &#125;);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="built_in">var</span> host = server.address().address</div><div class="line">  <span class="built_in">var</span> port = server.address().port</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</div><div class="line"></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 运行命令行</span></div><div class="line">node server.js </div><div class="line">应用实例，访问地址为 <span class="attribute">http</span>:<span class="comment">//0.0.0.0:8081</span></div><div class="line"></div><div class="line"><span class="comment">// 在浏览器中访问 http://127.0.0.1:8081/addUser</span></div><div class="line">&#123; <span class="attribute">user1</span>:</div><div class="line">   &#123; <span class="attribute">name</span>: <span class="string">'mahesh'</span>,</div><div class="line">     <span class="attribute">password</span>: <span class="string">'password1'</span>,</div><div class="line">     <span class="attribute">profession</span>: <span class="string">'teacher'</span>,</div><div class="line">     <span class="attribute">id:</span><span class="string"> 1 &#125;,</span></div><div class="line">  user2:</div><div class="line">   &#123; <span class="attribute">name</span>: <span class="string">'suresh'</span>,</div><div class="line">     <span class="attribute">password</span>: <span class="string">'password2'</span>,</div><div class="line">     <span class="attribute">profession</span>: <span class="string">'librarian'</span>,</div><div class="line">     <span class="attribute">id:</span><span class="string"> 2 &#125;,</span></div><div class="line">  user3:</div><div class="line">   &#123; <span class="attribute">name</span>: <span class="string">'ramesh'</span>,</div><div class="line">     <span class="attribute">password</span>: <span class="string">'password3'</span>,</div><div class="line">     <span class="attribute">profession</span>: <span class="string">'clerk'</span>,</div><div class="line">     <span class="attribute">id:</span><span class="string"> 3 &#125;,</span></div><div class="line">  user4:</div><div class="line">   &#123; <span class="attribute">name</span>: <span class="string">'mohit'</span>,</div><div class="line">     <span class="attribute">password</span>: <span class="string">'password4'</span>,</div><div class="line">     <span class="attribute">profession</span>: <span class="string">'teacher'</span>,</div><div class="line">     <span class="attribute">id:</span><span class="string"> 4 &#125; </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="显示用户详情"><a href="#显示用户详情" class="headerlink" title="显示用户详情"></a>显示用户详情</h3><p>创建了 RESTful API :id（用户id）， 用于读取指定用户的详细信息</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// server.js</span></div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line">app.get(<span class="string">'/:id'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">   <span class="comment">// 首先我们读取已存在的用户</span></div><div class="line">   fs.readFile( __dirname + <span class="string">"/"</span> + <span class="string">"users.json"</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">       data = <span class="built_in">JSON</span>.parse( data );</div><div class="line">       <span class="keyword">var</span> user = data[<span class="string">"user"</span> + req.params.id] </div><div class="line">       <span class="built_in">console</span>.log( user );</div><div class="line">       res.end( <span class="built_in">JSON</span>.stringify(user));</div><div class="line">   &#125;);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> host = server.address().address</div><div class="line">  <span class="keyword">var</span> port = server.address().port</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</div><div class="line"></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 运行命令行</span></div><div class="line">node server.js </div><div class="line">应用实例，访问地址为 http:<span class="comment">//0.0.0.0:8081</span></div><div class="line"></div><div class="line"><span class="comment">// 在浏览器中访问 http://127.0.0.1:8081/2</span></div><div class="line">&#123;</div><div class="line">   <span class="string">"name"</span>:<span class="string">"suresh"</span>,</div><div class="line">   <span class="string">"password"</span>:<span class="string">"password2"</span>,</div><div class="line">   <span class="string">"profession"</span>:<span class="string">"librarian"</span>,</div><div class="line">   <span class="string">"id"</span>:<span class="number">2</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><p>创建了 RESTful API deleteUser， 用于删除指定用户的详细信息</p>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// server.js</span></div><div class="line"><span class="built_in">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="built_in">var</span> app = express();</div><div class="line"><span class="built_in">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line"><span class="built_in">var</span> id = <span class="number">2</span>;</div><div class="line"></div><div class="line">app.get(<span class="string">'/deleteUser'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line"></div><div class="line">   <span class="comment">// First read existing users.</span></div><div class="line">   fs.readFile( __dirname + <span class="string">"/"</span> + <span class="string">"users.json"</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">       data = <span class="built_in">JSON</span>.parse( data );</div><div class="line">       <span class="keyword">delete</span> data[<span class="string">"user"</span> + <span class="number">2</span>];</div><div class="line">       </div><div class="line">       <span class="built_in">console</span>.log( data );</div><div class="line">       res.end( <span class="built_in">JSON</span>.stringify(data));</div><div class="line">   &#125;);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="built_in">var</span> host = server.address().address</div><div class="line">  <span class="built_in">var</span> port = server.address().port</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</div><div class="line"></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 运行命令行</span></div><div class="line">node server.js </div><div class="line">应用实例，访问地址为 <span class="attribute">http</span>:<span class="comment">//0.0.0.0:8081</span></div><div class="line"></div><div class="line"><span class="comment">// 在浏览器中访问 http://127.0.0.1:8081/deleteUser</span></div><div class="line">&#123; <span class="attribute">user1</span>:</div><div class="line">   &#123; <span class="attribute">name</span>: <span class="string">'mahesh'</span>,</div><div class="line">     <span class="attribute">password</span>: <span class="string">'password1'</span>,</div><div class="line">     <span class="attribute">profession</span>: <span class="string">'teacher'</span>,</div><div class="line">     <span class="attribute">id:</span><span class="string"> 1 &#125;,</span></div><div class="line">  user3:</div><div class="line">   &#123; <span class="attribute">name</span>: <span class="string">'ramesh'</span>,</div><div class="line">     <span class="attribute">password</span>: <span class="string">'password3'</span>,</div><div class="line">     <span class="attribute">profession</span>: <span class="string">'clerk'</span>,</div><div class="line">     <span class="attribute">id:</span><span class="string"> 3 &#125; </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h1><p>Node.js 是以单线程的模式运行的，但它使用的是事件驱动来处理并发</p>
<p>每个子进程总是带有三个流对象：child.stdin, child.stdout 和child.stderr</p>
<p>Node 提供了 child_process 模块来创建子进程,方法有</p>
<ul>
<li>exec - child_process.exec 使用子进程执行命令，缓存子进程的输出，并将子进程的输出以回调函数参数的形式返回</li>
<li>spawn - child_process.spawn 使用指定的命令行参数创建新进程</li>
<li>fork - child_process.fork 是 spawn()的特殊形式，用于在子进程中运行的模块，如 fork(‘./son.js’) 相当于 spawn(‘node’, [‘./son.js’])</li>
</ul>
<h2 id="exec-方法"><a href="#exec-方法" class="headerlink" title="exec() 方法"></a>exec() 方法</h2><p>child_process.exec 使用子进程执行命令，缓存子进程的输出，并将子进程的输出以回调函数参数的形式返回</p>
<p>exec() 方法返回最大的缓冲区，并等待进程结束，一次性返回缓冲区的内容</p>
<p>child_process.exec(command[, options], callback)</p>
<ul>
<li>command： 字符串， 将要运行的命令，参数使用空格隔开</li>
<li>options ：对象</li>
<li>callback ：回调函数，包含三个参数error, stdout 和 stderr</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// support.js</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"进程 "</span> + process.argv[<span class="number">2</span>] + <span class="string">" 执行。"</span> );</div><div class="line"></div><div class="line"><span class="comment">// master.js</span></div><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">const</span> child_process = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</div><div class="line"> </div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</div><div class="line">    <span class="keyword">var</span> workerProcess = child_process.exec(<span class="string">'node support.js '</span>+i, <span class="function"><span class="keyword">function</span> (<span class="params">error, stdout, stderr</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (error) &#123;</div><div class="line">            <span class="built_in">console</span>.log(error.stack);</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Error code: '</span>+error.code);</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Signal received: '</span>+error.signal);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'stdout: '</span> + stdout);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'stderr: '</span> + stderr);</div><div class="line">    &#125;);</div><div class="line"> </div><div class="line">    workerProcess.on(<span class="string">'exit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">code</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'子进程已退出，退出码 '</span>+code);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 运行命令行</span></div><div class="line">node master.js </div><div class="line">子进程已退出，退出码 <span class="number">0</span></div><div class="line">stdout: 进程 <span class="number">1</span> 执行。</div><div class="line"></div><div class="line">stderr: </div><div class="line">子进程已退出，退出码 <span class="number">0</span></div><div class="line">stdout: 进程 <span class="number">0</span> 执行。</div><div class="line"></div><div class="line">stderr: </div><div class="line">子进程已退出，退出码 <span class="number">0</span></div><div class="line">stdout: 进程 <span class="number">2</span> 执行。</div><div class="line"></div><div class="line">stderr:</div></pre></td></tr></table></figure>
<h2 id="spawn-方法"><a href="#spawn-方法" class="headerlink" title="spawn() 方法"></a>spawn() 方法</h2><p>child_process.spawn 使用指定的命令行参数创建新进程</p>
<p>spawn() 方法返回流 (stdout &amp; stderr)，在进程返回大量数据时使用。进程一旦开始执行时 spawn() 就开始接收响应</p>
<p>child_process.spawn(command[, args][, options])</p>
<ul>
<li>command： 将要运行的命令</li>
<li>args： Array 字符串参数数组</li>
<li>options Object</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// support.js</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"进程 "</span> + process.argv[<span class="number">2</span>] + <span class="string">" 执行。"</span> );</div><div class="line"></div><div class="line"><span class="comment">// master.js</span></div><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">const</span> child_process = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</div><div class="line"> </div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</div><div class="line">   <span class="keyword">var</span> workerProcess = child_process.spawn(<span class="string">'node'</span>, [<span class="string">'support.js'</span>, i]);</div><div class="line"> </div><div class="line">   workerProcess.stdout.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'stdout: '</span> + data);</div><div class="line">   &#125;);</div><div class="line"> </div><div class="line">   workerProcess.stderr.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'stderr: '</span> + data);</div><div class="line">   &#125;);</div><div class="line"> </div><div class="line">   workerProcess.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">code</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'子进程已退出，退出码 '</span>+code);</div><div class="line">   &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 运行命令行</span></div><div class="line">node master.js stdout: 进程 <span class="number">0</span> 执行。</div><div class="line"></div><div class="line">子进程已退出，退出码 <span class="number">0</span></div><div class="line">stdout: 进程 <span class="number">1</span> 执行。</div><div class="line"></div><div class="line">子进程已退出，退出码 <span class="number">0</span></div><div class="line">stdout: 进程 <span class="number">2</span> 执行。</div><div class="line"></div><div class="line">子进程已退出，退出码 <span class="number">0</span></div></pre></td></tr></table></figure>
<h2 id="fork-方法"><a href="#fork-方法" class="headerlink" title="fork 方法"></a>fork 方法</h2><p>child_process.fork 是 spawn() 方法的特殊形式，用于创建进程</p>
<p>返回的对象除了拥有ChildProcess实例的所有方法，还有一个内建的通信信道</p>
<p>child_process.fork(modulePath[, args][, options])</p>
<ul>
<li>modulePath： String，将要在子进程中运行的模块</li>
<li>args： Array 字符串参数数组</li>
<li>options：Object</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// support.js</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"进程 "</span> + process.argv[<span class="number">2</span>] + <span class="string">" 执行。"</span> );</div><div class="line"></div><div class="line"><span class="comment">// master.js</span></div><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">const</span> child_process = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</div><div class="line"> </div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</div><div class="line">   <span class="keyword">var</span> worker_process = child_process.fork(<span class="string">"support.js"</span>, [i]);    </div><div class="line"> </div><div class="line">   worker_process.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">code</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'子进程已退出，退出码 '</span> + code);</div><div class="line">   &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 运行命令行</span></div><div class="line">node master.js </div><div class="line">进程 <span class="number">0</span> 执行。</div><div class="line">子进程已退出，退出码 <span class="number">0</span></div><div class="line">进程 <span class="number">1</span> 执行。</div><div class="line">子进程已退出，退出码 <span class="number">0</span></div><div class="line">进程 <span class="number">2</span> 执行。</div><div class="line">子进程已退出，退出码 <span class="number">0</span></div></pre></td></tr></table></figure>
<h1 id="JXcore打包"><a href="#JXcore打包" class="headerlink" title="JXcore打包"></a>JXcore打包</h1><p>JXcore 是一个支持多线程的 Node.js 发行版本</p>
<h2 id="JXcore安装"><a href="#JXcore安装" class="headerlink" title="JXcore安装"></a>JXcore安装</h2><p>下载 JXcore 安装包，并解压，在解压的的目录下提供了 jx 二进制文件命令</p>
<h2 id="包代码"><a href="#包代码" class="headerlink" title="包代码"></a>包代码</h2><p>Node.js 项目包含以下几个文件，其中 index.js 是主文件</p>
<figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">drwxr-xr-x <span class="number"> 2 </span>root root <span class="number"> 4096 </span>Nov<span class="number"> 13 </span>12:42 images</div><div class="line">-rwxr-xr-x <span class="number"> 1 </span>root root<span class="number"> 30457 </span>Mar <span class="number"> 6 </span>12:19 index.htm</div><div class="line">-rwxr-xr-x <span class="number"> 1 </span>root root<span class="number"> 30452 </span>Mar <span class="number"> 1 </span>12:54 index.js</div><div class="line">drwxr-xr-x<span class="number"> 23 </span>root root <span class="number"> 4096 </span>Jan<span class="number"> 15 </span>03:48 node_modules</div><div class="line">drwxr-xr-x <span class="number"> 2 </span>root root <span class="number"> 4096 </span>Mar<span class="number"> 21 </span>06:10 scripts</div><div class="line">drwxr-xr-x <span class="number"> 2 </span>root root <span class="number"> 4096 </span>Feb<span class="number"> 15 </span>11:56 style</div></pre></td></tr></table></figure>
<p>使用 jx 命令打包以上项目，并指定 index.js 为 Node.js 项目的主文件</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jx <span class="keyword">package</span> <span class="title">index.js index</span></div></pre></td></tr></table></figure>
<p>命令执行成功，会生成以下两个文件</p>
<ul>
<li>index.jxp 这是一个中间件文件，包含了需要编译的完整项目信息</li>
<li>index.jx 这是一个完整包信息的二进制文件，可运行在客户端上</li>
</ul>
<h2 id="载入-JX-文件"><a href="#载入-JX-文件" class="headerlink" title="载入 JX 文件"></a>载入 JX 文件</h2><p>Node.js 的项目运行</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">node</span> <span class="title">index</span>.js command_line_arguments</div></pre></td></tr></table></figure>
<p>使用 JXcore 编译后，我们可以使用以下命令来执行生成的 jx 二进制文件</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">jx </span>index.<span class="keyword">jx </span>command_line_arguments</div></pre></td></tr></table></figure>
<h1 id="连接-MySQL"><a href="#连接-MySQL" class="headerlink" title="连接 MySQL"></a>连接 MySQL</h1><p>略</p>
<h1 id="连接-MongoDB"><a href="#连接-MongoDB" class="headerlink" title="连接 MongoDB"></a>连接 MongoDB</h1><p>略</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Node.js 就是运行在服务端的 JavaScript,是一个平台,提供I/O接口,基于Google的V8引擎&lt;/p&gt;
&lt;h1 id=&quot;创建第一个应用&quot;&gt;&lt;a href=&quot;#创建第一个应用&quot; class=&quot;headerlink&quot; title=&quot;创建第一个应用&quot;&gt;&lt;/a&gt;创建第一个应用&lt;/h1&gt;
    
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>Redux</title>
    <link href="http://yoursite.com/2018/07/11/2018.7.11/"/>
    <id>http://yoursite.com/2018/07/11/2018.7.11/</id>
    <published>2018-07-11T15:16:41.000Z</published>
    <updated>2018-08-13T13:27:57.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>React 只是 DOM 的一个抽象层，并不是 Web 应用的完整解决方案。有两个方面，它没涉及<br><a id="more"></a></p>
<ul>
<li>代码结构</li>
<li>组件之间的通信</li>
</ul>
<p>不使用 Redux 或者其他状态管理工具，不按照一定规律处理状态的读写，代码很快就会变成一团乱麻</p>
<p>需要一种机制，可以在同一个地方查询状态、改变状态、传播状态的变化</p>
<h1 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h1><ul>
<li>Web 应用是一个状态机，视图与状态是一一对应的。</li>
<li>所有的状态，保存在一个对象里面</li>
</ul>
<h1 id="基本概念和-API"><a href="#基本概念和-API" class="headerlink" title="基本概念和 API"></a>基本概念和 API</h1><h2 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h2><p>Store 就是保存数据的地方,整个应用只能有一个 Store</p>
<p>Redux 提供createStore这个函数，用来生成 Store</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// createStore函数接受另一个函数作为参数，返回新生成的 Store 对象</span></div><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">const</span> store = createStore(fn);</div></pre></td></tr></table></figure>
<h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>想得到某个时点的数据，就要对 Store 生成快照。这种时点的数据集合，就叫做 State</p>
<p>当前时刻的 State，可以通过store.getState()拿到</p>
<p>Redux 规定， 一个 State 对应一个 View。只要 State 相同，View 就相同</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">import &#123; createStore &#125; <span class="keyword">from</span> 'redux';</div><div class="line">const store = createStore(fn);</div><div class="line"></div><div class="line">const <span class="keyword">state</span> = store.getState();</div></pre></td></tr></table></figure>
<h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><p>State 的变化，会导致 View 的变化。用户接触不到 State，只能接触到 View</p>
<p>State 的变化必须是 View 导致的。Action 就是 View 发出的通知，表示 State 应该要发生变化</p>
<p>Action 是一个对象。其中的type属性是必须的，表示 Action 的名称</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Action 的名称是ADD_TODO，它携带的信息是字符串Learn Redux</span></div><div class="line"><span class="keyword">const</span> action = &#123;</div><div class="line">  <span class="keyword">type</span>: <span class="string">'ADD_TODO'</span>,</div><div class="line">  payload: <span class="string">'Learn Redux'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>Action 描述当前发生的事情。改变 State 的唯一办法，就是使用 Action。它会运送数据到 Store</p>
</blockquote>
<h2 id="Action-Creator"><a href="#Action-Creator" class="headerlink" title="Action Creator"></a>Action Creator</h2><p>View 要发送多少种消息，就会有多少种 Action。可以定义一个函数来生成 Action，这个函数就叫 Action Creator</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// addTodo函数就是一个 Action Creator</span></div><div class="line"><span class="keyword">const</span> ADD_TODO = <span class="string">'添加 TODO'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span><span class="params">(text)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    type: ADD_TODO,</div><div class="line">    text</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> action = addTodo(<span class="string">'Learn Redux'</span>);</div></pre></td></tr></table></figure>
<h2 id="store-dispatch"><a href="#store-dispatch" class="headerlink" title="store.dispatch()"></a>store.dispatch()</h2><p>store.dispatch()是 View 发出 Action 的唯一方法</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// store.dispatch接受一个 Action 对象作为参数，将它发送出去</span></div><div class="line"><span class="keyword">import</span> &#123; createStore &#125; from <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">const</span> store = createStore(fn);</div><div class="line"></div><div class="line">store.dispatch(&#123;</div><div class="line">  <span class="keyword">type</span>: <span class="string">'ADD_TODO'</span>,</div><div class="line">  payload: <span class="string">'Learn Redux'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 结合 Action Creator，这段代码可以改写</span></div><div class="line">store.dispatch(addTodo(<span class="string">'Learn Redux'</span>));</div></pre></td></tr></table></figure>
<h2 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h2><p>Store 收到 Action 以后，必须给出一个新的 State，这样 View 才会发生变化。这种 State 的计算过程就叫做 Reducer</p>
<p>Reducer 是一个函数，它接受 Action 和当前 State 作为参数，返回一个新的 State</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> reducer = <span class="function"><span class="keyword">function</span> <span class="params">(state, action)</span> </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  <span class="keyword">return</span> new_state;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>整个应用的初始状态，可以作为 State 的默认值</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// reducer函数收到名为ADD的 Action 以后，就返回一个新的 State，作为加法的计算结果</div><div class="line">const <span class="keyword">default</span>State = <span class="number">0</span>;</div><div class="line">const reducer = (<span class="keyword">state</span> = <span class="keyword">default</span>State, action) =&gt; &#123;</div><div class="line">  switch (action.type) &#123;</div><div class="line">    case 'ADD':</div><div class="line">      return <span class="keyword">state</span> + action.payload;</div><div class="line">    <span class="keyword">default</span>: </div><div class="line">      return <span class="keyword">state</span>;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const <span class="keyword">state</span> = reducer(<span class="number">1</span>, &#123;</div><div class="line">  type: 'ADD',</div><div class="line">  payload: <span class="number">2</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>store.dispatch方法会触发 Reducer 的自动执行</p>
<p>Store 需要知道 Reducer 函数，做法就是在生成 Store 的时候，将 Reducer 传入createStore方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// createStore接受 Reducer 作为参数，生成一个新的 Store</span></div><div class="line"><span class="comment">// 每当store.dispatch发送过来一个新的 Action，就会自动调用 Reducer，得到新的 State</span></div><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">const</span> store = createStore(reducer);</div></pre></td></tr></table></figure>
<p>Action 对象按照顺序作为一个数组</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 数组actions表示依次有三个 Action，分别是加0、加1和加2</span></div><div class="line"><span class="comment">// 数组的reduce方法接受 Reducer 函数作为参数，就可以直接得到最终的状态3</span></div><div class="line">const actions = [</div><div class="line">  &#123; <span class="string">type:</span> <span class="string">'ADD'</span>, <span class="string">payload:</span> <span class="number">0</span> &#125;,</div><div class="line">  &#123; <span class="string">type:</span> <span class="string">'ADD'</span>, <span class="string">payload:</span> <span class="number">1</span> &#125;,</div><div class="line">  &#123; <span class="string">type:</span> <span class="string">'ADD'</span>, <span class="string">payload:</span> <span class="number">2</span> &#125;</div><div class="line">];</div><div class="line"></div><div class="line">const total = actions.reduce(reducer, <span class="number">0</span>); <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<h2 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h2><p>Reducer 函数最重要的特征是，它是一个纯函数。也就是说，只要是同样的输入，必定得到同样的输出</p>
<p>Reducer 是纯函数，就可以保证同样的State，必定得到同样的 View</p>
<p>Reducer 函数里面不能改变 State，必须返回一个全新的对象</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// State 是一个对象</div><div class="line">function reducer(<span class="keyword">state</span>, action) &#123;</div><div class="line">  return Object.assign(&#123;&#125;, <span class="keyword">state</span>, &#123; thingToChange &#125;);</div><div class="line">  // 或者</div><div class="line">  return &#123; ...<span class="keyword">state</span>, ...newState &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// State 是一个数组</div><div class="line">function reducer(<span class="keyword">state</span>, action) &#123;</div><div class="line">  return [...<span class="keyword">state</span>, newItem];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="store-subscribe"><a href="#store-subscribe" class="headerlink" title="store.subscribe()"></a>store.subscribe()</h2><p>Store 允许使用store.subscribe方法设置监听函数，一旦 State 发生变化，就自动执行这个函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 把 View 的更新函数（对于 React 项目，就是组件的render方法或setState方法）放入listen，实现 View 的自动渲染</span></div><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">const</span> store = createStore(reducer);</div><div class="line"></div><div class="line">store.subscribe(listener);</div></pre></td></tr></table></figure>
<p>store.subscribe方法返回一个函数，调用这个函数就可以解除监听</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let unsubscribe = store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span></div><div class="line">  <span class="built_in">console</span>.log(store.getState())</div><div class="line">);</div><div class="line"></div><div class="line">unsubscribe();</div></pre></td></tr></table></figure>
<h1 id="Store-的实现"><a href="#Store-的实现" class="headerlink" title="Store 的实现"></a>Store 的实现</h1><p>Store 提供了三个方法</p>
<ul>
<li>store.getState()</li>
<li>store.dispatch()</li>
<li>store.subscribe()</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">let</span> &#123; subscribe, dispatch, getState &#125; = createStore(reducer);</div><div class="line"></div><div class="line"><span class="comment">// createStore方法还可以接受第二个参数，表示 State 的最初状态。这通常是服务器给出的</span></div><div class="line"><span class="comment">// window.STATE_FROM_SERVER就是整个应用的状态初始值</span></div><div class="line"><span class="keyword">let</span> store = createStore(todoApp, <span class="built_in">window</span>.STATE_FROM_SERVER)</div></pre></td></tr></table></figure>
<p>createStore方法的一个简单实现，可以了解一下 Store 是怎么生成的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">let</span> state;</div><div class="line">  <span class="keyword">let</span> listeners = [];</div><div class="line"></div><div class="line">  <span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> state;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">    state = reducer(state, action);</div><div class="line">    listeners.forEach(<span class="function"><span class="params">listener</span> =&gt;</span> listener());</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> subscribe = <span class="function">(<span class="params">listener</span>) =&gt;</span> &#123;</div><div class="line">    listeners.push(listener);</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      listeners = listeners.filter(<span class="function"><span class="params">l</span> =&gt;</span> l !== listener);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  dispatch(&#123;&#125;);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> &#123; getState, dispatch, subscribe &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="Reducer-的拆分"><a href="#Reducer-的拆分" class="headerlink" title="Reducer 的拆分"></a>Reducer 的拆分</h1><p>Reducer 函数负责生成 State。由于整个应用只有一个 State 对象，包含所有数据</p>
<p>三种 Action 分别改变 State 的三个属性</p>
<ul>
<li>ADD_CHAT：chatLog属性</li>
<li>CHANGE_STATUS：statusMessage属性</li>
<li>CHANGE_USERNAME：userName属性</li>
</ul>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">const chatReducer = (<span class="keyword">state</span> = <span class="keyword">default</span>State, action = &#123;&#125;) =&gt; &#123;</div><div class="line">  const &#123; type, payload &#125; = action;</div><div class="line">  switch (type) &#123;</div><div class="line">    case ADD_CHAT:</div><div class="line">      return Object.assign(&#123;&#125;, <span class="keyword">state</span>, &#123;</div><div class="line">        chatLog: <span class="keyword">state</span>.chatLog.concat(payload)</div><div class="line">      &#125;);</div><div class="line">    case CHANGE_STATUS:</div><div class="line">      return Object.assign(&#123;&#125;, <span class="keyword">state</span>, &#123;</div><div class="line">        statusMessage: payload</div><div class="line">      &#125;);</div><div class="line">    case CHANGE_USERNAME:</div><div class="line">      return Object.assign(&#123;&#125;, <span class="keyword">state</span>, &#123;</div><div class="line">        <span class="keyword">user</span>Name: payload</div><div class="line">      &#125;);</div><div class="line">    <span class="keyword">default</span>: return <span class="keyword">state</span>;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Reducer 函数拆分。不同的函数负责处理不同属性，最终把它们合并成一个大的 Reducer 即可</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// Reducer 函数被拆成了三个小函数，每一个负责生成对应的属性</div><div class="line">const chatReducer = (<span class="keyword">state</span> = <span class="keyword">default</span>State, action = &#123;&#125;) =&gt; &#123;</div><div class="line">  return &#123;</div><div class="line">    chatLog: chatLog(<span class="keyword">state</span>.chatLog, action),</div><div class="line">    statusMessage: statusMessage(<span class="keyword">state</span>.statusMessage, action),</div><div class="line">    <span class="keyword">user</span>Name: <span class="keyword">user</span>Name(<span class="keyword">state</span>.<span class="keyword">user</span>Name, action)</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Redux 提供了一个combineReducers方法，用于 Reducer 的拆分</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">// 通过combineReducers方法将三个子 Reducer 合并成一个大的函数</div><div class="line">import &#123; combineReducers &#125; <span class="keyword">from</span> 'redux';</div><div class="line"></div><div class="line">const chatReducer = combineReducers(&#123;</div><div class="line">  chatLog,</div><div class="line">  statusMessage,</div><div class="line">  <span class="keyword">user</span>Name</div><div class="line">&#125;)</div><div class="line"></div><div class="line">export <span class="keyword">default</span> todoApp;</div><div class="line"></div><div class="line">// 这种写法有一个前提，就是 State 的属性名必须与子 Reducer 同名。如果不同名，就要采用下面的写法</div><div class="line">// combineReducers()做的就是产生一个整体的 Reducer 函数</div><div class="line">// 该函数根据 State 的 key 去执行相应的子 Reducer，并将返回结果合并成一个大的 State 对象</div><div class="line">const reducer = combineReducers(&#123;</div><div class="line">  a: doSomethingWithA,</div><div class="line">  b: processB,</div><div class="line">  c: c</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 等同于</div><div class="line">function reducer(<span class="keyword">state</span> = &#123;&#125;, action) &#123;</div><div class="line">  return &#123;</div><div class="line">    a: doSomethingWithA(<span class="keyword">state</span>.a, action),</div><div class="line">    b: processB(<span class="keyword">state</span>.b, action),</div><div class="line">    c: c(<span class="keyword">state</span>.c, action)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>combineReducer的简单实现</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> combineReducers = <span class="function"><span class="params">reducers</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">state = &#123;&#125;, action</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(reducers).reduce(</div><div class="line">      <span class="function">(<span class="params">nextState, key</span>) =&gt;</span> &#123;</div><div class="line">        nextState[key] = reducers[key](state[key], action);</div><div class="line">        <span class="keyword">return</span> nextState;</div><div class="line">      &#125;,</div><div class="line">      &#123;&#125; </div><div class="line">    );</div><div class="line">  &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>把所有子 Reducer 放在一个文件里面，然后统一引入</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> reducers <span class="keyword">from</span> <span class="string">'./reducers'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> reducer = combineReducers(reducers)</div></pre></td></tr></table></figure>
<h1 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h1><p><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016091802.jpg" alt="image"></p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 首先，用户发出 Action</span></div><div class="line">store.dispatch(action);</div><div class="line"></div><div class="line"><span class="comment">// 然后，Store 自动调用 Reducer，并且传入两个参数：当前 State 和收到的 Action。 Reducer 会返回新的 State</span></div><div class="line">let nextState = todoApp(previousState, action);</div><div class="line"></div><div class="line"><span class="comment">// State 一旦有变化，Store 就会调用监听函数</span></div><div class="line"><span class="comment">// 设置监听函数</span></div><div class="line">store.subscribe(listener);</div><div class="line"></div><div class="line"><span class="comment">// listener可以通过store.getState()得到当前状态。如果使用的是 React，这时可以触发重新渲染 View</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">listerner</span></span>() &#123;</div><div class="line">  let <span class="keyword">new</span><span class="type">State</span> = store.getState();</div><div class="line">  component.setState(<span class="keyword">new</span><span class="type">State</span>);   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 计数器，作用就是把参数value的值，显示在网页上</span></div><div class="line"><span class="comment">// Store 的监听函数设置为render，每次 State 的变化都会导致网页重新渲染</span></div><div class="line"><span class="keyword">const</span> Counter = <span class="function">(<span class="params">&#123; value &#125;</span>) =&gt;</span> (</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line">);</div><div class="line"></div><div class="line"><span class="keyword">const</span> render = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  ReactDOM.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Counter</span> <span class="attr">value</span>=<span class="string">&#123;store.getState()&#125;/</span>&gt;</span>,</span></div><div class="line">    document.getElementById('root')</div><div class="line">  );</div><div class="line">&#125;;</div><div class="line"></div><div class="line">store.subscribe(render);</div><div class="line">render();</div></pre></td></tr></table></figure>
<p>为Counter添加递增和递减的 Action</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Counter = <span class="function">(<span class="params">&#123; value, onIncrement, onDecrement &#125;</span>) =&gt;</span> (</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onIncrement&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onDecrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">);</div><div class="line"></div><div class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = <span class="number">0</span>, action</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'INCREMENT'</span>: <span class="keyword">return</span> state + <span class="number">1</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'DECREMENT'</span>: <span class="keyword">return</span> state - <span class="number">1</span>;</div><div class="line">    <span class="keyword">default</span>: <span class="keyword">return</span> state;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> store = createStore(reducer);</div><div class="line"></div><div class="line"><span class="keyword">const</span> render = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  ReactDOM.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Counter</span></span></span></div><div class="line">      <span class="attr">value</span>=<span class="string">&#123;store.getState()&#125;</span></div><div class="line">      <span class="attr">onIncrement</span>=<span class="string">&#123;()</span> =&gt; store.dispatch(&#123;type: 'INCREMENT'&#125;)&#125;</div><div class="line">      onDecrement=&#123;() =&gt; store.dispatch(&#123;type: 'DECREMENT'&#125;)&#125;</div><div class="line">    /&gt;,</div><div class="line">    document.getElementById('root')</div><div class="line">  );</div><div class="line">&#125;;</div><div class="line"></div><div class="line">render();</div><div class="line">store.subscribe(render);</div></pre></td></tr></table></figure>
<h1 id="中间件的概念"><a href="#中间件的概念" class="headerlink" title="中间件的概念"></a>中间件的概念</h1><p>Action 发出以后，Reducer 立即算出 State，这叫做同步；Action 发出以后，过一段时间再执行 Reducer，这就是异步</p>
<p>中间件就是一个函数，对store.dispatch方法进行了改造，在发出 Action 和执行 Reducer 这两步之间，添加了其他功能</p>
<p>发送 Action 的这个步骤，即store.dispatch()方法，可以添加功能</p>
<p>要添加日志功能，把 Action 和 State 打印出来，可以对store.dispatch进行如下改造</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 对store.dispatch进行了重定义，在发送 Action 前后添加了打印功能。这就是中间件的雏形</span></div><div class="line"><span class="keyword">let</span> next = store.dispatch;</div><div class="line">store.dispatch = <span class="function"><span class="keyword">function</span> <span class="title">dispatchAndLog</span>(<span class="params">action</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'dispatching'</span>, action);</div><div class="line">  next(action);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'next state'</span>, store.getState());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="中间件的用法"><a href="#中间件的用法" class="headerlink" title="中间件的用法"></a>中间件的用法</h1><p>redux-logger提供一个生成器createLogger，可以生成日志中间件logger</p>
<p>将它放在applyMiddleware方法之中，传入createStore方法，就完成了store.dispatch()的功能增强</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; applyMiddleware, createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">'redux-logger'</span>;</div><div class="line"><span class="keyword">const</span> logger = createLogger();</div><div class="line"></div><div class="line"><span class="keyword">const</span> store = createStore(</div><div class="line">  reducer,</div><div class="line">  applyMiddleware(logger)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>applyMiddleware方法的三个参数，就是三个中间件。有的中间件有次序要求，使用前要查一下文档</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// createStore方法可以接受整个应用的初始状态作为参数,applyMiddleware是第三个参数</span></div><div class="line"><span class="keyword">const</span> store = createStore(</div><div class="line">  reducer,</div><div class="line">  initial_state,</div><div class="line">  applyMiddleware(logger)</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// 中间件的次序有讲究</span></div><div class="line"><span class="keyword">const</span> store = createStore(</div><div class="line">  reducer,</div><div class="line">  applyMiddleware(thunk, promise, logger)</div><div class="line">);</div></pre></td></tr></table></figure>
<h1 id="applyMiddlewares"><a href="#applyMiddlewares" class="headerlink" title="applyMiddlewares()"></a>applyMiddlewares()</h1><p>Redux 的原生方法，作用是将所有中间件组成一个数组，依次执行</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 所有中间件被放进了一个数组chain，然后嵌套执行，最后执行store.dispatch</span></div><div class="line"><span class="comment">// 中间件内部（middlewareAPI）可以拿到getState和dispatch这两个方法</span></div><div class="line">export <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span><span class="params">(<span class="rest_arg">...middlewares</span>)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> (createStore) =&gt; (reducer, preloadedState, enhancer) =&gt; &#123;</div><div class="line">    <span class="keyword">var</span> store = createStore(reducer, preloadedState, enhancer);</div><div class="line">    <span class="keyword">var</span> dispatch = store.dispatch;</div><div class="line">    <span class="keyword">var</span> chain = [];</div><div class="line"></div><div class="line">    <span class="keyword">var</span> middlewareAPI = &#123;</div><div class="line">      getState: store.getState,</div><div class="line">      dispatch: (action) =&gt; dispatch(action)</div><div class="line">    &#125;;</div><div class="line">    chain = middlewares.map(middleware =&gt; middleware(middlewareAPI));</div><div class="line">    dispatch = compose(...chain)(store.dispatch);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;...store, dispatch&#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="异步操作的基本思路"><a href="#异步操作的基本思路" class="headerlink" title="异步操作的基本思路"></a>异步操作的基本思路</h1><p>同步操作只要发出一种 Action 即可，异步操作的差别是它要发出三种 Action</p>
<ul>
<li>操作发起时的 Action</li>
<li>操作成功时的 Action</li>
<li>操作失败时的 Action</li>
</ul>
<p>以向服务器取出数据为例，三种 Action 可以有两种不同的写法</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 写法一：名称相同，参数不同</span></div><div class="line">&#123; <span class="string">type:</span> <span class="string">'FETCH_POSTS'</span> &#125;</div><div class="line">&#123; <span class="string">type:</span> <span class="string">'FETCH_POSTS'</span>, <span class="string">status:</span> <span class="string">'error'</span>, <span class="string">error:</span> <span class="string">'Oops'</span> &#125;</div><div class="line">&#123; <span class="string">type:</span> <span class="string">'FETCH_POSTS'</span>, <span class="string">status:</span> <span class="string">'success'</span>, <span class="string">response:</span> &#123; ... &#125; &#125;</div><div class="line"></div><div class="line"><span class="comment">// 写法二：名称不同</span></div><div class="line">&#123; <span class="string">type:</span> <span class="string">'FETCH_POSTS_REQUEST'</span> &#125;</div><div class="line">&#123; <span class="string">type:</span> <span class="string">'FETCH_POSTS_FAILURE'</span>, <span class="string">error:</span> <span class="string">'Oops'</span> &#125;</div><div class="line">&#123; <span class="string">type:</span> <span class="string">'FETCH_POSTS_SUCCESS'</span>, <span class="string">response:</span> &#123; ... &#125; &#125;</div></pre></td></tr></table></figure>
<p>除了 Action 种类不同，异步操作的 State 也要进行改造，反映不同的操作状态</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// State 的属性isFetching表示是否在抓取数据</span></div><div class="line"><span class="comment">// didInvalidate表示数据是否过时，lastUpdated表示上一次更新时间</span></div><div class="line"><span class="keyword">let</span> state = &#123;</div><div class="line">  <span class="comment">// ... </span></div><div class="line">  isFetching: <span class="literal">true</span>,</div><div class="line">  didInvalidate: <span class="literal">true</span>,</div><div class="line">  lastUpdated: <span class="string">'xxxxxxx'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>整个异步操作的思路</p>
<ul>
<li>操作开始时，送出一个 Action，触发 State 更新为”正在操作”状态，View 重新渲染</li>
<li>操作结束后，再送出一个 Action，触发 State 更新为”操作结束”状态，View 再一次重新渲染</li>
</ul>
<h1 id="redux-thunk-中间件"><a href="#redux-thunk-中间件" class="headerlink" title="redux-thunk 中间件"></a>redux-thunk 中间件</h1><p>操作结束时，系统自动送出第二个 Action</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 加载成功后（componentDidMount方法），它送出了（dispatch方法）一个 Action，</span></div><div class="line"><span class="comment">// 向服务器要求数据 fetchPosts(selectedSubreddit)。这里的fetchPosts就是 Action Creator</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncApp</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    const &#123; dispatch, selectedPost &#125; = <span class="keyword">this</span>.props</div><div class="line">    dispatch(fetchPosts(selectedPost))</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="comment">// ...</span></div></pre></td></tr></table></figure>
<p>fetchPosts是一个Action Creator（动作生成器），返回一个函数</p>
<p>这个函数执行后，先发出一个Action（requestPosts(postTitle)），然后进行异步操作</p>
<p>拿到结果后，先将结果转成 JSON 格式，然后再发出一个 Action（ receivePosts(postTitle, json)）</p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016092003.jpg" alt="image"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// fetchPosts返回了一个函数，而普通的 Action Creator 默认返回一个对象</span></div><div class="line"><span class="comment">// 返回的函数的参数是dispatch和getState这两个 Redux 方法，普通的 Action Creator 的参数是 Action 的内容</span></div><div class="line"><span class="comment">// 在返回的函数之中，先发出一个 Action（requestPosts(postTitle)），表示操作开始</span></div><div class="line"><span class="comment">// 异步操作结束之后，再发出一个 Action（receivePosts(postTitle, json)），表示操作结束</span></div><div class="line"><span class="keyword">const</span> fetchPosts = <span class="function"><span class="params">postTitle</span> =&gt;</span> (dispatch, getState) =&gt; &#123;</div><div class="line">  dispatch(requestPosts(postTitle));</div><div class="line">  <span class="keyword">return</span> fetch(<span class="string">`/some/API/<span class="subst">$&#123;postTitle&#125;</span>.json`</span>)</div><div class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</div><div class="line">    .then(<span class="function"><span class="params">json</span> =&gt;</span> dispatch(receivePosts(postTitle, json)));</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 使用方法一</span></div><div class="line">store.dispatch(fetchPosts(<span class="string">'reactjs'</span>));</div><div class="line"><span class="comment">// 使用方法二</span></div><div class="line">store.dispatch(fetchPosts(<span class="string">'reactjs'</span>)).then(<span class="function"><span class="params">()</span> =&gt;</span></div><div class="line">  <span class="built_in">console</span>.log(store.getState())</div><div class="line">);</div></pre></td></tr></table></figure>
<p>Action 是由store.dispatch方法发送的。而store.dispatch方法正常情况下，参数只能是对象，不能是函数</p>
<p>这时，就要使用中间件redux-thunk</p>
<p>异步操作的第一种解决方案就是，写出一个返回函数的 Action Creator，然后使用redux-thunk中间件改造store.dispatch</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用redux-thunk中间件，改造store.dispatch，使得后者可以接受函数作为参数</span></div><div class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span>;</div><div class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducers'</span>;</div><div class="line"></div><div class="line"><span class="comment">// <span class="doctag">Note:</span> this API requires redux@&gt;=3.1.0</span></div><div class="line"><span class="keyword">const</span> store = createStore(</div><div class="line">  reducer,</div><div class="line">  applyMiddleware(thunk)</div><div class="line">);</div></pre></td></tr></table></figure>
<h1 id="redux-promise-中间件"><a href="#redux-promise-中间件" class="headerlink" title="redux-promise 中间件"></a>redux-promise 中间件</h1><p>Action Creator 可以返回函数，当然也可以返回其他值</p>
<p>让 Action Creator 返回一个 Promise 对象</p>
<p>使用redux-promise中间件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">import</span> promiseMiddleware <span class="keyword">from</span> <span class="string">'redux-promise'</span>;</div><div class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducers'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> store = createStore(</div><div class="line">  reducer,</div><div class="line">  applyMiddleware(promiseMiddleware)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>这个中间件使得store.dispatch方法可以接受 Promise 对象作为参数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 写法一，返回值是一个 Promise 对象</span></div><div class="line"><span class="keyword">const</span> fetchPosts = </div><div class="line">  <span class="function">(<span class="params">dispatch, postTitle</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">     dispatch(requestPosts(postTitle));</div><div class="line">     <span class="keyword">return</span> fetch(<span class="string">`/some/API/<span class="subst">$&#123;postTitle&#125;</span>.json`</span>)</div><div class="line">       .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</div><div class="line">         <span class="attr">type</span>: <span class="string">'FETCH_POSTS'</span>,</div><div class="line">         <span class="attr">payload</span>: response.json()</div><div class="line">       &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 写法二，Action 对象的payload属性是一个 Promise 对象。从redux-actions模块引入createAction方法</span></div><div class="line"><span class="comment">// 第二个dispatch方法发出的是异步 Action，只有等到操作结束，这个 Action 才会实际发出</span></div><div class="line"><span class="comment">// createAction的第二个参数必须是一个 Promise 对象</span></div><div class="line"><span class="keyword">import</span> &#123; createAction &#125; <span class="keyword">from</span> <span class="string">'redux-actions'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncApp</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    <span class="keyword">const</span> &#123; dispatch, selectedPost &#125; = <span class="keyword">this</span>.props</div><div class="line">    <span class="comment">// 发出同步 Action</span></div><div class="line">    dispatch(requestPosts(selectedPost));</div><div class="line">    <span class="comment">// 发出异步 Action</span></div><div class="line">    dispatch(createAction(</div><div class="line">      <span class="string">'FETCH_POSTS'</span>, </div><div class="line">      fetch(<span class="string">`/some/API/<span class="subst">$&#123;postTitle&#125;</span>.json`</span>)</div><div class="line">        .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</div><div class="line">    ));</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>redux-promise的源码</p>
<ul>
<li>Action 本身是一个 Promise，它 resolve 以后的值应该是一个 Action 对象，会被dispatch方法送出（action.then(dispatch)）</li>
<li>reject 以后不会有任何动作</li>
<li>Action 对象的payload属性是一个 Promise 对象，那么无论 resolve 和 reject，dispatch方法都会发出 Action</li>
</ul>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">export <span class="keyword">default</span> <span class="function"><span class="keyword">function</span></span> promiseMiddleware(&#123; dispatch &#125;) &#123;</div><div class="line">  <span class="keyword">return</span> next =&gt; <span class="keyword">action</span> =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="comment">!isFSA(action)) &#123;</span></div><div class="line">      <span class="keyword">return</span> isPromise(<span class="keyword">action</span>)</div><div class="line">        ? <span class="keyword">action</span>.<span class="keyword">then</span>(dispatch)</div><div class="line">        : next(<span class="keyword">action</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> isPromise(<span class="keyword">action</span>.payload)</div><div class="line">      ? <span class="keyword">action</span>.payload.<span class="keyword">then</span>(</div><div class="line">          result =&gt; dispatch(&#123; ...<span class="keyword">action</span>, payload: result &#125;),</div><div class="line">          error =&gt; &#123;</div><div class="line">            dispatch(&#123; ...<span class="keyword">action</span>, payload: error, error: true &#125;);</div><div class="line">            <span class="keyword">return</span> Promise.reject(error);</div><div class="line">          &#125;</div><div class="line">        )</div><div class="line">      : next(<span class="keyword">action</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="UI-组件"><a href="#UI-组件" class="headerlink" title="UI 组件"></a>UI 组件</h1><p>React-Redux 将所有组件分成两大类：UI 组件和容器组件</p>
<ul>
<li>只负责 UI 的呈现，不带有任何业务逻辑</li>
<li>没有状态（即不使用this.state这个变量）</li>
<li>所有数据都由参数（this.props）提供</li>
<li>不使用任何 Redux 的 API</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Title =</div><div class="line">  <span class="keyword">value</span> =&gt; &lt;h1&gt;&#123;<span class="keyword">value</span>&#125;&lt;/h1&gt;;</div></pre></td></tr></table></figure>
<h1 id="容器组件"><a href="#容器组件" class="headerlink" title="容器组件"></a>容器组件</h1><p>React-Redux 规定，所有的 UI 组件都由用户提供，容器组件则是由 React-Redux 自动生成。也就是说，用户负责视觉层，状态管理则是全部交给它</p>
<ul>
<li>负责管理数据和业务逻辑，不负责 UI 的呈现</li>
<li>带有内部状态</li>
<li>使用 Redux 的 API</li>
</ul>
<h1 id="connect"><a href="#connect" class="headerlink" title="connect()"></a>connect()</h1><p>React-Redux 提供connect方法，用于从 UI 组件生成容器组件。connect的意思，就是将这两种组件连起来</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// TodoList是 UI 组件，VisibleTodoList就是由 React-Redux 通过connect方法自动生成的容器组件</span></div><div class="line"><span class="comment">// connect方法接受两个参数：mapStateToProps和mapDispatchToProps</span></div><div class="line"><span class="comment">// 它们定义了 UI 组件的业务逻辑。前者负责输入逻辑，即将state映射到 UI 组件的参数（props），后者负责输出逻辑，即将用户对 UI 组件的操作映射成 Action</span></div><div class="line"><span class="keyword">import</span> &#123; <span class="built_in">connect</span> &#125; from <span class="string">'react-redux'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> VisibleTodoList = <span class="built_in">connect</span>(</div><div class="line">  mapStateToProps,</div><div class="line">  mapDispatchToProps</div><div class="line">)(TodoList)</div></pre></td></tr></table></figure>
<h1 id="mapStateToProps"><a href="#mapStateToProps" class="headerlink" title="mapStateToProps()"></a>mapStateToProps()</h1><p>mapStateToProps是一个函数。作用就是建立一个从（外部的）state对象到（UI 组件的）props对象的映射关系</p>
<p>mapStateToProps执行后应该返回一个对象，里面的每一个键值对就是一个映射</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// mapStateToProps是一个函数，它接受<span class="keyword">state</span>作为参数，返回一个对象</div><div class="line">// 这个对象有一个todos属性，代表 UI 组件的同名参数，后面的getVisibleTodos也是一个函数，可以从<span class="keyword">state</span>算出 todos 的值</div><div class="line">const mapStateToProps = (<span class="keyword">state</span>) =&gt; &#123;</div><div class="line">  return &#123;</div><div class="line">    todos: getVisibleTodos(<span class="keyword">state</span>.todos, <span class="keyword">state</span>.visibilityFilter)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>mapStateToProps会订阅 Store，每当state更新的时候，就会自动执行，重新计算 UI 组件的参数，从而触发 UI 组件的重新渲染</p>
<p>mapStateToProps的第一个参数总是state对象，还可以使用第二个参数，代表容器组件的props对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用ownProps作为参数后，如果容器组件的参数发生变化，也会引发 UI 组件重新渲染</span></div><div class="line"><span class="comment">// connect方法可以省略mapStateToProps参数，那样的话，UI 组件就不会订阅Store，就是说 Store 的更新不会引起 UI 组件的更新</span></div><div class="line"><span class="keyword">const</span> getVisibleTodos = <span class="function">(<span class="params">todos, filter</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">switch</span> (filter) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'SHOW_ALL'</span>:</div><div class="line">      <span class="keyword">return</span> todos</div><div class="line">    <span class="keyword">case</span> <span class="string">'SHOW_COMPLETED'</span>:</div><div class="line">      <span class="keyword">return</span> todos.filter(<span class="function"><span class="params">t</span> =&gt;</span> t.completed)</div><div class="line">    <span class="keyword">case</span> <span class="string">'SHOW_ACTIVE'</span>:</div><div class="line">      <span class="keyword">return</span> todos.filter(<span class="function"><span class="params">t</span> =&gt;</span> !t.completed)</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Unknown filter: '</span> + filter)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="mapDispatchToProps"><a href="#mapDispatchToProps" class="headerlink" title="mapDispatchToProps()"></a>mapDispatchToProps()</h1><p>mapDispatchToProps是connect函数的第二个参数，用来建立 UI 组件的参数到store.dispatch方法的映射</p>
<p>定义了哪些用户的操作应该当作 Action，传给 Store。它可以是一个函数，也可以是一个对象</p>
<p>mapDispatchToProps是一个函数，会得到dispatch和ownProps（容器组件的props对象）两个参数</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// mapDispatchToProps作为函数，应该返回一个对象，该对象的每个键值对都是一个映射，定义了 UI 组件的参数怎样发出 Action</span></div><div class="line"><span class="keyword">const</span> mapDispatchToProps = (</div><div class="line">  dispatch,</div><div class="line">  ownProps</div><div class="line">) =&gt; &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    onClick: () =&gt; &#123;</div><div class="line">      dispatch(&#123;</div><div class="line">        type: <span class="string">'SET_VISIBILITY_FILTER'</span>,</div><div class="line">        <span class="built_in">filter</span>: ownProps.<span class="built_in">filter</span></div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// mapDispatchToProps是一个对象，它的每个键名也是对应 UI 组件的同名参数，键值应该是一个函数，会被当作 Action creator ，返回的 Action 会由 Redux 自动发出</span></div><div class="line"><span class="keyword">const</span> mapDispatchToProps = &#123;</div><div class="line">  onClick: (<span class="built_in">filter</span>) =&gt; &#123;</div><div class="line">    type: <span class="string">'SET_VISIBILITY_FILTER'</span>,</div><div class="line">    <span class="built_in">filter</span>: <span class="built_in">filter</span></div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Provider-组件"><a href="#Provider-组件" class="headerlink" title="Provider 组件"></a>Provider 组件</h1><p>connect方法生成容器组件以后，需要让容器组件拿到state对象，才能生成 UI 组件的参数</p>
<p>React-Redux 提供Provider组件，可以让容器组件拿到state</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Provider在根组件外面包了一层，这样一来，App的所有子组件就默认都可以拿到state了</span></div><div class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></div><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></div><div class="line"><span class="keyword">import</span> todoApp <span class="keyword">from</span> <span class="string">'./reducers'</span></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./components/App'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> store = createStore(todoApp);</div><div class="line"></div><div class="line">render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span>,</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</div><div class="line">)</div></pre></td></tr></table></figure>
<p>原理是React组件的context属性</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Provider</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  getChildContext() &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      store: <span class="keyword">this</span>.props.store</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.children;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">Provider</span>.childContextTypes = &#123;</div><div class="line">  store: <span class="type">React</span>.<span class="type">PropTypes</span>.<span class="keyword">object</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>store放在了上下文对象context上面。然后，子组件就可以从context拿到store</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// React-Redux自动生成的容器组件的代码，就类似上面这样，从而拿到store</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">VisibleTodoList</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    const &#123; store &#125; = <span class="keyword">this</span>.context;</div><div class="line">    <span class="keyword">this</span>.unsubscribe = store.subscribe(() =&gt;</div><div class="line">      <span class="keyword">this</span>.forceUpdate()</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    const props = <span class="keyword">this</span>.props;</div><div class="line">    const &#123; store &#125; = <span class="keyword">this</span>.context;</div><div class="line">    const state = store.getState();</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">VisibleTodoList</span>.contextTypes = &#123;</div><div class="line">  store: <span class="type">React</span>.<span class="type">PropTypes</span>.<span class="keyword">object</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="实例：计数器"><a href="#实例：计数器" class="headerlink" title="实例：计数器"></a>实例：计数器</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// UI 组件有两个参数：value和onIncreaseClick。</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">const</span> &#123; value, onIncreaseClick &#125; = <span class="keyword">this</span>.props</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onIncreaseClick&#125;</span>&gt;</span>Increase<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 前者需要从state计算得到，后者需要向外发出 Action。</span></div><div class="line"><span class="comment">// 定义value到state的映射，以及onIncreaseClick到dispatch的映射</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">value</span>: state.count</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">onIncreaseClick</span>: <span class="function"><span class="params">()</span> =&gt;</span> dispatch(increaseAction)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// Action Creator</span></div><div class="line"><span class="keyword">const</span> increaseAction = &#123; <span class="attr">type</span>: <span class="string">'increase'</span> &#125;</div><div class="line"></div><div class="line"><span class="comment">// 使用connect方法生成容器组件</span></div><div class="line"><span class="keyword">const</span> App = connect(</div><div class="line">  mapStateToProps,</div><div class="line">  mapDispatchToProps</div><div class="line">)(Counter)</div><div class="line"></div><div class="line"><span class="comment">// 定义这个组件的 Reducer</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params">state = &#123; count: <span class="number">0</span> &#125;, action</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> count = state.count</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'increase'</span>:</div><div class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: count + <span class="number">1</span> &#125;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      <span class="keyword">return</span> state</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 生成store对象，并使用Provider在根组件外面包一层</span></div><div class="line"><span class="keyword">import</span> &#123; loadState, saveState &#125; <span class="keyword">from</span> <span class="string">'./localStorage'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> persistedState = loadState();</div><div class="line"><span class="keyword">const</span> store = createStore(</div><div class="line">  todoApp,</div><div class="line">  persistedState</div><div class="line">);</div><div class="line"></div><div class="line">store.subscribe(throttle(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  saveState(&#123;</div><div class="line">    <span class="attr">todos</span>: store.getState().todos,</div><div class="line">  &#125;)</div><div class="line">&#125;, <span class="number">1000</span>))</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span>,</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<h1 id="React-Router-路由库"><a href="#React-Router-路由库" class="headerlink" title="React-Router 路由库"></a>React-Router 路由库</h1><p>使用React-Router的项目，与其他项目没有不同之处，也是使用Provider在Router外面包一层，毕竟Provider的唯一功能就是传入store对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Root = <span class="function">(<span class="params">&#123; store &#125;</span>) =&gt;</span> (</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">Router</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=<span class="string">&#123;App&#125;</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></div><div class="line">);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;React 只是 DOM 的一个抽象层，并不是 Web 应用的完整解决方案。有两个方面，它没涉及&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="Redux" scheme="http://yoursite.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>React Router</title>
    <link href="http://yoursite.com/2018/07/08/2018.7.8/"/>
    <id>http://yoursite.com/2018/07/08/2018.7.8/</id>
    <published>2018-07-08T15:16:41.000Z</published>
    <updated>2018-07-20T16:55:49.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><p>首先需要安装 Node.js 环境 和包管理器 npm<br><a id="more"></a></p>
<h2 id="Clone例子"><a href="#Clone例子" class="headerlink" title="Clone例子"></a>Clone例子</h2><p>git clone <a href="https://github.com/BerlinChan/react-router-tutorial-cn.git" target="_blank" rel="external">https://github.com/BerlinChan/react-router-tutorial-cn.git</a></p>
<p>cd react-router-tutorial-cn</p>
<p>cd lessons/01-setting-up</p>
<p>npm install</p>
<p>npm start</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在浏览器中打开网址 <a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a></p>
<p>在浏览器中应该看到 “Hello React Router”</p>
<p>修改modules/App.js,修改后浏览器会自动重载更新</p>
<h2 id="初看代码"><a href="#初看代码" class="headerlink" title="初看代码"></a>初看代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// index.js</span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./modules/App'</span></div><div class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>))</div><div class="line"></div><div class="line"><span class="comment">// App.js</span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello, React Router!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h1 id="渲染路由"><a href="#渲染路由" class="headerlink" title="渲染路由"></a>渲染路由</h1><h2 id="添加hashHistory"><a href="#添加hashHistory" class="headerlink" title="添加hashHistory"></a>添加hashHistory</h2><p>React Router 实质上就是一个组件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">Router</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>))</div></pre></td></tr></table></figure>
<p>配置一个路由,打开index.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Router, Route, hashHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></div><div class="line"></div><div class="line">render((</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">history</span>=<span class="string">&#123;hashHistory&#125;</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=<span class="string">&#123;App&#125;/</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></div><div class="line">), document.getElementById('app'))</div></pre></td></tr></table></figure>
<p>命令行中输入 npm start 运行服务后, 在浏览器中访问 <a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a></p>
<p>URL 中多了一串乱七八糟的字符。 这是因为我们使用了 hashHistory, 它的作用是: 在 URL 中添加 hash 值来管理路由历史</p>
<h2 id="添加更多屏幕显示"><a href="#添加更多屏幕显示" class="headerlink" title="添加更多屏幕显示"></a>添加更多屏幕显示</h2><p>创建 2 个新组件</p>
<ul>
<li>modules/About.js</li>
<li>modules/Repos.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// modules/About.js</span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>About<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// modules/Repos.js</span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Repos<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>修改index.js</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// <span class="keyword">insert</span> <span class="keyword">into</span> index.js</div><div class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">'./modules/About'</span></div><div class="line"><span class="keyword">import</span> Repos <span class="keyword">from</span> <span class="string">'./modules/Repos'</span></div><div class="line"></div><div class="line">render((</div><div class="line">  &lt;Router history=&#123;hashHistory&#125;&gt;</div><div class="line">    &lt;Route <span class="keyword">path</span>=<span class="string">"/"</span> component=&#123;App&#125;/&gt;</div><div class="line">    &#123;<span class="comment">/* 在这里添加路由 */</span>&#125;</div><div class="line">    &lt;Route <span class="keyword">path</span>=<span class="string">"/repos"</span> component=&#123;Repos&#125;/&gt;</div><div class="line">    &lt;Route <span class="keyword">path</span>=<span class="string">"/about"</span> component=&#123;About&#125;/&gt;</div><div class="line">  &lt;/Router&gt;</div><div class="line">), document.getElementById(<span class="string">'app'</span>))</div></pre></td></tr></table></figure>
<p>现在访问 <a href="http://localhost:8080/#/about" target="_blank" rel="external">http://localhost:8080/#/about</a> 和 <a href="http://localhost:8080/#/repos" target="_blank" rel="external">http://localhost:8080/#/repos</a></p>
<h1 id="使用链接导航"><a href="#使用链接导航" class="headerlink" title="使用链接导航"></a>使用链接导航</h1><p>最常用的组件也许就是 Link</p>
<p>使用 <a> 来导航非常相似，只是它链接的内容是由 Router 渲染到页面上</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// modules/App.js</span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>React Router Tutorial<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">role</span>=<span class="string">"nav"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/about"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/repos"</span>&gt;</span>Repos<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>现在访问 <a href="http://localhost:8080，点击上面的链接，然后点浏览器的前进、后退" target="_blank" rel="external">http://localhost:8080，点击上面的链接，然后点浏览器的前进、后退</a></p>
<h1 id="嵌套的路由"><a href="#嵌套的路由" class="headerlink" title="嵌套的路由"></a>嵌套的路由</h1><p>React Router 的路由嵌套提供了另外一种方法来实现 UI 复用</p>
<h2 id="复用导航栏"><a href="#复用导航栏" class="headerlink" title="复用导航栏"></a>复用导航栏</h2><p>将 About 和 Repos 组件嵌套进 App 中， 这样我们就能将导航栏复用到本应用程序所有的界面显示中</p>
<p>首先,移动其他的路由到 App Route 其下，成为 App 的子组件</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="xml">// index.js</span></div><div class="line">// ...</div><div class="line">render((</div><div class="line">  <span class="tag">&lt;<span class="name">Router</span> <span class="attr">history</span>=</span><span class="template-variable">&#123;hashHistory&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=</span><span class="template-variable">&#123;App&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">      <span class="template-tag">&#123;/* 使如下路由成为 `<span class="name">App</span>` 的子元素 */&#125;</span><span class="xml"></span></div><div class="line">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/repos"</span> <span class="attr">component</span>=</span><span class="template-variable">&#123;Repos&#125;</span><span class="xml"><span class="tag">/&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/about"</span> <span class="attr">component</span>=</span><span class="template-variable">&#123;About&#125;</span><span class="xml"><span class="tag">/&gt;</span></span></div><div class="line">    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></div><div class="line">), document.getElementById('app'))</div></pre></td></tr></table></figure>
<p>然后，在 App 中渲染子组件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// modules/App.js</span></div><div class="line"><span class="comment">// ...</span></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Ghettohub Issues<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">role</span>=<span class="string">"nav"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/about"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/repos"</span>&gt;</span>Repos<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line">        &#123;/* 记得加下面这行 */&#125;</div><div class="line">        &#123;this.props.children&#125;</div><div class="line"></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line"><span class="comment">// ...</span></div></pre></td></tr></table></figure>
<p>现在点击链接并观察，当路由改变的时候， App 组件通过 this.props.children 将对应的子组件渲染到界面上</p>
<h1 id="激活项-Link"><a href="#激活项-Link" class="headerlink" title="激活项 Link"></a>激活项 Link</h1><p>Link 与 a 的一个不同之处就是，它知道它自身是否为当前激活项， 并将自己的样式与非激活项区分开</p>
<h2 id="激活项样式"><a href="#激活项样式" class="headerlink" title="激活项样式"></a>激活项样式</h2><p>在 Link 中添加 activeStyle 属性</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 现在当你点击链接的时候，活动项显示为红色</span></div><div class="line"><span class="comment">// modules/App.js</span></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/about"</span> <span class="attr">activeStyle</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> '<span class="attr">red</span>' &#125;&#125;&gt;</span>About<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/repos"</span> <span class="attr">activeStyle</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> '<span class="attr">red</span>' &#125;&#125;&gt;</span>Repos<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h2 id="活动项类名"><a href="#活动项类名" class="headerlink" title="活动项类名"></a>活动项类名</h2><p>使用一个活动项类名 activeClassName 代替内联样式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// modules/App.js</span></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/about"</span> <span class="attr">activeClassName</span>=<span class="string">"active"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/repos"</span> <span class="attr">activeClassName</span>=<span class="string">"active"</span>&gt;</span>Repos<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>从外部文件中引用,若 Webpack 没有编译 index.html,你需要手动刷新浏览器来呈现上面的代码修改</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// index.html</span></div><div class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"index.css"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// css 文件中的内容</span></div><div class="line"><span class="selector-class">.active</span> &#123;</div><div class="line">  <span class="attribute">color</span>: green;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="包裹导航栏-Nav-中的-Link"><a href="#包裹导航栏-Nav-中的-Link" class="headerlink" title="包裹导航栏 Nav 中的 Link"></a>包裹导航栏 Nav 中的 Link</h2><p>将 activeClassName 或 activeStyle 包裹到组件中</p>
<p>用扩展运算符，它的写法是 …</p>
<p>扩展运算符传递父组件所有props到组件中,与activeClassName一同成为该组件的props</p>
<p>创建 modules/NavLink.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// modules/NavLink.js</span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Link</span> &#123;<span class="attr">...this.props</span>&#125; <span class="attr">activeClassName</span>=<span class="string">"active"</span>/&gt;</span></span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>替换 App 中的 Link 为 NavLink</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// modules/App.js</span></div><div class="line"><span class="keyword">import</span> NavLink <span class="keyword">from</span> <span class="string">'./NavLink'</span></div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line"></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">"/about"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">"/repos"</span>&gt;</span>Repos<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h1 id="URL-参数"><a href="#URL-参数" class="headerlink" title="URL 参数"></a>URL 参数</h1><p>以 : 开头的部分就是 URL 参数名，参数值会被解析成 URL 中匹配的字符， 这个值可通过路由组件中的 this.props.params[参数名] 来访问</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如下的 URL</span></div><div class="line"><span class="meta-keyword">/repos/</span>reactjs/react-router</div><div class="line"><span class="meta-keyword">/repos/</span>facebook/react</div><div class="line"></div><div class="line"><span class="comment">// URL 按照下面的模式来匹配</span></div><div class="line"><span class="meta-keyword">/repos/</span>:userName/:repoName</div></pre></td></tr></table></figure>
<h2 id="添加一个带参数的路由组件"><a href="#添加一个带参数的路由组件" class="headerlink" title="添加一个带参数的路由组件"></a>添加一个带参数的路由组件</h2><p>首先需要有个组件，当进入这个路由的时候显示相应内容， 新建文件 modules/Repo.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// modules/Repo.js</span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;this.props.params.repoName&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>到 index.js 中添加新路由</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="xml">// ...</span></div><div class="line">// import Repo</div><div class="line">import Repo from './modules/Repo'</div><div class="line"></div><div class="line">render((</div><div class="line">  <span class="tag">&lt;<span class="name">Router</span> <span class="attr">history</span>=</span><span class="template-variable">&#123;hashHistory&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=</span><span class="template-variable">&#123;App&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/repos"</span> <span class="attr">component</span>=</span><span class="template-variable">&#123;Repos&#125;</span><span class="xml"><span class="tag">/&gt;</span></span></div><div class="line">      <span class="template-tag">&#123;/* 添加新路由 */&#125;</span><span class="xml"></span></div><div class="line">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/repos/:userName/:repoName"</span> <span class="attr">component</span>=</span><span class="template-variable">&#123;Repo&#125;</span><span class="xml"><span class="tag">/&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/about"</span> <span class="attr">component</span>=</span><span class="template-variable">&#123;About&#125;</span><span class="xml"><span class="tag">/&gt;</span></span></div><div class="line">    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></div><div class="line">), document.getElementById('app'))</div></pre></td></tr></table></figure>
<p>在 Repos.js 中添加一些链接地址并指向新添加的路由</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Repos.js</span></div><div class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></div><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Repos<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"></div><div class="line">        &#123;/* 添加一些连接 */&#125;</div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/repos/reactjs/react-router"</span>&gt;</span>React Router<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/repos/facebook/react"</span>&gt;</span>React<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>路由中 path 的值成为子组件中的 props。 repoName 和 userName 都可以在组件中通过 this.props.params 访问到</p>
<h1 id="更多嵌套"><a href="#更多嵌套" class="headerlink" title="更多嵌套"></a>更多嵌套</h1><p>点击 Repos 下的二级导航后，二级导航链接列表会消失</p>
<p>让二级导航链接一直显示，就像全局导航栏</p>
<p>首先，嵌套 Repo 到 Repos 路由下。 然后在 Repos 中渲染 this.props.children</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="xml">// index.js</span></div><div class="line">// ...</div><div class="line"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/repos"</span> <span class="attr">component</span>=</span><span class="template-variable">&#123;Repos&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/repos/:userName/:repoName"</span> <span class="attr">component</span>=</span><span class="template-variable">&#123;Repo&#125;</span><span class="xml"><span class="tag">/&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></div><div class="line"></div><div class="line">// Repos.js</div><div class="line">// ...</div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Repos<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/repos/reactjs/react-router"</span>&gt;</span>React Router<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/repos/facebook/react"</span>&gt;</span>React<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="template-tag">&#123;/* 当 <span class="name">URL</span> 匹配 /repos/:userName/:repoName 时渲染 `Repo.js` */&#125;</span><span class="xml"></span></div><div class="line">  <span class="template-variable">&#123;this.props.children&#125;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="活动项-Links"><a href="#活动项-Links" class="headerlink" title="活动项 Links"></a>活动项 Links</h2><p>把之前添加的 NavLink 组件用上，用于为活动项链接添加类名 active</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// modules/Repos.js</span></div><div class="line"><span class="comment">// import it</span></div><div class="line"><span class="keyword">import</span> NavLink <span class="keyword">from</span> <span class="string">'./NavLink'</span></div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">"/repos/reactjs/react-router"</span>&gt;</span>React Router<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">"/repos/facebook/react"</span>&gt;</span>React<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"><span class="comment">// ...</span></div></pre></td></tr></table></figure>
<p>页面最上面全局导航的 /repos 链接和其下的二级导航 repo 都被标示为活动项,当子元素为活动项时，其父元素当然也是活动项</p>
<h1 id="首页路由"><a href="#首页路由" class="headerlink" title="首页路由"></a>首页路由</h1><p>当访问这个应用的 / 地址时，渲染 Home 首页界面</p>
<p>先创建 Home 组件，然后讨论如何将其指定为 / 时渲染</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// modules/Home.js</span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>一种做法是检查 App 中是否有子元素， 若没有的话就渲染 Home 组件</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// modules/App.js</span></div><div class="line">import Home from <span class="string">'./Home'</span></div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line">&lt;<span class="keyword">div</span>&gt;</div><div class="line">  &#123;<span class="comment">/* ... */</span>&#125;</div><div class="line">  &#123;<span class="keyword">this</span>.props.children || &lt;Home/&gt;&#125;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div><div class="line"><span class="comment">//...</span></div></pre></td></tr></table></figure>
<p>访问到首页的时候， 是像访问 About 和 Repos 时候那样被路由指定进入的</p>
<p>更加利于将 Home 从 App 中解耦，让路由配置决定应该渲染什么子元素</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="xml">// index.js</span></div><div class="line">// new imports:</div><div class="line">// add `IndexRoute` to 'react-router' imports</div><div class="line">import <span class="template-variable">&#123; Router, Route, hashHistory, IndexRoute &#125;</span><span class="xml"> from 'react-router'</span></div><div class="line">// and the Home component</div><div class="line">import Home from './modules/Home'</div><div class="line"></div><div class="line">// ...</div><div class="line"></div><div class="line">render((</div><div class="line">  <span class="tag">&lt;<span class="name">Router</span> <span class="attr">history</span>=</span><span class="template-variable">&#123;hashHistory&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=</span><span class="template-variable">&#123;App&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line"></div><div class="line">      <span class="template-tag">&#123;/* 在这里添加 `/` 时渲染的内容 */&#125;</span><span class="xml"></span></div><div class="line">      <span class="tag">&lt;<span class="name">IndexRoute</span> <span class="attr">component</span>=</span><span class="template-variable">&#123;Home&#125;</span><span class="xml"><span class="tag">/&gt;</span></span></div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/repos"</span> <span class="attr">component</span>=</span><span class="template-variable">&#123;Repos&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/repos/:userName/:repoName"</span> <span class="attr">component</span>=</span><span class="template-variable">&#123;Repo&#125;</span><span class="xml"><span class="tag">/&gt;</span></span></div><div class="line">      <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/about"</span> <span class="attr">component</span>=</span><span class="template-variable">&#123;About&#125;</span><span class="xml"><span class="tag">/&gt;</span></span></div><div class="line">    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></div><div class="line">), document.getElementById('app'))</div></pre></td></tr></table></figure>
<p>现在打开 <a href="http://localhost:8080，新添加的" target="_blank" rel="external">http://localhost:8080，新添加的</a> Home 组件被渲染了</p>
<p>IndexRoute 中没有指定 path 属性</p>
<p>当没有其他的子元素匹配路由的时候，它指向的组件会成为父元素的 this.props.children 被渲染， 这其实也是路由精确匹配所得到的结果</p>
<p>用类比的方式来帮助理解: 当你访问 / 的时候, web 服务器会去找 index.html 页面,React Router 是一样的, 当路由路径匹配到 / 的时候, 去找首页路由</p>
<h1 id="首页链接"><a href="#首页链接" class="headerlink" title="首页链接"></a>首页链接</h1><p>添加链接可以链接返回到Home组件</p>
<p>Home 的链接总是显示为激活项</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// in App.js</span></div><div class="line"><span class="comment">// ...</span></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"><span class="comment">// ...</span></div></pre></td></tr></table></figure>
<h2 id="IndexLink"><a href="#IndexLink" class="headerlink" title="IndexLink"></a>IndexLink</h2><p>使用 IndexLink 链接到首页路由</p>
<p>当我们访问到首页路由的时候, 这个链接才会被标示为激活项</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// App.js</span></div><div class="line"><span class="keyword">import</span> &#123; IndexLink &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">IndexLink</span> <span class="attr">to</span>=<span class="string">"/"</span> <span class="attr">activeClassName</span>=<span class="string">"active"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">IndexLink</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h2 id="onlyActiveOnIndex-属性"><a href="#onlyActiveOnIndex-属性" class="headerlink" title="onlyActiveOnIndex 属性"></a>onlyActiveOnIndex 属性</h2><p>为 Link 添加 onlyActiveOnIndex 属性也可以达到一样的效果</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">"/"</span> <span class="attr">activeClassName</span>=<span class="string">"active"</span> <span class="attr">onlyActiveOnIndex</span>=<span class="string">&#123;true&#125;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>在 NavLink 组件中, 我们使用 {…spread} 扩展运算符, 传递父组件所有的 props 给其中的 Link</p>
<p>这样当渲染一个 NavLink 组件的时候, 其中的所有 props 都能传递到 Link 组件中</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">"/"</span> <span class="attr">onlyActiveOnIndex</span>=<span class="string">&#123;true&#125;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h1 id="清理浏览器历史的-URL"><a href="#清理浏览器历史的-URL" class="headerlink" title="清理浏览器历史的 URL"></a>清理浏览器历史的 URL</h1><p>现代浏览器允许 JavaScript 脚本操作 URL 而不发起新的 http 请求, 因此不必再依赖 hash (#) 作为 URL 的一部分来实现路由</p>
<h2 id="配置浏览器历史"><a href="#配置浏览器历史" class="headerlink" title="配置浏览器历史"></a>配置浏览器历史</h2><p>打开 index.js 将导入的 hashHistory 替换成 browserHistory</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// index.js</span></div><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="comment">// 替换 `hashHistory` 为 `browserHistory`</span></div><div class="line"><span class="keyword">import</span> &#123; Router, Route, browserHistory, IndexRoute &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></div><div class="line"></div><div class="line">render((</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">history</span>=<span class="string">&#123;browserHistory&#125;</span>&gt;</span></span></div><div class="line">    &#123;/* ... */&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></div><div class="line">), <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>))</div></pre></td></tr></table></figure>
<h2 id="配置你的服务器"><a href="#配置你的服务器" class="headerlink" title="配置你的服务器"></a>配置你的服务器</h2><p>不论访问什么 URL, 服务器都应该响应返回你的应用程序, 因为应用程序是在浏览器中解析 URL 并操作路由</p>
<p>当前我们的服务器不知该如何处理不同的 URL, 于是返回了Cannot GET /repos</p>
<p>Webpack Dev Server 有一个选项, 用来使服务器总是响应返回应用程序</p>
<p>打开 package.json 然后添加 –history-api-fallback</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"<span class="keyword">start</span><span class="string">": "</span>webpack-dev-<span class="keyword">server</span> <span class="comment">--inline --content-base . --history-api-fallback"</span></div></pre></td></tr></table></figure>
<p>index.html 中的相对路径改成绝对路径</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html --&gt;</span></div><div class="line"><span class="comment">&lt;!-- index.css -&gt; /index.css --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/index.css"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- bundle.js -&gt; /bundle.js --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="配置生产环境服务器"><a href="#配置生产环境服务器" class="headerlink" title="配置生产环境服务器"></a>配置生产环境服务器</h1><p>Webpack dev server 不是用于生产环境的服务器,建立一个生产环境服务器, 然后写一个用来识别不同环境, 启动相应服务器的脚本</p>
<p>安装一些模块</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install express<span class="built_in"> if-env </span>compression --save</div></pre></td></tr></table></figure>
<p>运行 npm start 的时候, 脚本会检查 NODE_ENV 的值是否为 production</p>
<p>如果是的, 脚本会运行 npm run start:prod, 反之则是运行 npm run start:dev</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// package.json</span></div><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">  <span class="string">"start"</span>: <span class="string">"if-env NODE_ENV=production &amp;&amp; npm run start:prod || npm run start:dev"</span>,</div><div class="line">  <span class="string">"start:dev"</span>: <span class="string">"webpack-dev-server --inline --content-base . --history-api-fallback"</span>,</div><div class="line">  <span class="string">"start:prod"</span>: <span class="string">"webpack &amp;&amp; node server.js"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用 Express 创建一个生产服务器, 建立配置文件 server.js, 放根目录</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// server.js</span></div><div class="line"><span class="keyword">var</span> express = <span class="keyword">require</span>(<span class="string">'express'</span>)</div><div class="line"><span class="keyword">var</span> path = <span class="keyword">require</span>(<span class="string">'path'</span>)</div><div class="line"><span class="keyword">var</span> compression = <span class="keyword">require</span>(<span class="string">'compression'</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> app = express()</div><div class="line"></div><div class="line"><span class="comment">// 伺服像 index.css 这类静态文件</span></div><div class="line">app.<span class="keyword">use</span>(express.<span class="keyword">static</span>(__dirname))</div><div class="line"></div><div class="line"><span class="comment">// 响应所有的请求并返回 index.html 页面, 这样 React Router 中的 browserHistory 就能工作了</span></div><div class="line">app.get(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span> </span>&#123;</div><div class="line">  res.sendFile(path.join(__dirname, <span class="string">'index.html'</span>))</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">var</span> PORT = process.env.PORT || <span class="number">8080</span></div><div class="line">app.listen(PORT, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">  console.log(<span class="string">'生产 Express 服务器运行在 localhost:'</span> + PORT)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>运行</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">NODE_ENV</span>=production npm start</div><div class="line"><span class="comment"># Windows 用户请输入:</span></div><div class="line"><span class="comment"># SET NODE_ENV=production npm start</span></div></pre></td></tr></table></figure>
<p>导航到 <a href="http://localhost:8080/package.json,直接暴露配置文件信息" target="_blank" rel="external">http://localhost:8080/package.json,直接暴露配置文件信息</a></p>
<p>移动一些文件, 然后修改静态文件路径配置</p>
<ul>
<li>建立一个 public 目录</li>
<li>移动 index.html 和 index.css 到该目录下</li>
</ul>
<p>修改 server.js, 将静态文件目录指定到正确的位置</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// server.js</span></div><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="comment">// add path.join here</span></div><div class="line">app.<span class="keyword">use</span>(express.<span class="keyword">static</span>(path.join(__dirname, <span class="string">'public'</span>)))</div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line">app.get(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span> </span>&#123;</div><div class="line">  <span class="comment">// and drop 'public' in the middle of here</span></div><div class="line">  res.sendFile(path.join(__dirname, <span class="string">'public'</span>, <span class="string">'index.html'</span>))</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>修改 webpack 的配置, 告诉它构建的目标路径</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="attribute">output</span>: &#123;</div><div class="line">  <span class="attribute">path</span>: <span class="string">'public'</span>,</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改package.json,在 npm run start:dev 后面添加 –content-base 参数</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"<span class="keyword">start</span>:dev<span class="string">": "</span>webpack-dev-<span class="keyword">server</span> <span class="comment">--inline --content-base public --history-api-fallback",</span></div></pre></td></tr></table></figure>
<p>现的服务器不会伺服 public 目录之外的文件了, 最后再为 webpack 加上代码压缩的配置, 并给 express 配置上 gzip 压缩</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"></div><div class="line"><span class="comment">// make sure to import this</span></div><div class="line"><span class="keyword">var</span> webpack = require(<span class="string">'webpack'</span>)</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line"></div><div class="line">  <span class="comment">// add this handful of plugins that optimize the build</span></div><div class="line">  <span class="comment">// when we're in production</span></div><div class="line">  plugins: <span class="type">process</span>.env.NODE_ENV === <span class="string">'production'</span> ? [</div><div class="line">    <span class="keyword">new</span> <span class="type">webpack</span>.optimize.DedupePlugin(),</div><div class="line">    <span class="keyword">new</span> <span class="type">webpack</span>.optimize.OccurrenceOrderPlugin(),</div><div class="line">    <span class="keyword">new</span> <span class="type">webpack</span>.optimize.UglifyJsPlugin()</div><div class="line">  ] : <span class="type"></span>[],</div><div class="line"></div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>express 服务器配置压缩</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// server.js</span></div><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="keyword">var</span> compression = <span class="keyword">require</span>(<span class="string">'compression'</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> app = express()</div><div class="line"><span class="comment">// must be first!</span></div><div class="line">app.<span class="keyword">use</span>(compression())</div></pre></td></tr></table></figure>
<p>以生产环境模式来启动服务</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">NODE_ENV</span>=production npm start</div></pre></td></tr></table></figure>
<h1 id="编程实现导航"><a href="#编程实现导航" class="headerlink" title="编程实现导航"></a>编程实现导航</h1><p>大部分的导航链接使用 Link 实现, 但你也可以编程实现应用程序中的导航, 比如响应表单的提交、按钮的点击</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Repos 中添加表单, 并编程实现导航</span></div><div class="line"><span class="comment">// modules/Repos.js</span></div><div class="line">import React from <span class="string">'react'</span></div><div class="line">import NavLink from <span class="string">'./NavLink'</span></div><div class="line"></div><div class="line">export default React.createClass(&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 添加如下方法</span></div><div class="line">  handleSubmit(event) &#123;</div><div class="line">    event.preventDefault()</div><div class="line">    const userName = event<span class="selector-class">.target</span><span class="selector-class">.elements</span>[<span class="number">0</span>]<span class="selector-class">.value</span></div><div class="line">    const repo = event<span class="selector-class">.target</span><span class="selector-class">.elements</span>[<span class="number">1</span>]<span class="selector-class">.value</span></div><div class="line">    const path = `/repos/$&#123;userName&#125;/$&#123;repo&#125;`</div><div class="line">    console.log(path)</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;h2&gt;Repos&lt;/h2&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">          &lt;li&gt;&lt;NavLink to=<span class="string">"/repos/reactjs/react-router"</span>&gt;React Router&lt;/NavLink&gt;&lt;/li&gt;</div><div class="line">          &lt;li&gt;&lt;NavLink to=<span class="string">"/repos/facebook/react"</span>&gt;React&lt;/NavLink&gt;&lt;/li&gt;</div><div class="line">          &#123;<span class="comment">/* 添加表单 */</span>&#125;</div><div class="line">          &lt;li&gt;</div><div class="line">            &lt;<span class="selector-tag">form</span> onSubmit=&#123;this.handleSubmit&#125;&gt;</div><div class="line">              &lt;<span class="selector-tag">input</span> type=<span class="string">"text"</span> placeholder=<span class="string">"userName"</span>/&gt; / &#123;<span class="string">' '</span>&#125;</div><div class="line">              &lt;<span class="selector-tag">input</span> type=<span class="string">"text"</span> placeholder=<span class="string">"repo"</span>/&gt;&#123;<span class="string">' '</span>&#125;</div><div class="line">              &lt;<span class="selector-tag">button</span> type=<span class="string">"submit"</span>&gt;Go&lt;/button&gt;</div><div class="line">            &lt;/form&gt;</div><div class="line">          &lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">        &#123;this<span class="selector-class">.props</span><span class="selector-class">.children</span>&#125;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>将 browserHistory 传递到文件 index.js 内的 Router 当中, 然后推送一个新的 URL 到浏览历史中从而渲染新的内容</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// modules/Repos.js</span></div><div class="line"><span class="keyword">import</span> &#123; browserHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line">  handleSubmit(event) &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="keyword">const</span> path = <span class="string">`/repos/<span class="subst">$&#123;userName&#125;</span>/<span class="subst">$&#123;repo&#125;</span>`</span></div><div class="line">    browserHistory.push(path)</div><div class="line">  &#125;,</div><div class="line"><span class="comment">// ...</span></div></pre></td></tr></table></figure>
<p>利用 React 的”上下文特性” 来直接使用父组件 index.js 中 Router 提供的 router</p>
<p>首先在组件中关联上下文, 然后使用它</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">export default React.createClass(&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 从上下文中获取 `router`</span></div><div class="line">  contextTypes: &#123;</div><div class="line">    router: React<span class="selector-class">.PropTypes</span><span class="selector-class">.object</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// ...</span></div><div class="line"></div><div class="line">  handleSubmit(event) &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    this<span class="selector-class">.context</span><span class="selector-class">.router</span><span class="selector-class">.push</span>(path)</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// ..</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h1 id="服务器渲染"><a href="#服务器渲染" class="headerlink" title="服务器渲染"></a>服务器渲染</h1><p>在 React 中, 服务器渲染是一个简单的核心概念</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, domNode)</div><div class="line"><span class="comment">// 下面可以调用服务器渲染</span></div><div class="line"><span class="keyword">const</span> markup = renderToString(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>)</div></pre></td></tr></table></figure>
<p>webpack 来打包生成一个运行在服务器端的应用包,创建名为 webpack.server.config.js 的配置文件</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"></div><div class="line">  entry: path.resolve(__dirname, <span class="string">'server.js'</span>),</div><div class="line"></div><div class="line">  output: &#123;</div><div class="line">    filename: <span class="string">'server.bundle.js'</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  target: <span class="string">'node'</span>,</div><div class="line"></div><div class="line">  <span class="comment">// 将 node_module 目录排除到应用包之外</span></div><div class="line">  externals: fs.readdirSync(path.resolve(__dirname, <span class="string">'node_modules'</span>)).concat([</div><div class="line">    <span class="string">'react-dom/server'</span>, <span class="string">'react/addons'</span>,</div><div class="line">  ]).reduce(<span class="function"><span class="keyword">function</span> (<span class="params">ext, mod</span>) </span>&#123;</div><div class="line">    ext[mod] = <span class="string">'commonjs '</span> + mod</div><div class="line">    <span class="keyword">return</span> ext</div><div class="line">  &#125;, &#123;&#125;),</div><div class="line"></div><div class="line">  node: &#123;</div><div class="line">    __filename: <span class="literal">true</span>,</div><div class="line">    __dirname: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="keyword">module</span>: &#123;</div><div class="line">    loaders: [</div><div class="line">      &#123; test: <span class="regexp">/\.js$/</span>, exclude: <span class="regexp">/node_modules/</span>, loader: <span class="string">'babel-loader?presets[]=es2015&amp;presets[]=react'</span> &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更新 package.json 配置</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">  <span class="string">"start"</span>: <span class="string">"if-env NODE_ENV=production &amp;&amp; npm run start:prod || npm run start:dev"</span>,</div><div class="line">  <span class="string">"start:dev"</span>: <span class="string">"webpack-dev-server --inline --content-base public/ --history-api-fallback"</span>,</div><div class="line">  <span class="string">"start:prod"</span>: <span class="string">"npm run build &amp;&amp; node server.bundle.js"</span>,</div><div class="line">  <span class="string">"build:client"</span>: <span class="string">"webpack"</span>,</div><div class="line">  <span class="string">"build:server"</span>: <span class="string">"webpack --config webpack.server.config.js"</span>,</div><div class="line">  <span class="string">"build"</span>: <span class="string">"npm run build:client &amp;&amp; npm run build:server"</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>运行命令行,服务器端也能运行应用并渲染页面</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">NODE_ENV</span>=production npm start</div></pre></td></tr></table></figure>
<p>为了让路由在服务器端与客户端都可以运行, 我们需要将它放到一个单独的模块中</p>
<p>创建文件 modules/routes, 然后将路由配置移动到其中</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// modules/routes.js</span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123; Route, IndexRoute &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></div><div class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">'./About'</span></div><div class="line"><span class="keyword">import</span> Repos <span class="keyword">from</span> <span class="string">'./Repos'</span></div><div class="line"><span class="keyword">import</span> Repo <span class="keyword">from</span> <span class="string">'./Repo'</span></div><div class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./Home'</span></div><div class="line"></div><div class="line"><span class="keyword">module</span>.exports = (</div><div class="line">  &lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;&gt;</div><div class="line">    &lt;IndexRoute component=&#123;Home&#125;/&gt;</div><div class="line">    &lt;Route path=<span class="string">"/repos"</span> component=&#123;Repos&#125;&gt;</div><div class="line">      &lt;Route path=<span class="string">"/repos/:userName/:repoName"</span> component=&#123;Repo&#125;/&gt;</div><div class="line">    &lt;/Route&gt;</div><div class="line">    &lt;Route path=<span class="string">"/about"</span> component=&#123;About&#125;/&gt;</div><div class="line">  &lt;/Route&gt;</div><div class="line">)</div></pre></td></tr></table></figure>
<p>修改index.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// index.js</span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span></div><div class="line"><span class="keyword">import</span> &#123; Router, browserHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></div><div class="line"><span class="comment">// import routes and pass them into &lt;Router/&gt;</span></div><div class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">'./modules/routes'</span></div><div class="line"></div><div class="line">render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">routes</span>=<span class="string">&#123;routes&#125;</span> <span class="attr">history</span>=<span class="string">&#123;browserHistory&#125;/</span>&gt;</span>,</span></div><div class="line">  document.getElementById('app')</div><div class="line">)</div></pre></td></tr></table></figure>
<p>打开文件 server.js,从 React Router 中导入 match 和 RouterContext, 这样路由就会先根据 URL 完成匹配, 然后完成渲染</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="comment">// import some new stuff</span></div><div class="line">import React from <span class="string">'react'</span></div><div class="line"><span class="comment">// 下面这个是用于做服务器端渲染的</span></div><div class="line">import &#123; renderToString &#125; from <span class="string">'react-dom/server'</span></div><div class="line"><span class="comment">// 下面的用于使路由匹配 URL, 然后做渲染</span></div><div class="line">import &#123; match, RouterContext &#125; from <span class="string">'react-router'</span></div><div class="line">import routes from <span class="string">'./modules/routes'</span></div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line"></div><div class="line"><span class="comment">// 发送所有请求到 index.html 让 browserHistory 正常工作</span></div><div class="line"></div><div class="line">app.get(<span class="string">'*'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="comment">//匹配路由到 URL</span></div><div class="line">  match(&#123; routes: routes, location: req.url &#125;, (err, redirect, props) =&gt; &#123;</div><div class="line">    <span class="comment">// `Router` 渲染的就是 `RouterContext` 对象。</span></div><div class="line">    <span class="comment">// `Router` 会侦听 `browserHistroy`, 并将历史保存在 `props` 中。</span></div><div class="line">    <span class="comment">// 但是在服务器端, 应用程序是无状态的,</span></div><div class="line">    <span class="comment">// 所以我们需要用 ` match` 获取</span></div><div class="line">    <span class="comment">// `RouterContext` is the what `Router` renders. `Router` keeps these</span></div><div class="line">    <span class="comment">// `props` in its state as it listens to `browserHistory`. But on the</span></div><div class="line">    <span class="comment">// server our app is stateless, so we need to use `match` to</span></div><div class="line">    <span class="comment">// get these props before rendering.</span></div><div class="line">    <span class="keyword">const</span> appHtml = renderToString(&lt;RouterContext &#123;...props&#125;/&gt;)</div><div class="line"></div><div class="line">    <span class="comment">// dump the HTML into a template, lots of ways to do this, but none are</span></div><div class="line">    <span class="comment">// really influenced by React Router, so we're just using a little</span></div><div class="line">    <span class="comment">// function, `renderPage`</span></div><div class="line">    res.send(renderPage(appHtml))</div><div class="line">  &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderPage</span><span class="params">(appHtml)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> `</div><div class="line">    &lt;!doctype html <span class="keyword">public</span>=<span class="string">"storage"</span>&gt;</div><div class="line">    &lt;html&gt;</div><div class="line">    &lt;meta charset=utf<span class="number">-8</span>/&gt;</div><div class="line">    &lt;title&gt;My First React Router App&lt;/title&gt;</div><div class="line">    &lt;link rel=stylesheet href=/index.css&gt;</div><div class="line">    &lt;div id=app&gt;$&#123;appHtml&#125;&lt;/div&gt;</div><div class="line">    &lt;script src=<span class="string">"/bundle.js"</span>&gt;&lt;/script&gt;</div><div class="line">   `</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> PORT = process.env.PORT || <span class="number">8080</span></div><div class="line">app.listen(PORT, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">  console.log(<span class="string">'Production Express server running at localhost:'</span> + PORT)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>运行命令行</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">NODE_ENV</span>=production npm start</div></pre></td></tr></table></figure>
<p>实际生产环境的回调如下</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">app</span>.<span class="built_in">get</span>('*', (req, res) =&gt; &#123;</div><div class="line">  <span class="built_in">match</span>(&#123; routes: routes, location: req.url &#125;, (<span class="keyword">err</span>, redirect, props) =&gt; &#123;</div><div class="line">    <span class="comment">// in here we can make some decisions all at once</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">err</span>) &#123;</div><div class="line">      <span class="comment">// there was an error somewhere during route matching</span></div><div class="line">      res.status(500).send(<span class="keyword">err</span>.message)</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (redirect) &#123;</div><div class="line">      <span class="comment">// we haven't talked about `onEnter` hooks on routes, but before a</span></div><div class="line">      <span class="comment">// route is entered, it can redirect. Here we handle on the server.</span></div><div class="line">      res.redirect(redirect.pathname + redirect.<span class="keyword">search</span>)</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (props) &#123;</div><div class="line">      <span class="comment">// if we got props then we matched a route and can render</span></div><div class="line">      <span class="keyword">const</span> appHtml = renderToString(&lt;RouterContext &#123;...props&#125;/&gt;)</div><div class="line">      res.send(renderPage(appHtml))</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// no errors, no redirect, we just didn't match anything</span></div><div class="line">      res.status(404).send('Not Found')</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;h2 id=&quot;前置&quot;&gt;&lt;a href=&quot;#前置&quot; class=&quot;headerlink&quot; title=&quot;前置&quot;&gt;&lt;/a&gt;前置&lt;/h2&gt;&lt;p&gt;首先需要安装 Node.js 环境 和包管理器 npm&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="React Router" scheme="http://yoursite.com/tags/React-Router/"/>
    
  </entry>
  
  <entry>
    <title>PHP基础</title>
    <link href="http://yoursite.com/2018/07/05/2018.7.5/"/>
    <id>http://yoursite.com/2018/07/05/2018.7.5/</id>
    <published>2018-07-05T15:16:41.000Z</published>
    <updated>2018-07-11T00:17:59.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP-学习准备"><a href="#PHP-学习准备" class="headerlink" title="PHP 学习准备"></a>PHP 学习准备</h1><h2 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h2><p>1.熟悉HTML/CSS/JS等网页基本元素，完成阶段可自行制作简单的网页，对元素属性相对熟悉</p>
<p>2.理解动态语言的概念和运做机制，熟悉基本的PHP语法<br><a id="more"></a><br>3.学习如何将PHP与HTML结合起来，完成简单的动态页面</p>
<p>4.接触学习MySQL，开始设计数据库</p>
<p>5.不断巩固PHP语法，熟悉大部分的PHP常用函数，理解面向对象编程，MySQL优化，以及一些模板和框架</p>
<p>6.最终完成一个功能齐全的动态站点</p>
<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><p>PHP服务器组件: WampServer,这也是目前window平台上使用最广泛的，操作也非常简单</p>
<p>PHP的IDE: Eclipse for PHP</p>
<p>MySql管理工具: Navicat for Mysql，Navicat for MySQL是一套专为MySQL设计的强大数据库管理及开发工具</p>
<p>文本编辑器: Notepad++</p>
<h2 id="在线编辑器"><a href="#在线编辑器" class="headerlink" title="在线编辑器"></a>在线编辑器</h2><p><a href="http://www.runoob.com/try/runcode.php?filename=demo_intro&amp;type=php" target="_blank" rel="external">PHP在线编辑器</a></p>
<h1 id="PHP-简介"><a href="#PHP-简介" class="headerlink" title="PHP 简介"></a>PHP 简介</h1><p>PHP（全称：PHP：Hypertext Preprocessor，即”PHP：超文本预处理器”）是一种通用开源脚本语言</p>
<p>PHP 脚本在服务器上执行</p>
<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>PHP 文件可包含文本、HTML、JavaScript代码和 PHP 代码</p>
<p>PHP 代码在服务器上执行，结果以纯 HTML 形式返回给浏览器</p>
<p>PHP 文件的默认文件扩展名是 “.php”</p>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>PHP 可以生成动态页面内容</p>
<p>PHP 可以创建、打开、读取、写入、关闭服务器上的文件</p>
<p>PHP 可以收集表单数据</p>
<p>PHP 可以发送和接收 cookies</p>
<p>PHP 可以添加、删除、修改您的数据库中的数据</p>
<p>PHP 可以限制用户访问您的网站上的一些页面</p>
<p>PHP 可以加密数据</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>PHP 可在不同的平台上运行（Windows、Linux、Unix、Mac OS X 等）</p>
<p>PHP 与目前几乎所有的正在被使用的服务器相兼容（Apache、IIS 等）</p>
<p>PHP 提供了广泛的数据库支持</p>
<p>PHP 是免费的</p>
<p>PHP 易于学习</p>
<h1 id="PHP-语法"><a href="#PHP-语法" class="headerlink" title="PHP 语法"></a>PHP 语法</h1><p>PHP 脚本在服务器上执行，然后将纯 HTML 结果发送回浏览器</p>
<h2 id="基本的PHP语法"><a href="#基本的PHP语法" class="headerlink" title="基本的PHP语法"></a>基本的PHP语法</h2><p>PHP 脚本以 &lt;?php 开始，以 ?&gt; 结束</p>
<p>PHP 文件的默认文件扩展名是 “.php”</p>
<p>PHP 文件通常包含 HTML 标签和一些 PHP 脚本代码</p>
<p>PHP 中的每个代码行都必须以分号结束</p>
<p>输出文本的基础指令：echo 和 print</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>My first PHP page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">echo</span> <span class="string">"Hello World!"</span>; <span class="comment">// hello World!</span></div><div class="line"><span class="meta">?&gt;</span>  </div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="comment">// 这是单行注释</span></div><div class="line"></div><div class="line"><span class="comment"># 这也是单行注释</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">这是多行注释</div><div class="line">多行注释</div><div class="line">多行注释</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">"Hello World!"</span>; <span class="comment">// hello World!</span></div><div class="line"><span class="meta">?&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-变量"><a href="#PHP-变量" class="headerlink" title="PHP 变量"></a>PHP 变量</h1><p>变量以$符号开始，后面跟着变量的名称</p>
<p>变量名必须以字母或者下划线字符开始</p>
<p>变量名只能包含字母数字字符以及下划线</p>
<p>变量名不能包含空格</p>
<p>变量名是区分大小写的</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$x=<span class="number">5</span>; </div><div class="line">$y=<span class="number">6</span>; </div><div class="line">$z=$x+$y; </div><div class="line"><span class="keyword">echo</span> $z; <span class="comment">// 11</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="声明PHP变量"><a href="#声明PHP变量" class="headerlink" title="声明PHP变量"></a>声明PHP变量</h2><p>PHP没有声明变量的命令</p>
<p>变量在您第一次赋值给它的时候被创建</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$txt=<span class="string">"Hello world!"</span>; </div><div class="line">$x=<span class="number">5</span>; </div><div class="line">$y=<span class="number">10.5</span>; </div><div class="line"><span class="keyword">echo</span> $txt; <span class="comment">// Hello world!</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="弱类型语言"><a href="#弱类型语言" class="headerlink" title="弱类型语言"></a>弱类型语言</h2><p>PHP会根据变量的值，自动把变量转换为正确的数据类型</p>
<p>在强类型的编程语言中，我们必须在使用变量前先声明变量的类型和名称</p>
<h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>PHP有四种不同的变量作用域</p>
<ul>
<li>global</li>
<li>local</li>
<li>static</li>
<li>parameter</li>
</ul>
<h2 id="global全局作用域"><a href="#global全局作用域" class="headerlink" title="global全局作用域"></a>global全局作用域</h2><p>global关键字用于函数内访问全局变量</p>
<p>在函数内调用函数外定义的全局变量，我们需要在函数中的变量前加上global关键字</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$x=<span class="number">5</span>; </div><div class="line">$y=<span class="number">10</span>; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span> </span></div><div class="line">&#123; </div><div class="line">    <span class="keyword">global</span> $x,$y; </div><div class="line">    $y=$x+$y; </div><div class="line">&#125; </div><div class="line"></div><div class="line">myTest(); </div><div class="line"><span class="keyword">echo</span> $y; <span class="comment">// 15 </span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>PHP将所有全局变量存储在一个名为$GLOBALS[index]的数组中.index 保存变量的名称。这个数组可以在函数内部访问，也可以直接用来更新全局变量</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$x=<span class="number">5</span>; </div><div class="line">$y=<span class="number">10</span>; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span> </span></div><div class="line">&#123; </div><div class="line">    $GLOBALS[<span class="string">'y'</span>]=$GLOBALS[<span class="string">'x'</span>]+$GLOBALS[<span class="string">'y'</span>]; </div><div class="line">&#125;  </div><div class="line"></div><div class="line">myTest(); </div><div class="line"><span class="keyword">echo</span> $y;  <span class="comment">// 15</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="local局部作用域"><a href="#local局部作用域" class="headerlink" title="local局部作用域"></a>local局部作用域</h2><p>在PHP函数内部声明的变量是局部变量，仅能在函数内部访问</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$x=<span class="number">5</span>; <span class="comment">// 全局变量 </span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span> </span></div><div class="line">&#123; </div><div class="line">    $y=<span class="number">10</span>; <span class="comment">// 局部变量 </span></div><div class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt;测试函数内变量:&lt;p&gt;"</span>; </div><div class="line">    <span class="keyword">echo</span> <span class="string">"变量 x 为: $x"</span>; </div><div class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>; </div><div class="line">    <span class="keyword">echo</span> <span class="string">"变量 y 为: $y"</span>; </div><div class="line">&#125;  </div><div class="line"></div><div class="line">myTest(); <span class="comment">// x:  y:10</span></div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;p&gt;测试函数外变量:&lt;p&gt;"</span>; </div><div class="line"><span class="keyword">echo</span> <span class="string">"变量 x 为: $x"</span>; </div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>; </div><div class="line"><span class="keyword">echo</span> <span class="string">"变量 y 为: $y"</span>; <span class="comment">// x:5 y:</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Static静态作用域"><a href="#Static静态作用域" class="headerlink" title="Static静态作用域"></a>Static静态作用域</h2><p>函数完成时，它的所有变量会被删除,要做到这一点，在第一次声明变量时,使用 static 关键字,即局部变量不会被删除</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span> </span></div><div class="line">&#123; </div><div class="line">    <span class="keyword">static</span> $x=<span class="number">0</span>; </div><div class="line">    <span class="keyword">echo</span> $x; </div><div class="line">    $x++; </div><div class="line">&#125; </div><div class="line"></div><div class="line">myTest(); </div><div class="line">myTest(); </div><div class="line">myTest(); </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="parameter参数作用域"><a href="#parameter参数作用域" class="headerlink" title="parameter参数作用域"></a>parameter参数作用域</h2><p>参数是通过调用代码将值传递给函数的局部变量</p>
<p>参数是在参数列表中声明的，作为函数声明的一部分</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">($x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> $x;</div><div class="line">&#125;</div><div class="line">myTest(<span class="number">5</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHPecho-print语句"><a href="#PHPecho-print语句" class="headerlink" title="PHPecho/print语句"></a>PHPecho/print语句</h1><ul>
<li>echo可以输出一个或多个字符串</li>
<li>print只允许输出一个字符串，返回值总为1</li>
</ul>
<h2 id="echo语句"><a href="#echo语句" class="headerlink" title="echo语句"></a>echo语句</h2><p>echo 命令输出字符串（字符串可以包含 HTML 标签）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2&gt;PHP 很有趣!&lt;/h2&gt;"</span>; <span class="comment">// PHP 很有趣!</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"Hello world!&lt;br&gt;"</span>; <span class="comment">// Hello world!</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"我要学 PHP!&lt;br&gt;"</span>; <span class="comment">// 我要学 PHP!</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"这是一个"</span>, <span class="string">"字符串，"</span>, <span class="string">"使用了"</span>, <span class="string">"多个"</span>, <span class="string">"参数。"</span>; <span class="comment">// 这是一个字符串，使用了多个参数。</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>echo 命令输出变量和字符串</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$txt1=<span class="string">"学习 PHP"</span>;</div><div class="line">$txt2=<span class="string">"RUNOOB.COM"</span>;</div><div class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $txt1; <span class="comment">// 学习PHP</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"在 $txt2 学习 PHP "</span>; <span class="comment">// 在 RUNOOB.COM 学习 PHP </span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"我车的品牌是 &#123;$cars[0]&#125;"</span>; <span class="comment">// 我车的品牌是 Volvo</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="pring语句"><a href="#pring语句" class="headerlink" title="pring语句"></a>pring语句</h2><p>print 命令输出字符串（字符串可以包含 HTML 标签）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">print</span> <span class="string">"&lt;h2&gt;PHP 很有趣!&lt;/h2&gt;"</span>; <span class="comment">// PHP 很有趣!</span></div><div class="line"><span class="keyword">print</span> <span class="string">"Hello world!&lt;br&gt;"</span>; <span class="comment">// Hello world!</span></div><div class="line"><span class="keyword">print</span> <span class="string">"我要学习 PHP!"</span>; <span class="comment">// 我要学习 PHP!</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>print 命令输出变量和字符串</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$txt1=<span class="string">"学习 PHP"</span>;</div><div class="line">$txt2=<span class="string">"RUNOOB.COM"</span>;</div><div class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</div><div class="line"></div><div class="line"><span class="keyword">print</span> $txt1; <span class="comment">// 学习 PHP</span></div><div class="line"><span class="keyword">print</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"在 $txt2 学习 PHP "</span>;<span class="comment">// 在 RUNOOB.COM 学习 PHP</span></div><div class="line"><span class="keyword">print</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"我车的品牌是 &#123;$cars[0]&#125;"</span>; <span class="comment">// 我车的品牌是 Volvo</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-EOF-heredoc"><a href="#PHP-EOF-heredoc" class="headerlink" title="PHP EOF(heredoc)"></a>PHP EOF(heredoc)</h1><p>PHP EOF(heredoc)是一种在命令行shell（如sh、csh、ksh、bash、PowerShell和zsh）和程序语言（像Perl、PHP、Python和Ruby）里定义一个字串的方法</p>
<p>注意</p>
<ol>
<li><p>必须后接分号，否则编译通不过</p>
</li>
<li><p>EOF可以用任意其它字符代替，只需保证结束标识与开始标识一致</p>
</li>
<li><p>结束标识必须顶格独自占一行(即必须从行首开始，前后不能衔接任何空白和字符)</p>
</li>
<li><p>开始标识可以不带引号或带单双引号，不带引号与带双引号效果一致，解释内嵌的变量和转义符号，带单引号则不解释内嵌的变量和转义符号</p>
</li>
<li><p>当内容需要内嵌引号（单引号或双引号）时，不需要加转义符，本身对单双引号转义，此处相当与q和qq的用法</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">echo</span> <span class="string">&lt;&lt;&lt;EOF</span></div><div class="line">    &lt;h1&gt;我的第一个标题&lt;/h1&gt;</div><div class="line">    &lt;p&gt;我的第一个段落。&lt;/p&gt;</div><div class="line">EOF;</div><div class="line"><span class="comment">// 结束需要独立一行且前后不能空格</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>在 heredoc 中，变量不需要用连接符 . 或 , 来拼接</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$name=<span class="string">"runoob"</span>;</div><div class="line">$a= <span class="string">&lt;&lt;&lt;EOF</span></div><div class="line">    "abc"<span class="subst">$name</span></div><div class="line">    "123"</div><div class="line">EOF;</div><div class="line"><span class="comment">// 结束需要独立一行且前后不能空格</span></div><div class="line"><span class="keyword">echo</span> $a;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-数据类型"><a href="#PHP-数据类型" class="headerlink" title="PHP 数据类型"></a>PHP 数据类型</h1><ul>
<li>String（字符串）</li>
<li>Integer（整型）</li>
<li>Float（浮点型）</li>
<li>Boolean（布尔型）</li>
<li>Array（数组）</li>
<li>Object（对象）</li>
<li>NULL（空值）</li>
</ul>
<h2 id="PHP字符串"><a href="#PHP字符串" class="headerlink" title="PHP字符串"></a>PHP字符串</h2><p>一个字符串是一串字符的序列，就像 “Hello world!”</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$x = <span class="string">"Hello world!"</span>; </div><div class="line"><span class="keyword">echo</span> $x;<span class="comment">//Hello world!</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>; </div><div class="line">$x = <span class="string">'Hello world!'</span>;<span class="comment">//Hello world!</span></div><div class="line"><span class="keyword">echo</span> $x;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP整型"><a href="#PHP整型" class="headerlink" title="PHP整型"></a>PHP整型</h2><p>整型是一个没有小数的数字</p>
<p>var_dump() 函数返回变量的数据类型和值</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$x = <span class="number">5985</span>;</div><div class="line">var_dump($x);<span class="comment">//int(5985)</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>; </div><div class="line">$x = <span class="number">-345</span>; <span class="comment">// 负数</span></div><div class="line">var_dump($x);<span class="comment">//int(-345)</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>; </div><div class="line">$x = <span class="number">0x8C</span>; <span class="comment">// 十六进制数</span></div><div class="line">var_dump($x);<span class="comment">//int(140)</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line">$x = <span class="number">047</span>; <span class="comment">// 八进制数</span></div><div class="line">var_dump($x);<span class="comment">//int(39)</span></div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP浮点型"><a href="#PHP浮点型" class="headerlink" title="PHP浮点型"></a>PHP浮点型</h2><p>浮点数是带小数部分的数字，或是指数形式</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$x = <span class="number">10.365</span>;</div><div class="line">var_dump($x);<span class="comment">//float(10.365) </span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>; </div><div class="line">$x = <span class="number">2.4e3</span>;</div><div class="line">var_dump($x);<span class="comment">//float(2400)</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>; </div><div class="line">$x = <span class="number">8E-5</span>;</div><div class="line">var_dump($x);<span class="comment">//float(2400) </span></div><div class="line"><span class="meta">?&gt;</span>   </div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP布尔型"><a href="#PHP布尔型" class="headerlink" title="PHP布尔型"></a>PHP布尔型</h2><p>布尔型可以是 TRUE 或 FALSE</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$x=<span class="literal">true</span><span class="comment">;</span></div><div class="line">$y=<span class="literal">false</span><span class="comment">;</span></div></pre></td></tr></table></figure>
<h2 id="PHP数组"><a href="#PHP数组" class="headerlink" title="PHP数组"></a>PHP数组</h2><p>数组可以在一个变量中存储多个值</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</div><div class="line">var_dump($cars); <span class="comment">// array(3) </span><span class="template-variable">&#123; [0]=&gt; string(5) "Volvo" [1]=&gt; string(3) "BMW" [2]=&gt; string(6) "Toyota" &#125;</span><span class="xml"><span class="php"></span></span></div><div class="line"><span class="meta">?&gt;</span>   </div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP对象"><a href="#PHP对象" class="headerlink" title="PHP对象"></a>PHP对象</h2><p>对象数据类型也可以用于存储数据,在 PHP 中，对象必须声明</p>
<p>首先，你必须使用class关键字声明类对象。类是可以包含属性和方法的结构</p>
<p>然后我们在类中定义数据类型，然后在实例化的类中使用数据类型</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">//PHP关键字this就是指向当前对象实例的指针，不指向任何其他对象或类</div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> $color;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($color=<span class="string">"green"</span>)</span> </span>&#123;</div><div class="line">      <span class="keyword">$this</span>-&gt;color = $color;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">what_color</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;color;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">print_vars</span><span class="params">($obj)</span> </span>&#123;</div><div class="line">   <span class="keyword">foreach</span> (get_object_vars($obj) <span class="keyword">as</span> $prop =&gt; $val) &#123;</div><div class="line">     <span class="keyword">echo</span> <span class="string">"\t$prop = $val\n"</span>; </div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 实例一个对象</span></div><div class="line">$herbie = <span class="keyword">new</span> Car(<span class="string">"white"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 显示 herbie 属性</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"\therbie: Properties\n"</span>;</div><div class="line">print_vars($herbie);<span class="comment">//herbie: Properties color = white</span></div><div class="line"></div><div class="line"><span class="meta">?&gt;</span>  </div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHPNULL值"><a href="#PHPNULL值" class="headerlink" title="PHPNULL值"></a>PHPNULL值</h2><p>NULL值表示变量没有值,NULL是数据类型为NULL的值</p>
<p>NULL 值指明一个变量是否为空值。 同样可用于数据空值和NULL值的区别。</p>
<p>可以通过设置变量值为 NULL 来清空变量数据</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$x=<span class="string">"Hello world!"</span>;</div><div class="line">$x=<span class="keyword">null</span>;</div><div class="line">var_dump($x);<span class="comment">//NULL</span></div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP常量"><a href="#PHP常量" class="headerlink" title="PHP常量"></a>PHP常量</h1><p>常量值被定义后，在脚本的其他任何地方都不能被改变</p>
<h2 id="PHP常量-1"><a href="#PHP常量-1" class="headerlink" title="PHP常量"></a>PHP常量</h2><p>常量是一个简单值的标识符。该值在脚本中不能改变</p>
<p>一个常量由英文字母、下划线、和数字组成,但数字不能作为首字母出现。 (常量名不需要加 $ 修饰符)</p>
<p>常量在整个脚本中都可以使用</p>
<h2 id="设置PHP常量"><a href="#设置PHP常量" class="headerlink" title="设置PHP常量"></a>设置PHP常量</h2><p>设置常量，使用 define() 函数,该函数有三个参数:</p>
<ul>
<li>name：必选参数，常量名称，即标志符。</li>
<li>value：必选参数，常量的值。</li>
<li>case_insensitive ：可选参数，如果设置为 TRUE，该常量则大小写不敏感。默认是大小写敏感的</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="comment">// 区分大小写的常量名</span></div><div class="line">define(<span class="string">"GREETING"</span>, <span class="string">"欢迎访问 Runoob.com"</span>);</div><div class="line"><span class="keyword">echo</span> GREETING;    <span class="comment">// 输出 "欢迎访问 Runoob.com"</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</div><div class="line"><span class="keyword">echo</span> greeting;   <span class="comment">// 输出 "greeting"</span></div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="comment">// 不区分大小写的常量名</span></div><div class="line">define(<span class="string">"GREETING"</span>, <span class="string">"欢迎访问 Runoob.com"</span>, <span class="keyword">true</span>);</div><div class="line"><span class="keyword">echo</span> greeting;  <span class="comment">// 输出 "欢迎访问 Runoob.com"</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="常量是全局的"><a href="#常量是全局的" class="headerlink" title="常量是全局的"></a>常量是全局的</h2><p>常量在定义后，默认是全局变量，可以在整个运行的脚本的任何地方使用</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//函数内使用常量，即便常量定义在函数外也可以正常使用常量</div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">define(<span class="string">"GREETING"</span>, <span class="string">"欢迎访问 Runoob.com"</span>);</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">echo</span> GREETING;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">myTest();    <span class="comment">// 输出 "欢迎访问 Runoob.com"</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP字符串-1"><a href="#PHP字符串-1" class="headerlink" title="PHP字符串"></a>PHP字符串</h1><p>字符串变量用于存储并处理文本</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$txt=<span class="string">"Hello world!"</span>; </div><div class="line"><span class="keyword">echo</span> $txt; <span class="comment">// "Hello world!</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP并置运算符"><a href="#PHP并置运算符" class="headerlink" title="PHP并置运算符"></a>PHP并置运算符</h2><p>在 PHP 中，只有一个字符串运算符,并置运算符 (.) 用于把两个字符串值连接起来</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$txt1=<span class="string">"Hello world!"</span>; </div><div class="line">$txt2=<span class="string">"What a nice day!"</span>; </div><div class="line"><span class="keyword">echo</span> $txt1 . <span class="string">" "</span> . $txt2; <span class="comment">// Hello world! What a nice day!</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHPstrlen-函数"><a href="#PHPstrlen-函数" class="headerlink" title="PHPstrlen()函数"></a>PHPstrlen()函数</h2><p>strlen()函数返回字符串的长度</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line"><span class="keyword">echo</span> strlen(<span class="string">"Hello world!"</span>);  <span class="comment">// 12</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHPstrpos-函数"><a href="#PHPstrpos-函数" class="headerlink" title="PHPstrpos()函数"></a>PHPstrpos()函数</h2><p>strpos() 函数用于在字符串内查找一个字符或一段指定的文本</p>
<p>如果在字符串中找到匹配，该函数会返回第一个匹配的字符位置。如果未找到匹配，则返回 FALSE</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line"><span class="keyword">echo</span> strpos(<span class="string">"Hello world!"</span>,<span class="string">"world"</span>); <span class="comment">//6</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP运算符"><a href="#PHP运算符" class="headerlink" title="PHP运算符"></a>PHP运算符</h1><h2 id="PHP算术运算符"><a href="#PHP算术运算符" class="headerlink" title="PHP算术运算符"></a>PHP算术运算符</h2><ul>
<li>x + y,x 和 y 的和</li>
<li>x - y,x 和 y 的差</li>
<li>x * y,x 和 y 的积</li>
<li>x / y,x 和 y 的商</li>
<li>x % y,x 除以 y 的余数</li>
<li>(-x),x 取反</li>
<li>a . b,连接两个字符串</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$x=<span class="number">10</span>; </div><div class="line">$y=<span class="number">6</span>;</div><div class="line"><span class="keyword">echo</span> ($x + $y); <span class="comment">// 输出16</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;  <span class="comment">// 换行</span></div><div class="line"></div><div class="line"><span class="keyword">echo</span> ($x - $y); <span class="comment">// 输出4</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;  <span class="comment">// 换行</span></div><div class="line"></div><div class="line"><span class="keyword">echo</span> ($x * $y); <span class="comment">// 输出60</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;  <span class="comment">// 换行</span></div><div class="line"></div><div class="line"><span class="keyword">echo</span> ($x / $y); <span class="comment">// 输出1.6666666666667</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;  <span class="comment">// 换行</span></div><div class="line"></div><div class="line"><span class="keyword">echo</span> ($x % $y); <span class="comment">// 输出4</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;  <span class="comment">// 换行</span></div><div class="line"></div><div class="line"><span class="keyword">echo</span> -$x;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP赋值运算符"><a href="#PHP赋值运算符" class="headerlink" title="PHP赋值运算符"></a>PHP赋值运算符</h2><ul>
<li>x = y,左操作数被设置为右侧表达式的值</li>
<li>x += y,等同于x = x + y</li>
<li>x -= y,等同于x = x - y</li>
<li>x <em>= y,等同于x = x </em> y</li>
<li>x /= y,等同于x = x / y</li>
<li>x %= y,等同于x = x % y</li>
<li>x .= y,等同于x = x . y</li>
</ul>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line"><span class="meta"><span class="meta-keyword">$x</span>=10; </span></div><div class="line">echo <span class="symbol">$</span>x; <span class="comment">// 输出10</span></div><div class="line"> </div><div class="line"><span class="meta"><span class="meta-keyword">$y</span>=20; </span></div><div class="line"><span class="meta"><span class="meta-keyword">$y</span> += 100;</span></div><div class="line">echo <span class="symbol">$</span>y; <span class="comment">// 输出120</span></div><div class="line"> </div><div class="line"><span class="meta"><span class="meta-keyword">$z</span>=50;</span></div><div class="line"><span class="meta"><span class="meta-keyword">$z</span> -= 25;</span></div><div class="line">echo <span class="symbol">$</span>z; <span class="comment">// 输出25</span></div><div class="line"> </div><div class="line"><span class="meta"><span class="meta-keyword">$i</span>=5;</span></div><div class="line"><span class="meta"><span class="meta-keyword">$i</span> *= 6;</span></div><div class="line">echo <span class="symbol">$</span>i; <span class="comment">// 输出30</span></div><div class="line"> </div><div class="line"><span class="meta"><span class="meta-keyword">$j</span>=10;</span></div><div class="line"><span class="meta"><span class="meta-keyword">$j</span> /= 5;</span></div><div class="line">echo <span class="symbol">$</span>j; <span class="comment">// 输出2</span></div><div class="line"> </div><div class="line"><span class="meta"><span class="meta-keyword">$k</span>=15;</span></div><div class="line"><span class="meta"><span class="meta-keyword">$k</span> %= 4;</span></div><div class="line">echo <span class="symbol">$</span>k; <span class="comment">// 输出3</span></div><div class="line">?&gt;</div><div class="line"></div><div class="line"><span class="meta"><span class="meta-keyword">$a</span> = "Hello";</span></div><div class="line"><span class="meta"><span class="meta-keyword">$b</span> = $a . " world!";</span></div><div class="line">echo <span class="symbol">$</span>b; <span class="comment">// 输出Hello world! </span></div><div class="line"> </div><div class="line"><span class="meta"><span class="meta-keyword">$x</span>="Hello";</span></div><div class="line"><span class="meta"><span class="meta-keyword">$x</span> .= " world!";</span></div><div class="line">echo <span class="symbol">$</span>x; <span class="comment">// 输出Hello world!</span></div></pre></td></tr></table></figure>
<h2 id="PHP递增-递减运算符"><a href="#PHP递增-递减运算符" class="headerlink" title="PHP递增/递减运算符"></a>PHP递增/递减运算符</h2><ul>
<li>++ x,x 加 1，然后返回 x</li>
<li>x ++,返回 x，然后 x 加 1</li>
<li>(– x),x 减 1，然后返回 x</li>
<li>x –,返回 x，然后 x 减 1</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$x=<span class="number">10</span>; </div><div class="line"><span class="keyword">echo</span> ++$x; <span class="comment">// 输出11</span></div><div class="line"> </div><div class="line">$y=<span class="number">10</span>; </div><div class="line"><span class="keyword">echo</span> $y++; <span class="comment">// 输出10</span></div><div class="line"> </div><div class="line">$z=<span class="number">5</span>;</div><div class="line"><span class="keyword">echo</span> --$z; <span class="comment">// 输出4</span></div><div class="line"> </div><div class="line">$i=<span class="number">5</span>;</div><div class="line"><span class="keyword">echo</span> $i--; <span class="comment">// 输出5</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP-比较运算符"><a href="#PHP-比较运算符" class="headerlink" title="PHP 比较运算符"></a>PHP 比较运算符</h2><ul>
<li>x == y,如果 x 等于 y，则返回 true</li>
<li>x === y,如果 x 等于 y，且它们类型相同，则返回 true    </li>
<li>x != y,如果 x 不等于 y，则返回 true</li>
<li>x &lt;&gt; y,如果 x 不等于 y，则返回 true</li>
<li>x !== y,如果 x 不等于 y，或它们类型不相同，则返回 true</li>
<li>x &gt; y    ,如果 x 大于 y，则返回 true</li>
<li>x &lt; y,如果 x 小于 y，则返回 true</li>
<li>x &gt;= y,如果 x 大于或者等于 y，则返回 true</li>
<li>x &lt;= y,如果 x 小于或者等于 y，则返回 true</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$x=<span class="number">100</span>; </div><div class="line">$y=<span class="string">"100"</span>;</div><div class="line">var_dump($x == $y); <span class="regexp">//bool</span>(<span class="literal">true</span>)</div><div class="line">var_dump($x === $y); <span class="regexp">//bool</span>(<span class="literal">false</span>)</div><div class="line">var_dump($x != $y); <span class="regexp">//bool</span>(<span class="literal">false</span>) </div><div class="line">var_dump($x !== $y); <span class="regexp">//bool</span>(<span class="literal">true</span>)</div><div class="line"></div><div class="line">$a=<span class="number">50</span>;</div><div class="line">$b=<span class="number">90</span>;</div><div class="line">var_dump($a &gt; $b); <span class="regexp">//bool</span>(<span class="literal">false</span>) </div><div class="line">echo <span class="string">"&lt;br&gt;"</span>;</div><div class="line">var_dump($a &lt; $b); <span class="regexp">//bool</span>(<span class="literal">true</span>)</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP逻辑运算符"><a href="#PHP逻辑运算符" class="headerlink" title="PHP逻辑运算符"></a>PHP逻辑运算符</h2><ul>
<li>x and y,如果 x 和 y 都为 true，则返回 true</li>
<li>x or y,如果 x 和 y 至少有一个为 true，则返回 true</li>
<li>x xor y,如果 x 和 y 有且仅有一个为 true，则返回 true</li>
<li>x &amp;&amp; y,如果 x 和 y 都为 true，则返回 true</li>
<li>x || y,如果 x 和 y 至少有一个为 true，则返回 true</li>
<li>! x,如果 x 不为 true，则返回 true</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$x=<span class="number">6</span>; </div><div class="line">$y=<span class="number">3</span>;</div><div class="line">var_dump($x &lt; <span class="number">10</span> <span class="keyword">and</span> $y &gt; <span class="number">1</span>); <span class="regexp">//bool</span>(<span class="literal">true</span>)</div><div class="line">var_dump($x==<span class="number">6</span> <span class="keyword">or</span> $y==<span class="number">5</span>); <span class="regexp">//bool</span>(<span class="literal">true</span>)</div><div class="line">var_dump($x==<span class="number">6</span> xor $y==<span class="number">3</span>); <span class="regexp">//bool</span>(<span class="literal">false</span>)</div><div class="line">var_dump($x &lt; <span class="number">10</span> &amp;&amp; $y &gt; <span class="number">1</span>); <span class="regexp">//bool</span>(<span class="literal">true</span>)</div><div class="line">var_dump($x==<span class="number">5</span> <span class="params">||</span> $y==<span class="number">5</span>); <span class="regexp">//bool</span>(<span class="literal">false</span>)</div><div class="line">var_dump(!($x==$y)); <span class="regexp">//bool</span>(<span class="literal">true</span>)</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP数组运算符"><a href="#PHP数组运算符" class="headerlink" title="PHP数组运算符"></a>PHP数组运算符</h2><ul>
<li>x + y,x 和 y 的集合</li>
<li>x == y,如果 x 和 y 具有相同的键/值对，则返回 true</li>
<li>x === y,如果 x 和 y 具有相同的键/值对，且顺序相同类型相同，则返回 true</li>
<li>x != y,如果 x 不等于 y，则返回 true</li>
<li>x &lt;&gt; y,如果 x 不等于 y，则返回 true</li>
<li>x !== y,如果 x 不等于 y，则返回 true</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$x = <span class="keyword">array</span>(<span class="string">"a"</span> =&gt; <span class="string">"red"</span>, <span class="string">"b"</span> =&gt; <span class="string">"green"</span>); </div><div class="line">$y = <span class="keyword">array</span>(<span class="string">"c"</span> =&gt; <span class="string">"blue"</span>, <span class="string">"d"</span> =&gt; <span class="string">"yellow"</span>); </div><div class="line">$z = $x + $y; </div><div class="line">var_dump($z); <span class="comment">// array(4) &#123; ["a"]=&gt; string(3) "red" ["b"]=&gt; string(5) "green" ["c"]=&gt; string(4) "blue" ["d"]=&gt; string(6) "yellow" &#125; </span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line">var_dump($x == $y);<span class="comment">// bool(false)</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line">var_dump($x === $y);<span class="comment">// bool(false)</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line">var_dump($x != $y);<span class="comment">// bool(true) </span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line">var_dump($x &lt;&gt; $y);<span class="comment">// bool(true) </span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line">var_dump($x !== $y);<span class="comment">// bool(true) </span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p>通过判断 $_GET 请求中含有 user 值，如果有返回 $_GET[‘user’]，否则返回 nobody</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$test = <span class="string">'菜鸟教程'</span>;</div><div class="line"><span class="comment">// 普通写法</span></div><div class="line">$username = <span class="keyword">isset</span>($test) ? $test : <span class="string">'nobody'</span>;</div><div class="line"><span class="keyword">echo</span> $username, PHP_EOL;</div><div class="line"> </div><div class="line"><span class="comment">// PHP 5.3+ 版本写法</span></div><div class="line">$username = $test ?: <span class="string">'nobody'</span>;</div><div class="line"><span class="keyword">echo</span> $username, PHP_EOL;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>在 PHP7+ 版本多了一个 NULL 合并运算符 ??</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"><span class="regexp">//</span> 如果 <span class="variable">$_GET</span>[<span class="string">'user'</span>] 不存在返回 <span class="string">'nobody'</span>，否则返回 <span class="variable">$_GET</span>[<span class="string">'user'</span>] 的值</div><div class="line"><span class="variable">$username</span> = <span class="variable">$_GET</span>[<span class="string">'user'</span>] ?? <span class="string">'nobody'</span>;</div><div class="line"><span class="regexp">//</span> 类似的三元运算符</div><div class="line"><span class="variable">$username</span> = isset(<span class="variable">$_GET</span>[<span class="string">'user'</span>]) ? <span class="variable">$_GET</span>[<span class="string">'user'</span>] : <span class="string">'nobody'</span>;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h2 id="组合比较符-PHP7"><a href="#组合比较符-PHP7" class="headerlink" title="组合比较符(PHP7+)"></a>组合比较符(PHP7+)</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="comment">// 整型</span></div><div class="line"><span class="keyword">echo</span> <span class="number">1</span> &lt;=&gt; <span class="number">1</span>; <span class="comment">// 0</span></div><div class="line"><span class="keyword">echo</span> <span class="number">1</span> &lt;=&gt; <span class="number">2</span>; <span class="comment">// -1</span></div><div class="line"><span class="keyword">echo</span> <span class="number">2</span> &lt;=&gt; <span class="number">1</span>; <span class="comment">// 1</span></div><div class="line"> </div><div class="line"><span class="comment">// 浮点型</span></div><div class="line"><span class="keyword">echo</span> <span class="number">1.5</span> &lt;=&gt; <span class="number">1.5</span>; <span class="comment">// 0</span></div><div class="line"><span class="keyword">echo</span> <span class="number">1.5</span> &lt;=&gt; <span class="number">2.5</span>; <span class="comment">// -1</span></div><div class="line"><span class="keyword">echo</span> <span class="number">2.5</span> &lt;=&gt; <span class="number">1.5</span>; <span class="comment">// 1</span></div><div class="line"> </div><div class="line"><span class="comment">// 字符串</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"a"</span> &lt;=&gt; <span class="string">"a"</span>; <span class="comment">// 0</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"a"</span> &lt;=&gt; <span class="string">"b"</span>; <span class="comment">// -1</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"b"</span> &lt;=&gt; <span class="string">"a"</span>; <span class="comment">// 1</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p>运算符优先级中，or 和 ||，&amp;&amp; 和 and 都是逻辑运算符，效果一样，但是其优先级却不一样</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="comment">// 优先级： &amp;&amp;  &gt;  =  &gt;  and</span></div><div class="line"><span class="comment">// 优先级： ||  &gt;  =  &gt;  or</span></div><div class="line"> </div><div class="line">$a = <span class="number">3</span>;</div><div class="line">$b = <span class="keyword">false</span>;</div><div class="line">$c = $a <span class="keyword">or</span> $b;</div><div class="line">var_dump($c);          <span class="comment">// 这里的 $c 为 int 值3，而不是 boolean 值 true</span></div><div class="line">$d = $a || $b;</div><div class="line">var_dump($d);          <span class="comment">//这里的 $d 就是 boolean 值 true </span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="括号的使用"><a href="#括号的使用" class="headerlink" title="括号的使用"></a>括号的使用</h2><p>括号的配对来明确标明运算顺序,通常能够增加代码的可读性</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="comment">// 括号优先运算</span></div><div class="line"> </div><div class="line">$a = <span class="number">1</span>;</div><div class="line">$b = <span class="number">2</span>;</div><div class="line">$c = <span class="number">3</span>;</div><div class="line">$d = $a + $b * $c;</div><div class="line"><span class="keyword">echo</span> $d; <span class="comment">//7</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</div><div class="line">$e = ($a + $b) * $c;  <span class="comment">// 使用括号</span></div><div class="line"><span class="keyword">echo</span> $e; <span class="comment">//9</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-if…Else-语句"><a href="#PHP-if…Else-语句" class="headerlink" title="PHP if…Else 语句"></a>PHP if…Else 语句</h1><ul>
<li>if 语句 - 在条件成立时执行代码</li>
<li>if…else 语句 - 在条件成立时执行一块代码，条件不成立时执行另一块代码</li>
<li>if…elseif….else 语句 - 在若干条件之一成立时执行一个代码块</li>
</ul>
<h2 id="PHP-if-语句"><a href="#PHP-if-语句" class="headerlink" title="PHP - if 语句"></a>PHP - if 语句</h2><p>if 语句用于仅当指定条件成立时执行代码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如果当前时间小于 20，输出 "Have a good day!"</span></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$t=date(<span class="string">"H"</span>);</div><div class="line"><span class="keyword">if</span> ($t&lt;<span class="string">"20"</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Have a good day!"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP-if…else-语句"><a href="#PHP-if…else-语句" class="headerlink" title="PHP - if…else 语句"></a>PHP - if…else 语句</h2><p>在条件成立时执行一块代码，条件不成立时执行另一块代码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如果当前时间小于 20，输出 "Have a good day!"，否则输出 "Have a good night!"</span></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$t=date(<span class="string">"H"</span>);</div><div class="line"><span class="keyword">if</span> ($t&lt;<span class="string">"20"</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Have a good day!"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Have a good night!"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP-if…elseif…-else-语句"><a href="#PHP-if…elseif…-else-语句" class="headerlink" title="PHP - if…elseif….else 语句"></a>PHP - if…elseif….else 语句</h2><p>在若干条件之一成立时执行一个代码块，请使用 if….elseif…else 语句</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如果当前时间小于 10，输出 "Have a good morning!"，如果当前时间不小于 10 且小于 20，则输出 "Have a good day!"，否则输出 "Have a good night!"</span></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$t=date(<span class="string">"H"</span>);</div><div class="line"><span class="keyword">if</span> ($t&lt;<span class="string">"10"</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Have a good morning!"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">elseif</span> ($t&lt;<span class="string">"20"</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Have a good day!"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Have a good night!"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-Switch-语句"><a href="#PHP-Switch-语句" class="headerlink" title="PHP Switch 语句"></a>PHP Switch 语句</h1><p>switch 语句用于根据多个不同条件执行不同动作</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$favcolor=<span class="string">"red"</span>;</div><div class="line"><span class="keyword">switch</span> ($favcolor)</div><div class="line">&#123;</div><div class="line"><span class="keyword">case</span> <span class="string">"red"</span>:</div><div class="line">    <span class="keyword">echo</span> <span class="string">"你喜欢的颜色是红色!"</span>;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> <span class="string">"blue"</span>:</div><div class="line">    <span class="keyword">echo</span> <span class="string">"你喜欢的颜色是蓝色!"</span>;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> <span class="string">"green"</span>:</div><div class="line">    <span class="keyword">echo</span> <span class="string">"你喜欢的颜色是绿色!"</span>;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line"><span class="keyword">default</span>:</div><div class="line">    <span class="keyword">echo</span> <span class="string">"你喜欢的颜色不是 红, 蓝, 或绿色!"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-数组"><a href="#PHP-数组" class="headerlink" title="PHP 数组"></a>PHP 数组</h1><p>数组能够在单个变量中存储多个值</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</div><div class="line"><span class="keyword">echo</span> <span class="string">"I like "</span> . $cars[<span class="number">0</span>] . <span class="string">", "</span> . $cars[<span class="number">1</span>] . <span class="string">" and "</span> . $cars[<span class="number">2</span>] . <span class="string">"."</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="在-PHP-中创建数组"><a href="#在-PHP-中创建数组" class="headerlink" title="在 PHP 中创建数组"></a>在 PHP 中创建数组</h2><p>array() 函数用于创建数组</p>
<p>在 PHP 中，有三种类型的数组</p>
<ul>
<li>数值数组 - 带有数字 ID 键的数组</li>
<li>关联数组 - 带有指定的键的数组，每个键关联一个值</li>
<li>多维数组 - 包含一个或多个数组的数组</li>
</ul>
<h2 id="PHP-数值数组"><a href="#PHP-数值数组" class="headerlink" title="PHP 数值数组"></a>PHP 数值数组</h2><p>两种创建数值数组的方法</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</div><div class="line"></div><div class="line">$cars=<span class="keyword">array</span>();</div><div class="line">$cars[<span class="number">0</span>]=<span class="string">"Volvo"</span>;</div><div class="line">$cars[<span class="number">1</span>]=<span class="string">"BMW"</span>;</div><div class="line">$cars[<span class="number">2</span>]=<span class="string">"Toyota"</span>;</div></pre></td></tr></table></figure>
<h2 id="count-函数"><a href="#count-函数" class="headerlink" title="count()函数"></a>count()函数</h2><p>count() 函数用于返回数组的长度</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</div><div class="line"><span class="keyword">echo</span> count($cars); <span class="comment">// 3</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="遍历数值数组"><a href="#遍历数值数组" class="headerlink" title="遍历数值数组"></a>遍历数值数组</h2><p>遍历并打印数值数组中的所有值，您可以使用 for 循环</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</div><div class="line">$arrlength=count($cars);</div><div class="line"> </div><div class="line"><span class="keyword">for</span>($x=<span class="number">0</span>;$x&lt;$arrlength;$x++)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> $cars[$x]; <span class="comment">// Volvo,BMW,Toyota</span></div><div class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP-关联数组"><a href="#PHP-关联数组" class="headerlink" title="PHP 关联数组"></a>PHP 关联数组</h2><p>关联数组是使用您分配给数组的指定的键的数组</p>
<p>两种创建关联数组的方法</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$age=<span class="keyword">array</span>(<span class="string">"Peter"</span>=&gt;<span class="string">"35"</span>,<span class="string">"Ben"</span>=&gt;<span class="string">"37"</span>,<span class="string">"Joe"</span>=&gt;<span class="string">"43"</span>);</div><div class="line"></div><div class="line">$age[<span class="string">'Peter'</span>]=<span class="string">"35"</span>;</div><div class="line">$age[<span class="string">'Ben'</span>]=<span class="string">"37"</span>;</div><div class="line">$age[<span class="string">'Joe'</span>]=<span class="string">"43"</span>;</div></pre></td></tr></table></figure>
<h2 id="遍历关联数组"><a href="#遍历关联数组" class="headerlink" title="遍历关联数组"></a>遍历关联数组</h2><p>遍历并打印关联数组中的所有值，您可以使用 foreach 循环</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$age=<span class="keyword">array</span>(<span class="string">"Peter"</span>=&gt;<span class="string">"35"</span>,<span class="string">"Ben"</span>=&gt;<span class="string">"37"</span>,<span class="string">"Joe"</span>=&gt;<span class="string">"43"</span>);</div><div class="line"> </div><div class="line"><span class="keyword">foreach</span>($age <span class="keyword">as</span> $x=&gt;$x_value)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Key="</span> . $x . <span class="string">", Value="</span> . $x_value; <span class="comment">//Key=Peter, Value=35Key=Ben, Value=37Key=Joe, Value=43</span></div><div class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-数组排序"><a href="#PHP-数组排序" class="headerlink" title="PHP 数组排序"></a>PHP 数组排序</h1><p>数组中的元素可以按字母或数字顺序进行降序或升序排列</p>
<ul>
<li>sort() - 对数组进行升序排列</li>
<li>rsort() - 对数组进行降序排列</li>
<li>asort() - 根据关联数组的值，对数组进行升序排列</li>
<li>ksort() - 根据关联数组的键，对数组进行升序排列</li>
<li>arsort() - 根据关联数组的值，对数组进行降序排列</li>
<li>krsort() - 根据关联数组的键，对数组进行降序排列</li>
</ul>
<h2 id="sort-对数组进行升序排列"><a href="#sort-对数组进行升序排列" class="headerlink" title="sort() - 对数组进行升序排列"></a>sort() - 对数组进行升序排列</h2><p>$cars 数组中的元素按照字母升序排列</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> </div><div class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);  </div><div class="line">sort($cars);  </div><div class="line">print_r($cars); </div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="keyword">Array</span></div><div class="line">(</div><div class="line">    [<span class="number">0</span>] =&gt; BMW</div><div class="line">    [<span class="number">1</span>] =&gt; Toyota</div><div class="line">    [<span class="number">2</span>] =&gt; Volvo</div><div class="line">)</div></pre></td></tr></table></figure>
<p>$numbers 数组中的元素按照数字升序排列</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">$numbers=array(<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">22</span>,<span class="number">11</span>);  </div><div class="line">sort($numbers);  </div><div class="line">print_r($numbers);  </div><div class="line">?&gt;</div><div class="line"></div><div class="line"><span class="comment">//输出</span></div><div class="line">Array</div><div class="line">(</div><div class="line">    [<span class="number">0</span>] =&gt; <span class="number">2</span></div><div class="line">    [<span class="number">1</span>] =&gt; <span class="number">4</span></div><div class="line">    [<span class="number">2</span>] =&gt; <span class="number">6</span></div><div class="line">    [<span class="number">3</span>] =&gt; <span class="number">11</span></div><div class="line">    [<span class="number">4</span>] =&gt; <span class="number">22</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="rsort-对数组进行降序排列"><a href="#rsort-对数组进行降序排列" class="headerlink" title="rsort() - 对数组进行降序排列"></a>rsort() - 对数组进行降序排列</h2><p>$cars 数组中的元素按照字母降序排列</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</div><div class="line">rsort($cars);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="keyword">Array</span></div><div class="line">(</div><div class="line">    [<span class="number">0</span>] =&gt; Volvo</div><div class="line">    [<span class="number">1</span>] =&gt; Toyota</div><div class="line">    [<span class="number">2</span>] =&gt; BMW</div><div class="line">)</div></pre></td></tr></table></figure>
<p>$numbers 数组中的元素按照数字降序排列</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$numbers=array(<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">22</span>,<span class="number">11</span>);</div><div class="line">rsort($numbers);</div><div class="line">?&gt;</div><div class="line"></div><div class="line"><span class="comment">//输出</span></div><div class="line">Array</div><div class="line">(</div><div class="line">    [<span class="number">0</span>] =&gt; <span class="number">22</span></div><div class="line">    [<span class="number">1</span>] =&gt; <span class="number">11</span></div><div class="line">    [<span class="number">2</span>] =&gt; <span class="number">6</span></div><div class="line">    [<span class="number">3</span>] =&gt; <span class="number">4</span></div><div class="line">    [<span class="number">4</span>] =&gt; <span class="number">2</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="asort-根据数组的值，对数组进行升序排列"><a href="#asort-根据数组的值，对数组进行升序排列" class="headerlink" title="asort() - 根据数组的值，对数组进行升序排列"></a>asort() - 根据数组的值，对数组进行升序排列</h2><p>根据数组的值，对关联数组进行升序排列</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$age=<span class="keyword">array</span>(<span class="string">"Peter"</span>=&gt;<span class="string">"35"</span>,<span class="string">"Ben"</span>=&gt;<span class="string">"37"</span>,<span class="string">"Joe"</span>=&gt;<span class="string">"43"</span>);</div><div class="line">asort($age);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="comment">//输出</span></div><div class="line"><span class="keyword">Array</span></div><div class="line">(</div><div class="line">    [Peter] =&gt; <span class="number">35</span></div><div class="line">    [Ben] =&gt; <span class="number">37</span></div><div class="line">    [Joe] =&gt; <span class="number">43</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="ksort-根据数组的键，对数组进行升序排列"><a href="#ksort-根据数组的键，对数组进行升序排列" class="headerlink" title="ksort() - 根据数组的键，对数组进行升序排列"></a>ksort() - 根据数组的键，对数组进行升序排列</h2><p>根据数组的键，对关联数组进行升序排列：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$age=<span class="keyword">array</span>(<span class="string">"Peter"</span>=&gt;<span class="string">"35"</span>,<span class="string">"Ben"</span>=&gt;<span class="string">"37"</span>,<span class="string">"Joe"</span>=&gt;<span class="string">"43"</span>);</div><div class="line">ksort($age);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="comment">//输出</span></div><div class="line"><span class="keyword">Array</span></div><div class="line">(</div><div class="line">    [Ben] =&gt; <span class="number">37</span></div><div class="line">    [Joe] =&gt; <span class="number">43</span></div><div class="line">    [Peter] =&gt; <span class="number">35</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="arsort-根据数组的值，对数组进行降序排列"><a href="#arsort-根据数组的值，对数组进行降序排列" class="headerlink" title="arsort() - 根据数组的值，对数组进行降序排列"></a>arsort() - 根据数组的值，对数组进行降序排列</h2><p>根据数组的值，对关联数组进行降序排列</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$age=<span class="keyword">array</span>(<span class="string">"Peter"</span>=&gt;<span class="string">"35"</span>,<span class="string">"Ben"</span>=&gt;<span class="string">"37"</span>,<span class="string">"Joe"</span>=&gt;<span class="string">"43"</span>);</div><div class="line">arsort($age);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="comment">//输出</span></div><div class="line"><span class="keyword">Array</span></div><div class="line">(</div><div class="line">    [Joe] =&gt; <span class="number">43</span></div><div class="line">    [Ben] =&gt; <span class="number">37</span></div><div class="line">    [Peter] =&gt; <span class="number">35</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="krsort-根据数组的键，对数组进行降序排列"><a href="#krsort-根据数组的键，对数组进行降序排列" class="headerlink" title="krsort() - 根据数组的键，对数组进行降序排列"></a>krsort() - 根据数组的键，对数组进行降序排列</h2><p>根据数组的键，对关联数组进行降序排列</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$age=<span class="keyword">array</span>(<span class="string">"Peter"</span>=&gt;<span class="string">"35"</span>,<span class="string">"Ben"</span>=&gt;<span class="string">"37"</span>,<span class="string">"Joe"</span>=&gt;<span class="string">"43"</span>);</div><div class="line">krsort($age);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="keyword">Array</span></div><div class="line">(</div><div class="line">    [Peter] =&gt; <span class="number">35</span></div><div class="line">    [Joe] =&gt; <span class="number">43</span></div><div class="line">    [Ben] =&gt; <span class="number">37</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h1 id="PHP-超级全局变量"><a href="#PHP-超级全局变量" class="headerlink" title="PHP 超级全局变量"></a>PHP 超级全局变量</h1><p>PHP中预定义了几个超级全局变量，这意味着它们在一个脚本的全部作用域中都可用</p>
<ul>
<li>$GLOBALS</li>
<li>$_SERVER</li>
<li>$_REQUEST</li>
<li>$_POST</li>
<li>$_GET</li>
<li>$_FILES</li>
<li>$_ENV</li>
<li>$_COOKIE</li>
<li>$_SESSION</li>
</ul>
<h2 id="PHP-GLOBALS"><a href="#PHP-GLOBALS" class="headerlink" title="PHP $GLOBALS"></a>PHP $GLOBALS</h2><p>$GLOBALS 是一个包含了全部变量的全局组合数组。变量的名字就是数组的键</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// z 是一个$GLOBALS数组中的超级全局变量，该变量同样可以在函数外访问</div><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$x = <span class="number">75</span>; </div><div class="line">$y = <span class="number">25</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addition</span><span class="params">()</span> </span></div><div class="line">&#123; </div><div class="line">    $GLOBALS[<span class="string">'z'</span>] = $GLOBALS[<span class="string">'x'</span>] + $GLOBALS[<span class="string">'y'</span>]; </div><div class="line">&#125;</div><div class="line"> </div><div class="line">addition(); </div><div class="line"><span class="keyword">echo</span> $z; </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP-SERVER"><a href="#PHP-SERVER" class="headerlink" title="PHP $_SERVER"></a>PHP $_SERVER</h2><p>$_SERVER 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> </div><div class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">'PHP_SELF'</span>];</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">'SERVER_NAME'</span>];</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">'HTTP_HOST'</span>];</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">'HTTP_REFERER'</span>];</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>];</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">'SCRIPT_NAME'</span>];</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line">/<span class="keyword">try</span>/demo_source/demo_global_server.php</div><div class="line">www.runoob.com</div><div class="line">www.runoob.com</div><div class="line">http:<span class="comment">//www.runoob.com/try/showphp.php?filename=demo_global_server</span></div><div class="line">Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">6.1</span>) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">69.0</span><span class="number">.3472</span><span class="number">.3</span> Safari/<span class="number">537.36</span></div><div class="line">/<span class="keyword">try</span>/demo_source/demo_global_server.php</div></pre></td></tr></table></figure>
<h2 id="PHP-REQUEST"><a href="#PHP-REQUEST" class="headerlink" title="PHP $_REQUEST"></a>PHP $_REQUEST</h2><p>PHP $_REQUEST 用于收集HTML表单提交的数据</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//使用超级全局变量 $_REQUEST 来收集表单中的 input 字段数据</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"&lt;?php echo $_SERVER['PHP_SELF'];?&gt;"</span>&gt;</span></div><div class="line">Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"fname"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$name = $_REQUEST[<span class="string">'fname'</span>]; </div><div class="line"><span class="keyword">echo</span> $name; </div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP-POST"><a href="#PHP-POST" class="headerlink" title="PHP $_POST"></a>PHP $_POST</h2><p>PHP $_POST 被广泛应用于收集表单数据，在HTML form标签的指定该属性：”method=”post”</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 使用超级全局变量 $_POST 来收集表单中的 input 字段数据</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"&lt;?php echo $_SERVER['PHP_SELF'];?&gt;"</span>&gt;</span></div><div class="line">Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"fname"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$name = $_POST[<span class="string">'fname'</span>]; </div><div class="line"><span class="keyword">echo</span> $name; </div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP-GET"><a href="#PHP-GET" class="headerlink" title="PHP $_GET"></a>PHP $_GET</h2><p>PHP $_GET 同样被广泛应用于收集表单数据，在HTML form标签的指定该属性：”method=”get”</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// 当用户点击链接 "Test $GET", 参数 "subject" 和 "web" 将发送至"test_get.php",</div><div class="line">// 在 "test_get.php" 文件中使用 $_GET 变量来获取这些数据</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"test_get.php?subject=PHP&amp;web=runoob.com"</span>&gt;</span>Test $GET<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line">// "test_get.php" 文件的代码</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line"><span class="keyword">echo</span> <span class="string">"Study "</span> . $_GET[<span class="string">'subject'</span>] . <span class="string">" at "</span> . $_GET[<span class="string">'web'</span>];</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-While-循环"><a href="#PHP-While-循环" class="headerlink" title="PHP While 循环"></a>PHP While 循环</h1><p>相同的代码块一次又一次地重复运行。我们可以在代码中使用循环语句</p>
<ul>
<li>while - 只要指定的条件成立，则循环执行代码块</li>
<li>do…while - 首先执行一次代码块，然后在指定的条件成立时重复这个循环</li>
</ul>
<h2 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h2><p>while 循环将重复执行代码块，直到指定的条件不成立</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 变量 i 的值为 1 ($i=1;)</span></div><div class="line"><span class="comment">// 只要 i 小于或者等于 5，while 循环将继续运行</span></div><div class="line"><span class="comment">// 循环每运行一次，i 就会递增 1</span></div><div class="line">&lt;html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$i=<span class="number">1</span>;</div><div class="line"><span class="keyword">while</span>($i&lt;=<span class="number">5</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"The number is "</span> . $i . <span class="string">"&lt;br&gt;"</span>;</div><div class="line">    $i++;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line">The number is <span class="number">1</span></div><div class="line">The number is <span class="number">2</span></div><div class="line">The number is <span class="number">3</span></div><div class="line">The number is <span class="number">4</span></div><div class="line">The number is <span class="number">5</span></div></pre></td></tr></table></figure>
<h2 id="do…while-语句"><a href="#do…while-语句" class="headerlink" title="do…while 语句"></a>do…while 语句</h2><p>do…while 语句会至少执行一次代码，然后检查条件，只要条件成立，就会重复进行循环</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 变量 i 的值为 1 ($i=1;)</span></div><div class="line"><span class="comment">// 开始 do...while 循环。循环将变量 i 的值递增 1，然后输出</span></div><div class="line"><span class="comment">// 先检查条件（i 小于或者等于 5），只要 i 小于或者等于 5，循环将继续运行</span></div><div class="line">&lt;html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$i=<span class="number">1</span>;</div><div class="line"><span class="keyword">do</span></div><div class="line">&#123;</div><div class="line">    $i++;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"The number is "</span> . $i . <span class="string">"&lt;br&gt;"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span> ($i&lt;=<span class="number">5</span>);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line">The number is <span class="number">2</span></div><div class="line">The number is <span class="number">3</span></div><div class="line">The number is <span class="number">4</span></div><div class="line">The number is <span class="number">5</span></div><div class="line">The number is <span class="number">6</span></div></pre></td></tr></table></figure>
<h1 id="PHP-For-循环"><a href="#PHP-For-循环" class="headerlink" title="PHP For 循环"></a>PHP For 循环</h1><ul>
<li>for - 循环执行代码块指定的次数</li>
<li>foreach - 根据数组中每个元素来循环代码块</li>
</ul>
<h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><p>for 循环用于您预先知道脚本需要运行的次数的情况</p>
<p>参数:</p>
<ul>
<li>初始值：主要是初始化一个变量值，用于设置一个计数器（但可以是任何在循环的开始被执行一次的代码）。</li>
<li>条件：循环执行的限制条件。如果为 TRUE，则循环继续。如果为 FALSE，则循环结束。</li>
<li>增量：主要用于递增计数器（但可以是任何在循环的结束被执行的代码）</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义一个初始值为 i=1 的循环。只要变量 i 小于或者等于 5，循环将继续运行</span></div><div class="line"><span class="comment">// 循环每运行一次，变量 i 就会递增 1</span></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">for</span> ($i=<span class="number">1</span>; $i&lt;=<span class="number">5</span>; $i++)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"The number is "</span> . $i . <span class="string">"&lt;br&gt;"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line">The number is <span class="number">1</span></div><div class="line">The number is <span class="number">2</span></div><div class="line">The number is <span class="number">3</span></div><div class="line">The number is <span class="number">4</span></div><div class="line">The number is <span class="number">5</span></div></pre></td></tr></table></figure>
<h2 id="foreach-循环"><a href="#foreach-循环" class="headerlink" title="foreach 循环"></a>foreach 循环</h2><p>foreach 循环用于遍历数组</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$x=<span class="keyword">array</span>(<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>);</div><div class="line"><span class="keyword">foreach</span> ($x <span class="keyword">as</span> $value)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> $value . <span class="string">"&lt;br&gt;"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// 输出</div><div class="line">one</div><div class="line">two</div><div class="line">three</div></pre></td></tr></table></figure>
<h1 id="PHP-函数"><a href="#PHP-函数" class="headerlink" title="PHP 函数"></a>PHP 函数</h1><p>PHP 的真正威力源自于它的函数</p>
<p>在 PHP 中，提供了超过 1000 个内建的函数</p>
<h2 id="创建-PHP-函数"><a href="#创建-PHP-函数" class="headerlink" title="创建 PHP 函数"></a>创建 PHP 函数</h2><p>函数是通过调用函数来执行的</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 一个简单的函数，在其被调用时能输出我的名称</span></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeName</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Kai Jim Refsnes"</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">echo</span> <span class="string">"My name is "</span>;</div><div class="line">writeName();</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line">My name is Kai Jim Refsnes</div></pre></td></tr></table></figure>
<h2 id="PHP-函数-添加参数"><a href="#PHP-函数-添加参数" class="headerlink" title="PHP 函数 - 添加参数"></a>PHP 函数 - 添加参数</h2><p>参数就在函数名称后面有一个括号内指定</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> 输出不同的名字，但姓是相同的</div><div class="line">&lt;?php</div><div class="line"><span class="keyword">function</span> writeName(<span class="variable">$fname</span>)</div><div class="line">&#123;</div><div class="line">    echo <span class="variable">$fname</span> . <span class="string">" Refsnes.&lt;br&gt;"</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">echo <span class="string">"My name is "</span>;</div><div class="line">writeName(<span class="string">"Kai Jim"</span>);</div><div class="line">echo <span class="string">"My sister's name is "</span>;</div><div class="line">writeName(<span class="string">"Hege"</span>);</div><div class="line">echo <span class="string">"My brother's name is "</span>;</div><div class="line">writeName(<span class="string">"Stale"</span>);</div><div class="line">?&gt;</div><div class="line"></div><div class="line"><span class="regexp">//</span> 输出</div><div class="line">My name is Kai Jim Refsnes.</div><div class="line">My siste<span class="string">r's name is Hege Refsnes.</span></div><div class="line">My brother's name is Stale Refsnes.</div></pre></td></tr></table></figure>
<p>函数有两个参数</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"><span class="keyword">function</span> writeName(<span class="variable">$fname</span>,<span class="variable">$punctuation</span>)</div><div class="line">&#123;</div><div class="line">    echo <span class="variable">$fname</span> . <span class="string">" Refsnes"</span> . <span class="variable">$punctuation</span> . <span class="string">"&lt;br&gt;"</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">echo <span class="string">"My name is "</span>;</div><div class="line">writeName(<span class="string">"Kai Jim"</span>,<span class="string">"."</span>);</div><div class="line">echo <span class="string">"My sister's name is "</span>;</div><div class="line">writeName(<span class="string">"Hege"</span>,<span class="string">"!"</span>);</div><div class="line">echo <span class="string">"My brother's name is "</span>;</div><div class="line">writeName(<span class="string">"Ståle"</span>,<span class="string">"?"</span>);</div><div class="line">?&gt;</div><div class="line"></div><div class="line"><span class="regexp">//</span> 输出</div><div class="line">My name is Kai Jim Refsnes.</div><div class="line">My siste<span class="string">r's name is Hege Refsnes!</span></div><div class="line">My brother's name is Ståle Refsnes?</div></pre></td></tr></table></figure>
<h2 id="PHP-函数-返回值"><a href="#PHP-函数-返回值" class="headerlink" title="PHP 函数 - 返回值"></a>PHP 函数 - 返回值</h2><p>如需让函数返回一个值，请使用 return 语句</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">($x,$y)</span></span></div><div class="line">&#123;</div><div class="line">    $total=$x+$y;</div><div class="line">    <span class="keyword">return</span> $total;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">echo</span> <span class="string">"1 + 16 = "</span> . add(<span class="number">1</span>,<span class="number">16</span>);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// 输出</div><div class="line">1 + 16 = 17</div></pre></td></tr></table></figure>
<h1 id="PHP-魔术常量"><a href="#PHP-魔术常量" class="headerlink" title="PHP 魔术常量"></a>PHP 魔术常量</h1><p>PHP 向它运行的任何脚本提供了大量的预定义常量</p>
<p>有八个魔术常量它们的值随着它们在代码中的位置改变而改变</p>
<h2 id="LINE"><a href="#LINE" class="headerlink" title="LINE"></a><strong>LINE</strong></h2><p>文件中的当前行号</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">echo</span> <span class="string">'这是第 " '</span>  . <span class="keyword">__LINE__</span> . <span class="string">' " 行'</span>;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// 输出</div><div class="line">这是第 “ 2 ” 行</div></pre></td></tr></table></figure>
<h2 id="FILE"><a href="#FILE" class="headerlink" title="FILE"></a><strong>FILE</strong></h2><p>文件的完整路径和文件名</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">echo</span> <span class="string">'该文件位于 " '</span>  . <span class="keyword">__FILE__</span> . <span class="string">' " '</span>;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// 输出</div><div class="line">该文件位于 “ E:\wamp\www\test\index.php ”</div></pre></td></tr></table></figure>
<h2 id="DIR"><a href="#DIR" class="headerlink" title="DIR"></a><strong>DIR</strong></h2><p>文件所在的目录,等价于 dirname(<strong>FILE</strong>)</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">echo</span> <span class="string">'该文件位于 " '</span>  . <span class="keyword">__DIR__</span> . <span class="string">' " '</span>;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// 输出</div><div class="line">该文件位于 “ E:\wamp\www\test ”</div></pre></td></tr></table></figure>
<h2 id="FUNCTION"><a href="#FUNCTION" class="headerlink" title="FUNCTION"></a><strong>FUNCTION</strong></h2><p>函数名称</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">echo</span>  <span class="string">'函数名为：'</span> . <span class="keyword">__FUNCTION__</span> ;</div><div class="line">&#125;</div><div class="line">test();</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// 输出</div><div class="line">函数名为：test</div></pre></td></tr></table></figure>
<h2 id="CLASS"><a href="#CLASS" class="headerlink" title="CLASS"></a><strong>CLASS</strong></h2><p>类的名称</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_print</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'类名为：'</span>  . <span class="keyword">__CLASS__</span> . <span class="string">"&lt;br&gt;"</span>;</div><div class="line">        <span class="keyword">echo</span>  <span class="string">'函数名为：'</span> . <span class="keyword">__FUNCTION__</span> ;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$t = <span class="keyword">new</span> test();</div><div class="line">$t-&gt;_print();</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// 输出</div><div class="line">类名为：test</div><div class="line">函数名为：_print</div></pre></td></tr></table></figure>
<h2 id="TRAIT"><a href="#TRAIT" class="headerlink" title="TRAIT"></a><strong>TRAIT</strong></h2><p>Trait 的名字,自 PHP 5.4.0 起，PHP 实现了代码复用的一个方法，称为 traits</p>
<p>Trait 名包括其被声明的作用区域（例如 Foo\Bar）</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 从基类继承的成员被插入的 SayWorld Trait 中的 MyHelloWorld 方法所覆盖</span></div><div class="line"><span class="comment">// 其行为 MyHelloWorld 类中定义的方法一致</span></div><div class="line"><span class="comment">// 优先顺序是当前类中的方法会覆盖 trait 方法，而 trait 方法又覆盖了基类中的方法</span></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Hello '</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">trait</span> SayWorld &#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">parent</span>::sayHello();</div><div class="line">        <span class="keyword">echo</span> <span class="string">'World!'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHelloWorld</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</div><div class="line">    <span class="keyword">use</span> <span class="title">SayWorld</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">$o = <span class="keyword">new</span> MyHelloWorld();</div><div class="line">$o-&gt;sayHello();</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line">Hello World!</div></pre></td></tr></table></figure>
<h2 id="METHOD"><a href="#METHOD" class="headerlink" title="METHOD"></a><strong>METHOD</strong></h2><p>类的方法名（PHP 5.0.0 新加）。返回该方法被定义时的名字（区分大小写）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">echo</span>  <span class="string">'函数名为：'</span> . <span class="keyword">__METHOD__</span> ;</div><div class="line">&#125;</div><div class="line">test();</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// 输出</div><div class="line">函数名为：test</div></pre></td></tr></table></figure>
<h2 id="NAMESPACE"><a href="#NAMESPACE" class="headerlink" title="NAMESPACE"></a><strong>NAMESPACE</strong></h2><p>当前命名空间的名称（区分大小写）</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">MyProject</span>;</div><div class="line"> </div><div class="line"><span class="keyword">echo</span> <span class="string">'命名空间为："'</span>, <span class="keyword">__NAMESPACE__</span>, <span class="string">'"'</span>; <span class="comment">// 输出 "MyProject"</span></div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line">命名空间为：<span class="string">"MyProject"</span></div></pre></td></tr></table></figure>
<h1 id="PHP-命名空间"><a href="#PHP-命名空间" class="headerlink" title="PHP 命名空间"></a>PHP 命名空间</h1><ul>
<li>用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突</li>
<li>为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性</li>
</ul>
<h2 id="定义命名空间"><a href="#定义命名空间" class="headerlink" title="定义命名空间"></a>定义命名空间</h2><p>命名空间通过关键字namespace 来声明</p>
<p>如果一个文件中包含命名空间，它必须在其它所有代码之前声明命名空间</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span>  </span></div><div class="line"><span class="comment">// 定义代码在 'MyProject' 命名空间中  </span></div><div class="line"><span class="keyword">namespace</span> <span class="title">MyProject</span>;  </div><div class="line"> </div><div class="line"><span class="comment">// ... 代码 ...</span></div></pre></td></tr></table></figure>
<p>同一个文件中定义不同的命名空间代码(不推荐)</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span>  </span></div><div class="line"><span class="keyword">namespace</span> <span class="title">MyProject</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> CONNECT_OK = <span class="number">1</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">()</span> </span>&#123; <span class="comment">/* ... */</span>  &#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">AnotherProject</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> CONNECT_OK = <span class="number">1</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">()</span> </span>&#123; <span class="comment">/* ... */</span>  &#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>建议使用下面的大括号形式的语法</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">namespace</span> <span class="title">MyProject</span> &#123;</div><div class="line">    <span class="title">const</span> <span class="title">CONNECT_OK</span> = 1;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Connection</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">()</span> </span>&#123; <span class="comment">/* ... */</span>  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">AnotherProject</span> &#123;</div><div class="line">    <span class="title">const</span> <span class="title">CONNECT_OK</span> = 1;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Connection</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">()</span> </span>&#123; <span class="comment">/* ... */</span>  &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>将全局的非命名空间中的代码与命名空间中的代码组合在一起，只能使用大括号形式的语法</p>
<p>全局代码必须用一个不带名称的 namespace 语句加上大括号括起来</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">namespace</span> <span class="title">MyProject</span> &#123;</div><div class="line"></div><div class="line"><span class="title">const</span> <span class="title">CONNECT_OK</span> = 1;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">()</span> </span>&#123; <span class="comment">/* ... */</span>  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> &#123; // 全局代码</div><div class="line"><span class="title">session_start</span>();</div><div class="line">$a = MyProject\connect();</div><div class="line"><span class="keyword">echo</span> MyProject\Connection::start();</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>在声明命名空间之前唯一合法的代码是用于定义源文件编码方式的 declare 语句</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">declare</span>(encoding=<span class="string">'UTF-8'</span>); <span class="comment">//定义多个命名空间和不包含在命名空间中的代码</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">MyProject</span> &#123;</div><div class="line"></div><div class="line"><span class="title">const</span> <span class="title">CONNECT_OK</span> = 1;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">()</span> </span>&#123; <span class="comment">/* ... */</span>  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> &#123; // 全局代码</div><div class="line"><span class="title">session_start</span>();</div><div class="line">$a = MyProject\connect();</div><div class="line"><span class="keyword">echo</span> MyProject\Connection::start();</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>以下代码会出现语法错误</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">namespace</span> <span class="title">MyProject</span>; <span class="comment">// 命名空间前出现了“&lt;html&gt;” 会致命错误 -　命名空间必须是程序脚本的第一条语句</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="子命名空间"><a href="#子命名空间" class="headerlink" title="子命名空间"></a>子命名空间</h2><p>与目录和文件的关系很像，PHP 命名空间也允许指定层次化的命名空间的名称</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 创建了常量 MyProject\Sub\Level\CONNECT_OK，类 MyProject\Sub\Level\Connection 和函数 MyProject\Sub\Level\Connect</div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">namespace</span> <span class="title">MyProject</span>\<span class="title">Sub</span>\<span class="title">Level</span>;  <span class="comment">//声明分层次的单个命名空间</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> CONNECT_OK = <span class="number">1</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Connect</span><span class="params">()</span> </span>&#123; <span class="comment">/* ... */</span>  &#125;</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="命名空间使用"><a href="#命名空间使用" class="headerlink" title="命名空间使用"></a>命名空间使用</h2><p>PHP 命名空间中的类名可以通过三种方式引用</p>
<ul>
<li>非限定名称，或不包含前缀的类名称</li>
</ul>
<p>例如 $a=new foo(); 或 foo::staticmethod()</p>
<p>如果当前命名空间是 currentnamespace，foo 将被解析为 currentnamespace\foo</p>
<p>如果使用 foo 的代码是全局的，不包含在任何命名空间中的代码，则 foo 会被解析为foo</p>
<ul>
<li>限定名称,或包含前缀的名称</li>
</ul>
<p>例如 $a = new subnamespace\foo(); 或 subnamespace\foo::staticmethod()</p>
<p>如果当前的命名空间是 currentnamespace，则 foo 会被解析为 currentnamespace\subnamespace\foo</p>
<p>如果使用 foo 的代码是全局的，不包含在任何命名空间中的代码，foo 会被解析为subnamespace\foo</p>
<ul>
<li>完全限定名称，或包含了全局前缀操作符的名称</li>
</ul>
<p>$a = new \currentnamespace\foo(); 或 \currentnamespace\foo::staticmethod()</p>
<p>在这种情况下，foo 总是被解析为代码中的文字名(literal name)currentnamespace\foo</p>
<p>实例一</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">namespace</span> <span class="title">Foo</span>\<span class="title">Bar</span>\<span class="title">subnamespace</span>; </div><div class="line"></div><div class="line"><span class="keyword">const</span> FOO = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">staticmethod</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>实例二</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">namespace</span> <span class="title">Foo</span>\<span class="title">Bar</span>;</div><div class="line"><span class="keyword">include</span> <span class="string">'file1.php'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> FOO = <span class="number">2</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">staticmethod</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 非限定名称 */</span></div><div class="line">foo(); <span class="comment">// 解析为函数 Foo\Bar\foo</span></div><div class="line">foo::staticmethod(); <span class="comment">// 解析为类 Foo\Bar\foo ，方法为 staticmethod</span></div><div class="line"><span class="keyword">echo</span> FOO; <span class="comment">// 解析为常量 Foo\Bar\FOO</span></div><div class="line"></div><div class="line"><span class="comment">/* 限定名称 */</span></div><div class="line">subnamespace\foo(); <span class="comment">// 解析为函数 Foo\Bar\subnamespace\foo</span></div><div class="line">subnamespace\foo::staticmethod(); <span class="comment">// 解析为类 Foo\Bar\subnamespace\foo,</span></div><div class="line">                                  <span class="comment">// 以及类的方法 staticmethod</span></div><div class="line"><span class="keyword">echo</span> subnamespace\FOO; <span class="comment">// 解析为常量 Foo\Bar\subnamespace\FOO</span></div><div class="line">                                  </div><div class="line"><span class="comment">/* 完全限定名称 */</span></div><div class="line">\Foo\Bar\foo(); <span class="comment">// 解析为函数 Foo\Bar\foo</span></div><div class="line">\Foo\Bar\foo::staticmethod(); <span class="comment">// 解析为类 Foo\Bar\foo, 以及类的方法 staticmethod</span></div><div class="line"><span class="keyword">echo</span> \Foo\Bar\FOO; <span class="comment">// 解析为常量 Foo\Bar\FOO</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>实例三</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 注意访问任意全局类、函数或常量，都可以使用完全限定名称</span></div><div class="line"><span class="comment">// 例如 \strlen() 或 \Exception 或 \INI_ALL</span></div><div class="line"><span class="comment">// 在命名空间内部访问全局类、函数和常量</span></div><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">Foo</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">strlen</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"><span class="keyword">const</span> INI_ALL = <span class="number">3</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exception</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">$a = \strlen(<span class="string">'hi'</span>); <span class="comment">// 调用全局函数strlen</span></div><div class="line">$b = \INI_ALL; <span class="comment">// 访问全局常量 INI_ALL</span></div><div class="line">$c = <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'error'</span>); <span class="comment">// 实例化全局类 Exception</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PHP-学习准备&quot;&gt;&lt;a href=&quot;#PHP-学习准备&quot; class=&quot;headerlink&quot; title=&quot;PHP 学习准备&quot;&gt;&lt;/a&gt;PHP 学习准备&lt;/h1&gt;&lt;h2 id=&quot;学习路线&quot;&gt;&lt;a href=&quot;#学习路线&quot; class=&quot;headerlink&quot; title=&quot;学习路线&quot;&gt;&lt;/a&gt;学习路线&lt;/h2&gt;&lt;p&gt;1.熟悉HTML/CSS/JS等网页基本元素，完成阶段可自行制作简单的网页，对元素属性相对熟悉&lt;/p&gt;
&lt;p&gt;2.理解动态语言的概念和运做机制，熟悉基本的PHP语法&lt;br&gt;
    
    </summary>
    
      <category term="BackEnd" scheme="http://yoursite.com/categories/BackEnd/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>React</title>
    <link href="http://yoursite.com/2018/07/01/2018.7.1/"/>
    <id>http://yoursite.com/2018/07/01/2018.7.1/</id>
    <published>2018-07-01T15:16:41.000Z</published>
    <updated>2018-07-03T13:20:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>打开bash,输入git clone git@github.com:ruanyf/react-demos.git</p>
<p>Demo 子目录，每个目录都有一个 index.html 文件，在浏览器打开这个文件，就能立刻看到效</p>
<p>React 可以在浏览器运行，也可以在服务器运行<br><a id="more"></a></p>
<h1 id="HTML模板"><a href="#HTML模板" class="headerlink" title="HTML模板"></a>HTML模板</h1><p>react.js 是 React 的核心库，react-dom.js 是提供与 DOM 相关的功能，Browser.js 的作用是将 JSX 语法转为 JavaScript 语法</p>
<p>最后一个script&gt;标签的 type 属性为 text/babel 。这是因为 React 独有的 JSX 语法，跟 JavaScript 不兼容。凡是使用 JSX 的地方，都要加上 type=”text/babel”</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="actionscript"></span></div><div class="line">      <span class="comment">// ** Our code goes here! **</span></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>实际上线的时候，应该将将 JSX 语法转为 JavaScript 语法放到服务器完成</p>
<p>将 src 子目录的 js 文件进行语法转换，转码后的文件全部放在 build 子目录</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">babel </span>src --out-<span class="keyword">dir </span><span class="keyword">build</span></div></pre></td></tr></table></figure>
<h1 id="ReactDOM-render"><a href="#ReactDOM-render" class="headerlink" title="ReactDOM.render()"></a>ReactDOM.render()</h1><p>ReactDOM.render 是 React 的最基本方法，用于将模板转为 HTML 语言，并插入指定的 DOM 节点</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将一个 h1 标题，插入 example 节点</span></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015033109.png" alt="image"></p>
<h1 id="JSX语法"><a href="#JSX语法" class="headerlink" title="JSX语法"></a>JSX语法</h1><p>JSX 的基本语法规则：遇到 HTML 标签（以 &lt; 开头），就用 HTML 规则解析；遇到代码块（以 { 开头），就用 JavaScript 规则解析</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> names = [<span class="string">'Alice'</span>, <span class="string">'Emily'</span>, <span class="string">'Kate'</span>];</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">  &#123;</div><div class="line">    names.map(function (name) &#123;</div><div class="line">      return <span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello, &#123;name&#125;!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>,</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015033106.png" alt="image"></p>
<p>JSX 允许直接在模板插入 JavaScript 变量。如果这个变量是一个数组，则会展开这个数组的所有成员</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="xml">var arr = [</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>,</div><div class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>React is awesome<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>,</div><div class="line">];</div><div class="line">ReactDOM.render(</div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="template-variable">&#123;arr&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>,</span></div><div class="line">  document.getElementById('example')</div><div class="line">);</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015033107.png" alt="image"></p>
<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>React 允许将代码封装成组件，然后像插入普通 HTML 标签一样，在网页中插入这个组件。React.createClass 方法就用于生成一个组件类</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// 所有组件类都必须有自己的 render 方法，用于输出组件</span></div><div class="line"> <span class="comment">// &lt;HelloMessage name="John"&gt; ，就是 HelloMessage 组件加入一个 name 属性，值为 John</span></div><div class="line"> <span class="comment">// 组件的属性可以在组件类的 this.props 对象上获取，比如 name 属性就可以通过 this.props.name 读取</span></div><div class="line"> <span class="keyword">var</span> HelloMessage = React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">HelloMessage</span> <span class="attr">name</span>=<span class="string">"John"</span> /&gt;</span>,</span></div><div class="line">  document.getElementById('example')</div><div class="line">);</div></pre></td></tr></table></figure>
<p> 代码会报错,因为HelloMessage组件包含了两个顶层标签：h1和p</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> HelloMessage = React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></div><div class="line">      Hello &#123;this.props.name&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></div><div class="line">      some text</div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015033108.png" alt="image"></p>
<blockquote>
<p>class 属性需要写成 className ，for 属性需要写成 htmlFor ，这是因为 class 和 for 是 JavaScript 的保留字</p>
</blockquote>
<h1 id="this-props-children"><a href="#this-props-children" class="headerlink" title="this.props.children"></a>this.props.children</h1><p>this.props.children属性表示组件的所有子节点</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// NoteList 组件有两个 span 子节点，它们都可以通过 this.props.children 读取</span></div><div class="line"><span class="keyword">var</span> NotesList = React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span></div><div class="line">      &#123;</div><div class="line">        React.Children.map(this.props.children, function (child) &#123;</div><div class="line">          return <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>;</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">NotesList</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">NotesList</span>&gt;</span>,</div><div class="line">  <span class="built_in">document</span>.body</div><div class="line">);</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015033110.png" alt="image"></p>
<blockquote>
<p>this.props.children 的值有三种可能：如果当前组件没有子节点，它就是 undefined</p>
<p>如果有一个子节点，数据类型是 object ；如果有多个子节点，数据类型就是 array</p>
<p>React.Children.map 来遍历子节点，而不用担心 this.props.children 的数据类型是 undefined 还是 object</p>
</blockquote>
<h1 id="PropTypes"><a href="#PropTypes" class="headerlink" title="PropTypes"></a>PropTypes</h1><p>组件的属性可以接受任意值，字符串、对象、函数等等都可以</p>
<p>组件类的PropTypes属性，就是用来验证组件实例的属性是否符合要求</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// title 属性是必须的，而且它的值必须是字符串,如下设置 title 属性的值是一个数值</span></div><div class="line"><span class="built_in">var</span> MyTitle = React.createClass(&#123;</div><div class="line">  propTypes: &#123;</div><div class="line">    title: React.PropTypes.<span class="built_in">string</span>.isRequired,</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  render: function() &#123;</div><div class="line">     <span class="keyword">return</span> &lt;h1&gt; &#123;this.props.title&#125; &lt;/h1&gt;;</div><div class="line">   &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">var</span> <span class="built_in">data</span> = <span class="number">123</span>;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;MyTitle title=&#123;<span class="built_in">data</span>&#125; /&gt;,</div><div class="line">  document.body</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// title属性就通不过验证了。控制台会显示一行错误信息</span></div><div class="line">Warning: Failed propType: Invalid prop <span class="string">`title`</span> of <span class="keyword">type</span> <span class="string">`number`</span> supplied <span class="keyword">to</span> <span class="string">`MyTitle`</span>, expected <span class="string">`string`</span>.</div></pre></td></tr></table></figure>
<p>getDefaultProps 方法可以用来设置组件属性的默认值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 输出"Hello World"</span></div><div class="line"><span class="keyword">var</span> MyTitle = React.createClass(&#123;</div><div class="line">  <span class="attr">getDefaultProps</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">title</span> : <span class="string">'Hello World'</span></div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> &#123;this.props.title&#125; <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</div><div class="line">   &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">MyTitle</span> /&gt;</span>,</span></div><div class="line">  document.body</div><div class="line">);</div></pre></td></tr></table></figure>
<h1 id="获取真实的DOM节点"><a href="#获取真实的DOM节点" class="headerlink" title="获取真实的DOM节点"></a>获取真实的DOM节点</h1><p>组件并不是真实的DOM节点，而是存在于内存之中的一种数据结构，叫做虚拟 DOM</p>
<p>从组件获取真实DOM的节点，这时就要用到ref属性</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//组件 MyComponent 的子节点有一个文本输入框，用于获取用户的输入</span></div><div class="line"><span class="comment">//文本输入框必须有一个 ref 属性，然后 this.refs.[refName] 就会返回这个真实的 DOM 节点</span></div><div class="line"><span class="comment">//this.refs.[refName] 属性获取的是真实 DOM ，必须等到虚拟 DOM 插入文档以后，才能使用这个属性，否则会报错</span></div><div class="line"><span class="comment">//通过为组件指定Click事件的回调函数，确保了只有等到真实DOM发生Click事件之后，才会读取this.refs.[refName]属性</span></div><div class="line"><span class="comment">//React 组件支持很多事件，除了 Click事件以外，还有 KeyDown 、Copy、Scroll</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> MyComponent = React.createClass(&#123;</div><div class="line">  handleClick: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.refs.myTextInput.focus();</div><div class="line">  &#125;,</div><div class="line">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;input type=<span class="string">"text"</span> ref=<span class="string">"myTextInput"</span> /&gt;</div><div class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"Focus the text input"</span> onClick=&#123;<span class="keyword">this</span>.handleClick&#125; /&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;MyComponent /&gt;,</div><div class="line">  document.getElementById(<span class="string">'example'</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<h1 id="this-state"><a href="#this-state" class="headerlink" title="this.state"></a>this.state</h1><p>React将组件看成是一个状态机，一开始有一个初始状态，然后用户互动，导致状态变化，从而触发重新渲染 UI </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//LikeButton组件，它的getInitialState方法用于定义初始状态，也就是一个对象，这个对象可以通过 this.state属性读取</span></div><div class="line"><span class="comment">//当用户点击组件，导致状态变化，this.setState方法就修改状态值，每次修改以后，自动调用this.render方法，再次渲染组件</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="keyword">var</span> LikeButton = React.createClass(&#123;</div><div class="line">  <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;<span class="attr">liked</span>: <span class="literal">false</span>&#125;;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">handleClick</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">liked</span>: !<span class="keyword">this</span>.state.liked&#125;);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> text = <span class="keyword">this</span>.state.liked ? <span class="string">'like'</span> : <span class="string">'haven\'t liked'</span>;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span></div><div class="line">        You &#123;text&#125; this. Click to toggle.</div><div class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">LikeButton</span> /&gt;</span>,</span></div><div class="line">  document.getElementById('example')</div><div class="line">);</div></pre></td></tr></table></figure>
<blockquote>
<p>this.props 表示那些一旦定义，就不再改变的特性，而 this.state 是会随着用户互动而产生变化的特性</p>
</blockquote>
<h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><p>用户在表单填入的内容，属于用户跟组件的互动，所以不能用 this.props 读取</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//文本输入框的值，不能用 this.props.value 读取，而要定义一个 onChange事件的回调函数，通过event.target.value读取用户输入的值</span></div><div class="line"><span class="keyword">var</span> Input = React.createClass(&#123;</div><div class="line">  <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;<span class="attr">value</span>: <span class="string">'Hello!'</span>&#125;;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">handleChange</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>: event.target.value&#125;);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> value = <span class="keyword">this</span>.state.value;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(<span class="tag">&lt;<span class="name">Input</span>/&gt;</span>, document.body);</div></pre></td></tr></table></figure>
<h1 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h1><p>组件的生命周期分成三个状态</p>
<ul>
<li>Mounting：已插入真实 DOM</li>
<li>Updating：正在被重新渲染</li>
<li>Unmounting：已移出真实 DOM</li>
</ul>
<p>React 为每个状态都提供了两种处理函数，will 函数在进入状态之前调用，did 函数在进入状态之后调用，三种状态共计五种处理函数</p>
<ul>
<li>componentWillMount()</li>
<li>componentDidMount()</li>
<li>componentWillUpdate(object nextProps, object nextState)</li>
<li>componentDidUpdate(object prevProps, object prevState)</li>
<li>componentWillUnmount()</li>
</ul>
<p>React 还提供两种特殊状态的处理函数</p>
<ul>
<li>componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用</li>
<li>shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用</li>
</ul>
<p>这些方法的详细说明，可以参考官方文档。下面是一个例子</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// hello组件加载以后，通过 componentDidMount 方法设置一个定时器，每隔100毫秒，就重新设置组件的透明度，从而引发重新渲染</span></div><div class="line"><span class="comment">//  React 组件样式是一个对象，所以第一重大括号表示这是 JavaScript 语法，第二重大括号表示样式对象</span></div><div class="line"><span class="keyword">var</span> Hello = React.createClass(&#123;</div><div class="line">  <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">opacity</span>: <span class="number">1.0</span></div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">componentDidMount</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> opacity = <span class="keyword">this</span>.state.opacity;</div><div class="line">      opacity -= <span class="number">.05</span>;</div><div class="line">      <span class="keyword">if</span> (opacity &lt; <span class="number">0.1</span>) &#123;</div><div class="line">        opacity = <span class="number">1.0</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">this</span>.setState(&#123;</div><div class="line">        <span class="attr">opacity</span>: opacity</div><div class="line">      &#125;);</div><div class="line">    &#125;.bind(<span class="keyword">this</span>), <span class="number">100</span>);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;opacity:</span> <span class="attr">this.state.opacity</span>&#125;&#125;&gt;</span></span></div><div class="line">        Hello &#123;this.props.name&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Hello</span> <span class="attr">name</span>=<span class="string">"world"</span>/&gt;</span>,</span></div><div class="line">  document.body</div><div class="line">);</div></pre></td></tr></table></figure>
<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p>组件的数据来源，通常是通过Ajax请求从服务器获取，可以使用componentDidMount方法设置 Ajax 请求，等到请求成功，再用this.setState方法重新渲染UI</p>
<p>jQuery 完成 Ajax 请求，这是为了便于说明。React 本身没有任何依赖，完全可以不用jQuery，而使用其他库</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> UserGist = React.createClass(&#123;</div><div class="line">  <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">username</span>: <span class="string">''</span>,</div><div class="line">      <span class="attr">lastGistUrl</span>: <span class="string">''</span></div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">componentDidMount</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $.get(<span class="keyword">this</span>.props.source, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> lastGist = result[<span class="number">0</span>];</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.isMounted()) &#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;</div><div class="line">          <span class="attr">username</span>: lastGist.owner.login,</div><div class="line">          <span class="attr">lastGistUrl</span>: lastGist.html_url</div><div class="line">        &#125;);</div><div class="line">      &#125;</div><div class="line">    &#125;.bind(<span class="keyword">this</span>));</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        &#123;this.state.username&#125;'s last gist is</div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;this.state.lastGistUrl&#125;</span>&gt;</span>here<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">UserGist</span> <span class="attr">source</span>=<span class="string">"https://api.github.com/users/octocat/gists"</span> /&gt;</span>,</span></div><div class="line">  document.body</div><div class="line">);</div></pre></td></tr></table></figure>
<p>把一个Promise对象传入组件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Github的API抓取数据，然后将Promise对象作为属性，传给RepoList组件</span></div><div class="line"><span class="comment">//Promise对象正在抓取数据（pending状态），组件显示"正在加载"</span></div><div class="line"><span class="comment">//如果Promise对象报错（rejected状态），组件显示报错信息</span></div><div class="line"><span class="comment">//如果Promise对象抓取数据成功（fulfilled状态），组件显示获取的数据</span></div><div class="line"><span class="keyword">var</span> RepoList = React.createClass(&#123;</div><div class="line">  <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">loading</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">error</span>: <span class="literal">null</span>,</div><div class="line">      <span class="attr">data</span>: <span class="literal">null</span></div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  componentDidMount() &#123;</div><div class="line">    <span class="keyword">this</span>.props.promise.then(</div><div class="line">      <span class="function"><span class="params">value</span> =&gt;</span> <span class="keyword">this</span>.setState(&#123;<span class="attr">loading</span>: <span class="literal">false</span>, <span class="attr">data</span>: value&#125;),</div><div class="line">      error =&gt; <span class="keyword">this</span>.setState(&#123;<span class="attr">loading</span>: <span class="literal">false</span>, <span class="attr">error</span>: error&#125;));</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.loading) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state.error !== <span class="literal">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Error: &#123;this.state.error.message&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">var</span> repos = <span class="keyword">this</span>.state.data.items;</div><div class="line">      <span class="keyword">var</span> repoList = repos.map(<span class="function"><span class="keyword">function</span> (<span class="params">repo, index</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;repo.html_url&#125;</span>&gt;</span>&#123;repo.name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span> (&#123;repo.stargazers_count&#125; stars) <span class="tag">&lt;<span class="name">br</span>/&gt;</span> &#123;repo.description&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">        );</div><div class="line">      &#125;);</div><div class="line">      <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Most Popular JavaScript Projects in Github<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">ol</span>&gt;</span>&#123;repoList&#125;<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">main</span>&gt;</span></div><div class="line">      );</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">RepoList</span> <span class="attr">promise</span>=<span class="string">&#123;$.getJSON(</span>'<span class="attr">https:</span>//<span class="attr">api.github.com</span>/<span class="attr">search</span>/<span class="attr">repositories</span>?<span class="attr">q</span>=<span class="string">javascript&amp;sort</span>=<span class="string">stars</span>')&#125; /&gt;</span>,</span></div><div class="line">  document.getElementById('example')</div><div class="line">);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;打开bash,输入git clone git@github.com:ruanyf/react-demos.git&lt;/p&gt;
&lt;p&gt;Demo 子目录，每个目录都有一个 index.html 文件，在浏览器打开这个文件，就能立刻看到效&lt;/p&gt;
&lt;p&gt;React 可以在浏览器运行，也可以在服务器运行&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>【总结】2018年6月份个人总结</title>
    <link href="http://yoursite.com/2018/06/28/2018.6summary/"/>
    <id>http://yoursite.com/2018/06/28/2018.6summary/</id>
    <published>2018-06-27T16:40:15.000Z</published>
    <updated>2018-06-28T16:00:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>是谁来自山川湖海,又囿于昼夜,厨房与爱</p>
<p>这个六月,跟往常不太一样,重新一段几乎全新的生活,没有任何的不适,走了几个地方,认识几个朋友,人幽默很nice,我已经习惯这边的生活</p>
<a id="more"></a>
<p>念过往,畏将来,冥冥中这是我唯一要走的路。我是个喜欢怀旧的人，但我不想回到过去任何一个时间点，因为即使重来我还是会选择现在走过的路</p>
<p>我向往大厂的技术及工资,并会不断努力达到进入要求。与在头条的老妹每次通话,都深知,高工资高成长的大厂,是每天起早贪黑的工作及学习,并要牺牲很多业余时间的代价</p>
<p>所以我现在非常珍惜单纯快乐的时光，不需要考虑吃穿住行，不需要考虑家庭压力和责任，这样的日子也许是未来最美好的一段回忆。所以以更积极向上的姿态去拥抱生活,投资自己</p>
<h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><p>1.React.js: 过了一遍文档,争取后期完成项目</p>
<p>2.Canvas: 看MDN,写了个画板demo</p>
<p>3.PHP: 学习基础语法及常用函数</p>
<p>4.专利: 报名11月份考试,买5本考试书籍</p>
<p>5.ES6: 重新总结ES6的大部分语法糖、变量的解构等等并实战了一遍</p>
<p>6.前端MVC设计模式及网页性能优化</p>
<p>7.CSS动画初试:transition和animation</p>
<h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><p>1.海尔小家电运营平台增加订单管理功能</p>
<p>2.海尔插件将jqueryHelp.js的createTree增加三属性isContact,isAddEvent,isHideExpandAll满足需求</p>
<p>3.运维四台服务器的每月报账</p>
<h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>1.学会素描,可以画猫、建筑</p>
<p>2.每天坚持夜跑40分钟、练字半个钟</p>
<p>3.大学毕业后转建筑的同学来找我玩,去了一趟大夫山骑单车,真是贼舒服,仿佛回到高三那时候周六晚都会在汕头骑单车放松听歌</p>
<p>4.去市桥的游泳馆游了一次泳,终于突破2米的恐惧~只会费体力的自由泳及仰泳，学习蛙泳中</p>
<p>5.六月十三日小学兼结拜兄弟紫菜结婚,八个结拜兄弟,已2位正式结婚,真怀念从小学玩到大一起踢球、打球、钓鱼、烧烤、游泳、爬山等等没心没肺的日子,感叹现在的聚少离多</p>
<p>6.顺便请了个长假回家休息,唱K两次,释放压力,好男儿心怀向大海</p>
<p>7.去了一趟汕大,人美学校也美</p>
<p>8.这个月熬夜不多,12点前都坚持准时睡觉,除了一次看阿根廷的球赛熬了夜</p>
<p>9.每周打扫一次卫生</p>
<h1 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h1><h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><p>《ES6标准入门》100%、《React.js标准教程》100%、《JavaScript语言精粹》100%、《你不知道的JavaScript(上)》100%、《图解HTTP》20%、《Git版本控制管理》100%、《PHP和MySQL.Web开发(第4版)》10%、《机械领域专利申请文件的撰写与审查》10%、《计算机网络第五版》100%</p>
<h2 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h2><p>《傲慢与偏见》、《美国派1-4部》、《年鉴计划》</p>
<h2 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h2><p>《原来你也在这里》、《每日最热资讯榜》、《局座悄悄话》</p>
<h1 id="绩效评估"><a href="#绩效评估" class="headerlink" title="绩效评估"></a>绩效评估</h1><table>
<thead>
<tr>
<th>学习</th>
<th>工作</th>
<th>生活</th>
<th>阅读</th>
<th>总分</th>
</tr>
</thead>
<tbody>
<tr>
<td>7</td>
<td>5</td>
<td>8</td>
<td>4</td>
<td>25</td>
</tr>
</tbody>
</table>
<h1 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h1><p>学习目标:PHP、Vue全家桶、React深入、SVG、前端工作流工具</p>
<p>另外说一句，我再海尔转正了，时光荏苒呀</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;是谁来自山川湖海,又囿于昼夜,厨房与爱&lt;/p&gt;
&lt;p&gt;这个六月,跟往常不太一样,重新一段几乎全新的生活,没有任何的不适,走了几个地方,认识几个朋友,人幽默很nice,我已经习惯这边的生活&lt;/p&gt;
    
    </summary>
    
      <category term="lifes" scheme="http://yoursite.com/categories/lifes/"/>
    
    
      <category term="个人总结" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript语言精粹</title>
    <link href="http://yoursite.com/2018/06/25/2018.6.25/"/>
    <id>http://yoursite.com/2018/06/25/2018.6.25/</id>
    <published>2018-06-25T04:40:15.000Z</published>
    <updated>2018-07-08T01:45:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript蝴蝶书,详细分析了Javascript中哪些部分是精粹，哪些部分是糟粕和鸡肋</p>
<p>列出了11种应该避免使用的Javascript语法<br><a id="more"></a></p>
<h1 id=""><a href="#" class="headerlink" title="=="></a>==</h1><p>永远只使用===和!==。因为==默认会进行类型转换，规则十分难记。</p>
<h1 id="with"><a href="#with" class="headerlink" title="with"></a>with</h1><p>解释器会首先判断obj.b和obj.d是否存在，如果不存在的话，再判断全局变量b和d是否存在</p>
<p>这样就导致了低效率，而且可能会导致意外，因此最好不要使用with语句</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">obj.<span class="attr">a</span> = obj.b;</div><div class="line">obj.<span class="attr">c</span> = obj.d;</div><div class="line"></div><div class="line">// 可以简写成</div><div class="line"><span class="keyword">with</span>(obj) &#123;</div><div class="line">    <span class="attr">a</span> = b;</div><div class="line">    <span class="attr">c</span> = d;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h1><p>eval用来直接执行一个字符串,性能差</p>
<p>eval能够做到的事情，不用它也能做到</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">eval</span>(<span class="string">"myValue = myObject."</span> + myKey + <span class="string">";"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 可以直接写成</span></div><div class="line">myValue = myObject[myKey];</div></pre></td></tr></table></figure>
<h1 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h1><p>这条命令的作用是返回到循环的头部，但是循环本来就会返回到头部</p>
<p>避免使用这条命令，使得效率得到改善</p>
<h1 id="switch-贯穿"><a href="#switch-贯穿" class="headerlink" title="switch 贯穿"></a>switch 贯穿</h1><p>switch结构中的case语句，默认是顺序执行，除非遇到break，return和throw</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span>(n) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">    <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>建议避免switch贯穿，凡是有case的地方，一律加上break</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span>(n) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="单行的块结构"><a href="#单行的块结构" class="headerlink" title="单行的块结构"></a>单行的块结构</h1><p>if、while、do和for，都是块结构语句，但是也可以接受单行命令,如</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if (<span class="name">ok</span>) <span class="literal">t</span> = true<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>不管是否只有一行命令，都一律加上大括号</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">if</span> (ok)&#123;</div><div class="line">    <span class="attribute">t</span> = <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="和–"><a href="#和–" class="headerlink" title="++和–"></a>++和–</h1><p>递增运算符++和递减运算符–,实际上会让代码看上去更复杂,为了代码的整洁性和易读性，不用为好</p>
<h1 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h1><p>Javascript内部，所有数字都保存为双精度浮点数。如果使用它们的话，Javascript不得不将运算数先转为整数，然后再进行运算，这样就降低了速度</p>
<h1 id="function语句"><a href="#function语句" class="headerlink" title="function语句"></a>function语句</h1><p>前一种写法会被解析器自动提升到代码的头部，因此违背了函数应该先定义后使用的要求，所以建议定义函数时，全部采用后一种写法</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// 等价于</span></div><div class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<h1 id="基本数据类型的包装对象"><a href="#基本数据类型的包装对象" class="headerlink" title="基本数据类型的包装对象"></a>基本数据类型的包装对象</h1><p>Javascript的基本数据类型包括字符串、数字、布尔值，它们都有对应的包装对象String、Number和Boolean,这样写完全没有必要</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="type">String</span>(<span class="string">"Hello World"</span>);</div><div class="line"><span class="keyword">new</span> <span class="type">Number</span>(<span class="number">2000</span>);</div><div class="line"><span class="keyword">new</span> <span class="type">Boolean</span>(<span class="literal">false</span>);</div></pre></td></tr></table></figure>
<h1 id="void"><a href="#void" class="headerlink" title="void"></a>void</h1><p>在Javascript中，void是一个运算符，接受一个运算数，并返回undefined,这个命令没什么用,避免使用</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> <span class="number">0</span>; <span class="comment">// undefined</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript蝴蝶书,详细分析了Javascript中哪些部分是精粹，哪些部分是糟粕和鸡肋&lt;/p&gt;
&lt;p&gt;列出了11种应该避免使用的Javascript语法&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>网页性能优化</title>
    <link href="http://yoursite.com/2018/06/21/2018.6.21/"/>
    <id>http://yoursite.com/2018/06/21/2018.6.21/</id>
    <published>2018-06-21T04:40:15.000Z</published>
    <updated>2018-06-20T16:11:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>有些网页响应非常缓慢，占用大量的CPU和内存，浏览起来常常有卡顿，页面的动画效果也不流畅</p>
<h1 id="网页生成的过程"><a href="#网页生成的过程" class="headerlink" title="网页生成的过程"></a>网页生成的过程</h1><a id="more"></a>
<p>1.HTML代码转化成DOM</p>
<p>2.CSS代码转化成CSSOM</p>
<p>3.结合DOM和CSSOM，生成一棵渲染树</p>
<p>4.生成布局，即将所有渲染树的所有节点进行平面合成</p>
<p>5.将布局绘制在屏幕上</p>
<blockquote>
<p>“生成布局”（flow）和”绘制”（paint）这两步，合称为”渲染”（render）</p>
</blockquote>
<h1 id="重排和重绘"><a href="#重排和重绘" class="headerlink" title="重排和重绘"></a>重排和重绘</h1><p>重新渲染，就需要重新生成布局和重新绘制。前者叫做”重排”（reflow），后者叫做”重绘”（repaint）</p>
<p>以下三种情况，会导致网页重新渲染</p>
<p>1.修改DOM</p>
<p>2.修改样式表</p>
<p>3.用户事件</p>
<h1 id="对于性能的影响"><a href="#对于性能的影响" class="headerlink" title="对于性能的影响"></a>对于性能的影响</h1><p>提高网页性能，就是要降低”重排”和”重绘”的频率和成本，尽量少触发重新渲染</p>
<p>一般来说，样式的写操作之后，如果有下面这些属性的读操作，都会引发浏览器立即重新渲染</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// div元素有两个样式变动，但是浏览器只会触发一次重排和重绘</span></div><div class="line"><span class="keyword">div</span>.style.color = <span class="string">'blue'</span>;</div><div class="line"><span class="keyword">div</span>.style.marginTop = <span class="string">'30px'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 如果读和写操作一起，就会触发两次重排和重绘</span></div><div class="line"><span class="keyword">div</span>.style.color = <span class="string">'blue'</span>;</div><div class="line"><span class="keyword">var</span> margin = parseInt(<span class="keyword">div</span>.style.marginTop);</div><div class="line"><span class="keyword">div</span>.style.marginTop = (margin + <span class="number">10</span>) + <span class="string">'px'</span>;</div></pre></td></tr></table></figure>
<p>规律如下:</p>
<p>1.样式表越简单，重排和重绘就越快</p>
<p>2.重排和重绘的DOM元素层级越高，成本就越高</p>
<p>3.table元素的重排和重绘成本，要高于div元素</p>
<h1 id="提高性能的九个技巧"><a href="#提高性能的九个技巧" class="headerlink" title="提高性能的九个技巧"></a>提高性能的九个技巧</h1><p>1.DOM 的多个读操作（或多个写操作），应该放在一起。不要两个读操作之间，加入一个写操作</p>
<p>2.如果某个样式是通过重排得到的，那么最好缓存结果。避免下一次用到的时候，浏览器又要重排</p>
<p>3.不要一条条地改变样式，而要通过改变class，或者csstext属性，一次性地改变样式</p>
<p>4.尽量使用离线DOM，而不是真实的网面DOM，来改变元素样式</p>
<p>5.先将元素设为display:none（需要1次重排和重绘），然后对这个节点进行100次操作，最后再恢复显示</p>
<p>6.position属性为absolute或fixed的元素，重排的开销会比较小，因为不用考虑它对其他元素的影响</p>
<p>7.只在必要的时候，才将元素的display属性设为可见，因为不可见的元素不影响重排和重绘。另外，visibility : hidden的元素只对重绘有影响，不影响重排</p>
<p>8.使用虚拟DOM的脚本库，比如React等</p>
<p>9.使用 window.requestAnimationFrame()、window.requestIdleCallback()这两个方法调节重新渲染</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有些网页响应非常缓慢，占用大量的CPU和内存，浏览起来常常有卡顿，页面的动画效果也不流畅&lt;/p&gt;
&lt;h1 id=&quot;网页生成的过程&quot;&gt;&lt;a href=&quot;#网页生成的过程&quot; class=&quot;headerlink&quot; title=&quot;网页生成的过程&quot;&gt;&lt;/a&gt;网页生成的过程&lt;/h1&gt;
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="网页性能" scheme="http://yoursite.com/tags/%E7%BD%91%E9%A1%B5%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>ES5数组扩展方法源代码</title>
    <link href="http://yoursite.com/2018/06/19/2018.6.19/"/>
    <id>http://yoursite.com/2018/06/19/2018.6.19/</id>
    <published>2018-06-19T04:40:15.000Z</published>
    <updated>2018-06-19T14:44:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="join"><a href="#join" class="headerlink" title="join"></a>join</h1><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var<span class="built_in"> array </span>= ['a','b','c']</div><div class="line">array.join('-') // 结果是'a-b-c'</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="源代码实现"><a href="#源代码实现" class="headerlink" title="源代码实现"></a>源代码实现</h2><p>1.array.join是Array.prototype.join对应的函数</p>
<p>2.array.join(‘-‘)等价于array.join.call(array,’-‘)</p>
<p>3.join函数的this和arguments[0]可以得到array和’-‘两个值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.join = <span class="function"><span class="keyword">function</span>(<span class="params">char</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> result = <span class="keyword">this</span>[<span class="number">0</span>] || <span class="string">''</span></div><div class="line">  <span class="keyword">let</span> length = <span class="keyword">this</span>.length</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>; i&lt; length; i++)&#123;</div><div class="line">      result += char + <span class="keyword">this</span>[i]</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h1><h2 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var a = ['a', 'b', 'c'];</div><div class="line">a.slice(1) // [<span class="string">"b"</span>, <span class="string">"c"</span>]</div><div class="line">a.slice(1, 2) // [<span class="string">"b"</span>]</div><div class="line">a.slice() // [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</div><div class="line"></div><div class="line">// 将伪数组转化成数组<span class="built_in"></span></div><div class="line">array = Array.prototye.slice.call(arrayLike)</div><div class="line">或者<span class="built_in"></span></div><div class="line">array = [].slice.call(arrayLike)</div></pre></td></tr></table></figure>
<h2 id="源代码实现-1"><a href="#源代码实现-1" class="headerlink" title="源代码实现"></a>源代码实现</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Array<span class="variable">.prototype</span><span class="variable">.slice</span> = <span class="keyword">function</span>(<span class="keyword">begin</span>, <span class="keyword">end</span>)&#123;</div><div class="line">    <span class="keyword">let</span> result = []</div><div class="line">    <span class="keyword">begin</span> = <span class="keyword">begin</span> || <span class="number">0</span></div><div class="line">    <span class="keyword">end</span> = <span class="keyword">end</span> || <span class="keyword">this</span><span class="variable">.length</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="keyword">begin</span>; i&lt; <span class="keyword">end</span>; i++)&#123;</div><div class="line">        result<span class="variable">.push</span>(<span class="keyword">this</span>[i])</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h1><h2 id="应用-2"><a href="#应用-2" class="headerlink" title="应用"></a>应用</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">'d</span>', <span class="symbol">'c</span>', <span class="symbol">'b</span>', <span class="symbol">'a</span>'].sort()</div><div class="line">// [<span class="symbol">'a</span>', <span class="symbol">'b</span>', <span class="symbol">'c</span>', <span class="symbol">'d</span>']</div><div class="line"></div><div class="line">[<span class="name">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>].sort()</div><div class="line">// [<span class="name">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"></div><div class="line">[<span class="name">11</span>, <span class="number">101</span>].sort()</div><div class="line">// [<span class="name">101</span>, <span class="number">11</span>]</div><div class="line"></div><div class="line">[<span class="name">10111</span>, <span class="number">1101</span>, <span class="number">111</span>].sort()</div><div class="line">// [<span class="name">10111</span>, <span class="number">1101</span>, <span class="number">111</span>]</div><div class="line"></div><div class="line">[<span class="name">10111</span>, <span class="number">1101</span>, <span class="number">111</span>].sort(<span class="name">function</span> (<span class="name">a</span>, b) &#123;</div><div class="line">  return a - b<span class="comment">;</span></div><div class="line">&#125;)</div><div class="line">// [<span class="name">111</span>, <span class="number">1101</span>, <span class="number">10111</span>]</div></pre></td></tr></table></figure>
<h2 id="源代码实现-2"><a href="#源代码实现-2" class="headerlink" title="源代码实现"></a>源代码实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 选择排序</span></div><div class="line"><span class="built_in">Array</span>.prototype.sort = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">    fn = fn || <span class="function">(<span class="params">a,b</span>)=&gt;</span> a-b</div><div class="line">    <span class="keyword">let</span> roundCount = <span class="keyword">this</span>.length - <span class="number">1</span> <span class="comment">// 比较的轮数</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; roundCount; i++)&#123;</div><div class="line">        <span class="keyword">let</span> minIndex = <span class="keyword">this</span>[i]</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> k = i+<span class="number">1</span>; k &lt; <span class="keyword">this</span>.length; k++)&#123;</div><div class="line">            <span class="keyword">if</span>( fn.call(<span class="literal">null</span>, <span class="keyword">this</span>[k],<span class="keyword">this</span>[i]) &lt; <span class="number">0</span> )&#123;</div><div class="line">                [ <span class="keyword">this</span>[i], <span class="keyword">this</span>[k] ] = [ <span class="keyword">this</span>[k], <span class="keyword">this</span>[i] ]</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h1><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[<span class="name">2</span>, <span class="number">5</span>, <span class="number">9</span>].forEach(<span class="name">function</span> (<span class="name">element</span>, index, array) &#123;</div><div class="line">  console.log('[' + index + '] = ' + element)</div><div class="line">&#125;)<span class="comment">;</span></div><div class="line">// [<span class="name">0</span>] = <span class="number">2</span></div><div class="line">// [<span class="name">1</span>] = <span class="number">5</span></div><div class="line">// [<span class="name">2</span>] = <span class="number">9</span></div></pre></td></tr></table></figure>
<h2 id="源代码实现-3"><a href="#源代码实现-3" class="headerlink" title="源代码实现"></a>源代码实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(i <span class="keyword">in</span> <span class="keyword">this</span>)&#123;</div><div class="line">            fn.call(<span class="literal">undefined</span>, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><h2 id="应用-3"><a href="#应用-3" class="headerlink" title="应用"></a>应用</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">numbers.map(<span class="function"><span class="keyword">function</span> <span class="params">(n)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> n + <span class="number">1</span></div><div class="line">&#125;);</div><div class="line"><span class="comment">// [2, 3, 4]</span></div><div class="line">numbers</div><div class="line"><span class="comment">// [1, 2, 3]</span></div></pre></td></tr></table></figure>
<h2 id="源代码实现-4"><a href="#源代码实现-4" class="headerlink" title="源代码实现"></a>源代码实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.map = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> result = []</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(i <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</div><div class="line">            result[i] = fn.call(<span class="literal">undefined</span>, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h1><h2 id="应用-4"><a href="#应用-4" class="headerlink" title="应用"></a>应用</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="name">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].filter(<span class="name">function</span> (<span class="name">elem</span>) &#123;</div><div class="line">  return (<span class="name">elem</span> &gt; <span class="number">3</span>)<span class="comment">;</span></div><div class="line">&#125;)</div><div class="line">// [<span class="name">4</span>, <span class="number">5</span>]</div></pre></td></tr></table></figure>
<h2 id="源代码实现-5"><a href="#源代码实现-5" class="headerlink" title="源代码实现"></a>源代码实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Arra.prototype.filter = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> result = []</div><div class="line">    <span class="keyword">let</span> temp</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(i <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</div><div class="line">            <span class="keyword">if</span>(temp = fn.call(<span class="literal">undefined</span>, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>) )&#123;</div><div class="line">                result.push(<span class="keyword">this</span>[i])</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h1><h2 id="应用-5"><a href="#应用-5" class="headerlink" title="应用"></a>应用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].reduce(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(a, b);</div><div class="line">    <span class="keyword">return</span> a + b;</div><div class="line">&#125;)</div><div class="line"><span class="comment">// 1 2</span></div><div class="line"><span class="comment">// 3 3</span></div><div class="line"><span class="comment">// 6 4</span></div><div class="line"><span class="comment">// 10 5</span></div><div class="line"><span class="comment">//最后结果：15</span></div></pre></td></tr></table></figure>
<h2 id="源代码实现-6"><a href="#源代码实现-6" class="headerlink" title="源代码实现"></a>源代码实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Arra.prototype.reduce = <span class="function"><span class="keyword">function</span>(<span class="params">fn, init</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> result = init</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(i <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</div><div class="line">            result = fn.call(<span class="literal">undefined</span>, result, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;join&quot;&gt;&lt;a href=&quot;#join&quot; class=&quot;headerlink&quot; title=&quot;join&quot;&gt;&lt;/a&gt;join&lt;/h1&gt;&lt;h2 id=&quot;应用&quot;&gt;&lt;a href=&quot;#应用&quot; class=&quot;headerlink&quot; title=&quot;应用&quot;&gt;&lt;/a&gt;应用&lt;/h2&gt;&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var&lt;span class=&quot;built_in&quot;&gt; array &lt;/span&gt;= [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;array.join(&#39;-&#39;) // 结果是&#39;a-b-c&#39;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
