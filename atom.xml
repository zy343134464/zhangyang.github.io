<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Learning and Doing</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-13T16:01:42.827Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhang Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【实战】商城</title>
    <link href="http://yoursite.com/2018/07/14/2018.7.14/"/>
    <id>http://yoursite.com/2018/07/14/2018.7.14/</id>
    <published>2018-07-14T15:16:41.000Z</published>
    <updated>2018-07-13T16:01:42.827Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="React Router" scheme="http://yoursite.com/tags/React-Router/"/>
    
  </entry>
  
  <entry>
    <title>Redux</title>
    <link href="http://yoursite.com/2018/07/11/2018.7.11/"/>
    <id>http://yoursite.com/2018/07/11/2018.7.11/</id>
    <published>2018-07-11T15:16:41.000Z</published>
    <updated>2018-07-12T14:02:28.011Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="Redux" scheme="http://yoursite.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>React Router</title>
    <link href="http://yoursite.com/2018/07/08/2018.7.8/"/>
    <id>http://yoursite.com/2018/07/08/2018.7.8/</id>
    <published>2018-07-08T15:16:41.000Z</published>
    <updated>2018-07-15T08:49:26.205Z</updated>
    
    <content type="html"><![CDATA[<p>React 体系的一个重要部分：路由库React-Router,唯一可选的路由库</p>
<p>通过管理 URL，实现组件的切换和状态的变化，开发复杂的应用几乎肯定会用到</p>
<p><a href="https://github.com/reactjs/react-router-tutorial/tree/master/lessons" target="_blank" rel="external">官网实例</a><br><a id="more"></a></p>
<h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><p>React Router 安装命令</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> -S react-router</div></pre></td></tr></table></figure>
<p>路由器Router就是React的一个组件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Router &#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</div><div class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">Router</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>));</div></pre></td></tr></table></figure>
<p>Router组件本身只是一个容器，真正的路由要通过Route组件定义</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> 用户访问根路由<span class="regexp">/（比如http:/</span><span class="regexp">/www.example.com/</span>），组件APP就会加载到<span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</div><div class="line"><span class="regexp">//</span> Router组件有一个参数history，它的值hashHistory表示，路由的切换由URL的hash变化决定，即URL的<span class="comment">#部分发生变化</span></div><div class="line"><span class="regexp">//</span> 举例来说，用户访问http:<span class="regexp">//</span>www.example.com<span class="regexp">/，实际会看到的是http:/</span><span class="regexp">/www.example.com/</span><span class="comment">#/</span></div><div class="line"><span class="keyword">import</span> &#123; Router, Route, hashHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</div><div class="line"></div><div class="line">render((</div><div class="line">&lt;Router history=&#123;hashHistory&#125;&gt;</div><div class="line">&lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;/&gt;</div><div class="line">&lt;/Router&gt;</div><div class="line">), <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>));</div></pre></td></tr></table></figure>
<p>Route组件定义了URL路径与组件的对应关系。你可以同时使用多个Route组件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 用户访问/repos（比如http://localhost:8080/#/repos）时，加载Repos组件</div><div class="line">// 访问/about（http://localhost:8080/#/about）时，加载About组件</div><div class="line"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">history</span>=<span class="string">&#123;hashHistory&#125;</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=<span class="string">&#123;App&#125;/</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/repos"</span> <span class="attr">component</span>=<span class="string">&#123;Repos&#125;/</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/about"</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Router</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React 体系的一个重要部分：路由库React-Router,唯一可选的路由库&lt;/p&gt;
&lt;p&gt;通过管理 URL，实现组件的切换和状态的变化，开发复杂的应用几乎肯定会用到&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/react-router-tutorial/tree/master/lessons&quot;&gt;官网实例&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="React Router" scheme="http://yoursite.com/tags/React-Router/"/>
    
  </entry>
  
  <entry>
    <title>PHP基础</title>
    <link href="http://yoursite.com/2018/07/05/2018.7.5/"/>
    <id>http://yoursite.com/2018/07/05/2018.7.5/</id>
    <published>2018-07-05T15:16:41.000Z</published>
    <updated>2018-07-11T00:17:59.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP-学习准备"><a href="#PHP-学习准备" class="headerlink" title="PHP 学习准备"></a>PHP 学习准备</h1><h2 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h2><p>1.熟悉HTML/CSS/JS等网页基本元素，完成阶段可自行制作简单的网页，对元素属性相对熟悉</p>
<p>2.理解动态语言的概念和运做机制，熟悉基本的PHP语法<br><a id="more"></a><br>3.学习如何将PHP与HTML结合起来，完成简单的动态页面</p>
<p>4.接触学习MySQL，开始设计数据库</p>
<p>5.不断巩固PHP语法，熟悉大部分的PHP常用函数，理解面向对象编程，MySQL优化，以及一些模板和框架</p>
<p>6.最终完成一个功能齐全的动态站点</p>
<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><p>PHP服务器组件: WampServer,这也是目前window平台上使用最广泛的，操作也非常简单</p>
<p>PHP的IDE: Eclipse for PHP</p>
<p>MySql管理工具: Navicat for Mysql，Navicat for MySQL是一套专为MySQL设计的强大数据库管理及开发工具</p>
<p>文本编辑器: Notepad++</p>
<h2 id="在线编辑器"><a href="#在线编辑器" class="headerlink" title="在线编辑器"></a>在线编辑器</h2><p><a href="http://www.runoob.com/try/runcode.php?filename=demo_intro&amp;type=php" target="_blank" rel="external">PHP在线编辑器</a></p>
<h1 id="PHP-简介"><a href="#PHP-简介" class="headerlink" title="PHP 简介"></a>PHP 简介</h1><p>PHP（全称：PHP：Hypertext Preprocessor，即”PHP：超文本预处理器”）是一种通用开源脚本语言</p>
<p>PHP 脚本在服务器上执行</p>
<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>PHP 文件可包含文本、HTML、JavaScript代码和 PHP 代码</p>
<p>PHP 代码在服务器上执行，结果以纯 HTML 形式返回给浏览器</p>
<p>PHP 文件的默认文件扩展名是 “.php”</p>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>PHP 可以生成动态页面内容</p>
<p>PHP 可以创建、打开、读取、写入、关闭服务器上的文件</p>
<p>PHP 可以收集表单数据</p>
<p>PHP 可以发送和接收 cookies</p>
<p>PHP 可以添加、删除、修改您的数据库中的数据</p>
<p>PHP 可以限制用户访问您的网站上的一些页面</p>
<p>PHP 可以加密数据</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>PHP 可在不同的平台上运行（Windows、Linux、Unix、Mac OS X 等）</p>
<p>PHP 与目前几乎所有的正在被使用的服务器相兼容（Apache、IIS 等）</p>
<p>PHP 提供了广泛的数据库支持</p>
<p>PHP 是免费的</p>
<p>PHP 易于学习</p>
<h1 id="PHP-语法"><a href="#PHP-语法" class="headerlink" title="PHP 语法"></a>PHP 语法</h1><p>PHP 脚本在服务器上执行，然后将纯 HTML 结果发送回浏览器</p>
<h2 id="基本的PHP语法"><a href="#基本的PHP语法" class="headerlink" title="基本的PHP语法"></a>基本的PHP语法</h2><p>PHP 脚本以 &lt;?php 开始，以 ?&gt; 结束</p>
<p>PHP 文件的默认文件扩展名是 “.php”</p>
<p>PHP 文件通常包含 HTML 标签和一些 PHP 脚本代码</p>
<p>PHP 中的每个代码行都必须以分号结束</p>
<p>输出文本的基础指令：echo 和 print</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>My first PHP page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">echo</span> <span class="string">"Hello World!"</span>; <span class="comment">// hello World!</span></div><div class="line"><span class="meta">?&gt;</span>  </div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="comment">// 这是单行注释</span></div><div class="line"></div><div class="line"><span class="comment"># 这也是单行注释</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">这是多行注释</div><div class="line">多行注释</div><div class="line">多行注释</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">"Hello World!"</span>; <span class="comment">// hello World!</span></div><div class="line"><span class="meta">?&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-变量"><a href="#PHP-变量" class="headerlink" title="PHP 变量"></a>PHP 变量</h1><p>变量以$符号开始，后面跟着变量的名称</p>
<p>变量名必须以字母或者下划线字符开始</p>
<p>变量名只能包含字母数字字符以及下划线</p>
<p>变量名不能包含空格</p>
<p>变量名是区分大小写的</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$x=<span class="number">5</span>; </div><div class="line">$y=<span class="number">6</span>; </div><div class="line">$z=$x+$y; </div><div class="line"><span class="keyword">echo</span> $z; <span class="comment">// 11</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="声明PHP变量"><a href="#声明PHP变量" class="headerlink" title="声明PHP变量"></a>声明PHP变量</h2><p>PHP没有声明变量的命令</p>
<p>变量在您第一次赋值给它的时候被创建</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$txt=<span class="string">"Hello world!"</span>; </div><div class="line">$x=<span class="number">5</span>; </div><div class="line">$y=<span class="number">10.5</span>; </div><div class="line"><span class="keyword">echo</span> $txt; <span class="comment">// Hello world!</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="弱类型语言"><a href="#弱类型语言" class="headerlink" title="弱类型语言"></a>弱类型语言</h2><p>PHP会根据变量的值，自动把变量转换为正确的数据类型</p>
<p>在强类型的编程语言中，我们必须在使用变量前先声明变量的类型和名称</p>
<h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>PHP有四种不同的变量作用域</p>
<ul>
<li>global</li>
<li>local</li>
<li>static</li>
<li>parameter</li>
</ul>
<h2 id="global全局作用域"><a href="#global全局作用域" class="headerlink" title="global全局作用域"></a>global全局作用域</h2><p>global关键字用于函数内访问全局变量</p>
<p>在函数内调用函数外定义的全局变量，我们需要在函数中的变量前加上global关键字</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$x=<span class="number">5</span>; </div><div class="line">$y=<span class="number">10</span>; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span> </span></div><div class="line">&#123; </div><div class="line">    <span class="keyword">global</span> $x,$y; </div><div class="line">    $y=$x+$y; </div><div class="line">&#125; </div><div class="line"></div><div class="line">myTest(); </div><div class="line"><span class="keyword">echo</span> $y; <span class="comment">// 15 </span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>PHP将所有全局变量存储在一个名为$GLOBALS[index]的数组中.index 保存变量的名称。这个数组可以在函数内部访问，也可以直接用来更新全局变量</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$x=<span class="number">5</span>; </div><div class="line">$y=<span class="number">10</span>; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span> </span></div><div class="line">&#123; </div><div class="line">    $GLOBALS[<span class="string">'y'</span>]=$GLOBALS[<span class="string">'x'</span>]+$GLOBALS[<span class="string">'y'</span>]; </div><div class="line">&#125;  </div><div class="line"></div><div class="line">myTest(); </div><div class="line"><span class="keyword">echo</span> $y;  <span class="comment">// 15</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="local局部作用域"><a href="#local局部作用域" class="headerlink" title="local局部作用域"></a>local局部作用域</h2><p>在PHP函数内部声明的变量是局部变量，仅能在函数内部访问</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$x=<span class="number">5</span>; <span class="comment">// 全局变量 </span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span> </span></div><div class="line">&#123; </div><div class="line">    $y=<span class="number">10</span>; <span class="comment">// 局部变量 </span></div><div class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt;测试函数内变量:&lt;p&gt;"</span>; </div><div class="line">    <span class="keyword">echo</span> <span class="string">"变量 x 为: $x"</span>; </div><div class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>; </div><div class="line">    <span class="keyword">echo</span> <span class="string">"变量 y 为: $y"</span>; </div><div class="line">&#125;  </div><div class="line"></div><div class="line">myTest(); <span class="comment">// x:  y:10</span></div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;p&gt;测试函数外变量:&lt;p&gt;"</span>; </div><div class="line"><span class="keyword">echo</span> <span class="string">"变量 x 为: $x"</span>; </div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>; </div><div class="line"><span class="keyword">echo</span> <span class="string">"变量 y 为: $y"</span>; <span class="comment">// x:5 y:</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Static静态作用域"><a href="#Static静态作用域" class="headerlink" title="Static静态作用域"></a>Static静态作用域</h2><p>函数完成时，它的所有变量会被删除,要做到这一点，在第一次声明变量时,使用 static 关键字,即局部变量不会被删除</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span> </span></div><div class="line">&#123; </div><div class="line">    <span class="keyword">static</span> $x=<span class="number">0</span>; </div><div class="line">    <span class="keyword">echo</span> $x; </div><div class="line">    $x++; </div><div class="line">&#125; </div><div class="line"></div><div class="line">myTest(); </div><div class="line">myTest(); </div><div class="line">myTest(); </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="parameter参数作用域"><a href="#parameter参数作用域" class="headerlink" title="parameter参数作用域"></a>parameter参数作用域</h2><p>参数是通过调用代码将值传递给函数的局部变量</p>
<p>参数是在参数列表中声明的，作为函数声明的一部分</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">($x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> $x;</div><div class="line">&#125;</div><div class="line">myTest(<span class="number">5</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHPecho-print语句"><a href="#PHPecho-print语句" class="headerlink" title="PHPecho/print语句"></a>PHPecho/print语句</h1><ul>
<li>echo可以输出一个或多个字符串</li>
<li>print只允许输出一个字符串，返回值总为1</li>
</ul>
<h2 id="echo语句"><a href="#echo语句" class="headerlink" title="echo语句"></a>echo语句</h2><p>echo 命令输出字符串（字符串可以包含 HTML 标签）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2&gt;PHP 很有趣!&lt;/h2&gt;"</span>; <span class="comment">// PHP 很有趣!</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"Hello world!&lt;br&gt;"</span>; <span class="comment">// Hello world!</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"我要学 PHP!&lt;br&gt;"</span>; <span class="comment">// 我要学 PHP!</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"这是一个"</span>, <span class="string">"字符串，"</span>, <span class="string">"使用了"</span>, <span class="string">"多个"</span>, <span class="string">"参数。"</span>; <span class="comment">// 这是一个字符串，使用了多个参数。</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>echo 命令输出变量和字符串</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$txt1=<span class="string">"学习 PHP"</span>;</div><div class="line">$txt2=<span class="string">"RUNOOB.COM"</span>;</div><div class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $txt1; <span class="comment">// 学习PHP</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"在 $txt2 学习 PHP "</span>; <span class="comment">// 在 RUNOOB.COM 学习 PHP </span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"我车的品牌是 &#123;$cars[0]&#125;"</span>; <span class="comment">// 我车的品牌是 Volvo</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="pring语句"><a href="#pring语句" class="headerlink" title="pring语句"></a>pring语句</h2><p>print 命令输出字符串（字符串可以包含 HTML 标签）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">print</span> <span class="string">"&lt;h2&gt;PHP 很有趣!&lt;/h2&gt;"</span>; <span class="comment">// PHP 很有趣!</span></div><div class="line"><span class="keyword">print</span> <span class="string">"Hello world!&lt;br&gt;"</span>; <span class="comment">// Hello world!</span></div><div class="line"><span class="keyword">print</span> <span class="string">"我要学习 PHP!"</span>; <span class="comment">// 我要学习 PHP!</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>print 命令输出变量和字符串</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$txt1=<span class="string">"学习 PHP"</span>;</div><div class="line">$txt2=<span class="string">"RUNOOB.COM"</span>;</div><div class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</div><div class="line"></div><div class="line"><span class="keyword">print</span> $txt1; <span class="comment">// 学习 PHP</span></div><div class="line"><span class="keyword">print</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"在 $txt2 学习 PHP "</span>;<span class="comment">// 在 RUNOOB.COM 学习 PHP</span></div><div class="line"><span class="keyword">print</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"我车的品牌是 &#123;$cars[0]&#125;"</span>; <span class="comment">// 我车的品牌是 Volvo</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-EOF-heredoc"><a href="#PHP-EOF-heredoc" class="headerlink" title="PHP EOF(heredoc)"></a>PHP EOF(heredoc)</h1><p>PHP EOF(heredoc)是一种在命令行shell（如sh、csh、ksh、bash、PowerShell和zsh）和程序语言（像Perl、PHP、Python和Ruby）里定义一个字串的方法</p>
<p>注意</p>
<ol>
<li><p>必须后接分号，否则编译通不过</p>
</li>
<li><p>EOF可以用任意其它字符代替，只需保证结束标识与开始标识一致</p>
</li>
<li><p>结束标识必须顶格独自占一行(即必须从行首开始，前后不能衔接任何空白和字符)</p>
</li>
<li><p>开始标识可以不带引号或带单双引号，不带引号与带双引号效果一致，解释内嵌的变量和转义符号，带单引号则不解释内嵌的变量和转义符号</p>
</li>
<li><p>当内容需要内嵌引号（单引号或双引号）时，不需要加转义符，本身对单双引号转义，此处相当与q和qq的用法</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">echo</span> <span class="string">&lt;&lt;&lt;EOF</span></div><div class="line">    &lt;h1&gt;我的第一个标题&lt;/h1&gt;</div><div class="line">    &lt;p&gt;我的第一个段落。&lt;/p&gt;</div><div class="line">EOF;</div><div class="line"><span class="comment">// 结束需要独立一行且前后不能空格</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>在 heredoc 中，变量不需要用连接符 . 或 , 来拼接</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$name=<span class="string">"runoob"</span>;</div><div class="line">$a= <span class="string">&lt;&lt;&lt;EOF</span></div><div class="line">    "abc"<span class="subst">$name</span></div><div class="line">    "123"</div><div class="line">EOF;</div><div class="line"><span class="comment">// 结束需要独立一行且前后不能空格</span></div><div class="line"><span class="keyword">echo</span> $a;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-数据类型"><a href="#PHP-数据类型" class="headerlink" title="PHP 数据类型"></a>PHP 数据类型</h1><ul>
<li>String（字符串）</li>
<li>Integer（整型）</li>
<li>Float（浮点型）</li>
<li>Boolean（布尔型）</li>
<li>Array（数组）</li>
<li>Object（对象）</li>
<li>NULL（空值）</li>
</ul>
<h2 id="PHP字符串"><a href="#PHP字符串" class="headerlink" title="PHP字符串"></a>PHP字符串</h2><p>一个字符串是一串字符的序列，就像 “Hello world!”</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$x = <span class="string">"Hello world!"</span>; </div><div class="line"><span class="keyword">echo</span> $x;<span class="comment">//Hello world!</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>; </div><div class="line">$x = <span class="string">'Hello world!'</span>;<span class="comment">//Hello world!</span></div><div class="line"><span class="keyword">echo</span> $x;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP整型"><a href="#PHP整型" class="headerlink" title="PHP整型"></a>PHP整型</h2><p>整型是一个没有小数的数字</p>
<p>var_dump() 函数返回变量的数据类型和值</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$x = <span class="number">5985</span>;</div><div class="line">var_dump($x);<span class="comment">//int(5985)</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>; </div><div class="line">$x = <span class="number">-345</span>; <span class="comment">// 负数</span></div><div class="line">var_dump($x);<span class="comment">//int(-345)</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>; </div><div class="line">$x = <span class="number">0x8C</span>; <span class="comment">// 十六进制数</span></div><div class="line">var_dump($x);<span class="comment">//int(140)</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line">$x = <span class="number">047</span>; <span class="comment">// 八进制数</span></div><div class="line">var_dump($x);<span class="comment">//int(39)</span></div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP浮点型"><a href="#PHP浮点型" class="headerlink" title="PHP浮点型"></a>PHP浮点型</h2><p>浮点数是带小数部分的数字，或是指数形式</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$x = <span class="number">10.365</span>;</div><div class="line">var_dump($x);<span class="comment">//float(10.365) </span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>; </div><div class="line">$x = <span class="number">2.4e3</span>;</div><div class="line">var_dump($x);<span class="comment">//float(2400)</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>; </div><div class="line">$x = <span class="number">8E-5</span>;</div><div class="line">var_dump($x);<span class="comment">//float(2400) </span></div><div class="line"><span class="meta">?&gt;</span>   </div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP布尔型"><a href="#PHP布尔型" class="headerlink" title="PHP布尔型"></a>PHP布尔型</h2><p>布尔型可以是 TRUE 或 FALSE</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$x=<span class="literal">true</span><span class="comment">;</span></div><div class="line">$y=<span class="literal">false</span><span class="comment">;</span></div></pre></td></tr></table></figure>
<h2 id="PHP数组"><a href="#PHP数组" class="headerlink" title="PHP数组"></a>PHP数组</h2><p>数组可以在一个变量中存储多个值</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</div><div class="line">var_dump($cars); <span class="comment">// array(3) </span><span class="template-variable">&#123; [0]=&gt; string(5) "Volvo" [1]=&gt; string(3) "BMW" [2]=&gt; string(6) "Toyota" &#125;</span><span class="xml"><span class="php"></span></span></div><div class="line"><span class="meta">?&gt;</span>   </div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP对象"><a href="#PHP对象" class="headerlink" title="PHP对象"></a>PHP对象</h2><p>对象数据类型也可以用于存储数据,在 PHP 中，对象必须声明</p>
<p>首先，你必须使用class关键字声明类对象。类是可以包含属性和方法的结构</p>
<p>然后我们在类中定义数据类型，然后在实例化的类中使用数据类型</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">//PHP关键字this就是指向当前对象实例的指针，不指向任何其他对象或类</div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> $color;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($color=<span class="string">"green"</span>)</span> </span>&#123;</div><div class="line">      <span class="keyword">$this</span>-&gt;color = $color;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">what_color</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;color;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">print_vars</span><span class="params">($obj)</span> </span>&#123;</div><div class="line">   <span class="keyword">foreach</span> (get_object_vars($obj) <span class="keyword">as</span> $prop =&gt; $val) &#123;</div><div class="line">     <span class="keyword">echo</span> <span class="string">"\t$prop = $val\n"</span>; </div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 实例一个对象</span></div><div class="line">$herbie = <span class="keyword">new</span> Car(<span class="string">"white"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 显示 herbie 属性</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"\therbie: Properties\n"</span>;</div><div class="line">print_vars($herbie);<span class="comment">//herbie: Properties color = white</span></div><div class="line"></div><div class="line"><span class="meta">?&gt;</span>  </div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHPNULL值"><a href="#PHPNULL值" class="headerlink" title="PHPNULL值"></a>PHPNULL值</h2><p>NULL值表示变量没有值,NULL是数据类型为NULL的值</p>
<p>NULL 值指明一个变量是否为空值。 同样可用于数据空值和NULL值的区别。</p>
<p>可以通过设置变量值为 NULL 来清空变量数据</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$x=<span class="string">"Hello world!"</span>;</div><div class="line">$x=<span class="keyword">null</span>;</div><div class="line">var_dump($x);<span class="comment">//NULL</span></div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP常量"><a href="#PHP常量" class="headerlink" title="PHP常量"></a>PHP常量</h1><p>常量值被定义后，在脚本的其他任何地方都不能被改变</p>
<h2 id="PHP常量-1"><a href="#PHP常量-1" class="headerlink" title="PHP常量"></a>PHP常量</h2><p>常量是一个简单值的标识符。该值在脚本中不能改变</p>
<p>一个常量由英文字母、下划线、和数字组成,但数字不能作为首字母出现。 (常量名不需要加 $ 修饰符)</p>
<p>常量在整个脚本中都可以使用</p>
<h2 id="设置PHP常量"><a href="#设置PHP常量" class="headerlink" title="设置PHP常量"></a>设置PHP常量</h2><p>设置常量，使用 define() 函数,该函数有三个参数:</p>
<ul>
<li>name：必选参数，常量名称，即标志符。</li>
<li>value：必选参数，常量的值。</li>
<li>case_insensitive ：可选参数，如果设置为 TRUE，该常量则大小写不敏感。默认是大小写敏感的</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="comment">// 区分大小写的常量名</span></div><div class="line">define(<span class="string">"GREETING"</span>, <span class="string">"欢迎访问 Runoob.com"</span>);</div><div class="line"><span class="keyword">echo</span> GREETING;    <span class="comment">// 输出 "欢迎访问 Runoob.com"</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</div><div class="line"><span class="keyword">echo</span> greeting;   <span class="comment">// 输出 "greeting"</span></div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="comment">// 不区分大小写的常量名</span></div><div class="line">define(<span class="string">"GREETING"</span>, <span class="string">"欢迎访问 Runoob.com"</span>, <span class="keyword">true</span>);</div><div class="line"><span class="keyword">echo</span> greeting;  <span class="comment">// 输出 "欢迎访问 Runoob.com"</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="常量是全局的"><a href="#常量是全局的" class="headerlink" title="常量是全局的"></a>常量是全局的</h2><p>常量在定义后，默认是全局变量，可以在整个运行的脚本的任何地方使用</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//函数内使用常量，即便常量定义在函数外也可以正常使用常量</div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">define(<span class="string">"GREETING"</span>, <span class="string">"欢迎访问 Runoob.com"</span>);</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">echo</span> GREETING;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">myTest();    <span class="comment">// 输出 "欢迎访问 Runoob.com"</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP字符串-1"><a href="#PHP字符串-1" class="headerlink" title="PHP字符串"></a>PHP字符串</h1><p>字符串变量用于存储并处理文本</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$txt=<span class="string">"Hello world!"</span>; </div><div class="line"><span class="keyword">echo</span> $txt; <span class="comment">// "Hello world!</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP并置运算符"><a href="#PHP并置运算符" class="headerlink" title="PHP并置运算符"></a>PHP并置运算符</h2><p>在 PHP 中，只有一个字符串运算符,并置运算符 (.) 用于把两个字符串值连接起来</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$txt1=<span class="string">"Hello world!"</span>; </div><div class="line">$txt2=<span class="string">"What a nice day!"</span>; </div><div class="line"><span class="keyword">echo</span> $txt1 . <span class="string">" "</span> . $txt2; <span class="comment">// Hello world! What a nice day!</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHPstrlen-函数"><a href="#PHPstrlen-函数" class="headerlink" title="PHPstrlen()函数"></a>PHPstrlen()函数</h2><p>strlen()函数返回字符串的长度</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line"><span class="keyword">echo</span> strlen(<span class="string">"Hello world!"</span>);  <span class="comment">// 12</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHPstrpos-函数"><a href="#PHPstrpos-函数" class="headerlink" title="PHPstrpos()函数"></a>PHPstrpos()函数</h2><p>strpos() 函数用于在字符串内查找一个字符或一段指定的文本</p>
<p>如果在字符串中找到匹配，该函数会返回第一个匹配的字符位置。如果未找到匹配，则返回 FALSE</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line"><span class="keyword">echo</span> strpos(<span class="string">"Hello world!"</span>,<span class="string">"world"</span>); <span class="comment">//6</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP运算符"><a href="#PHP运算符" class="headerlink" title="PHP运算符"></a>PHP运算符</h1><h2 id="PHP算术运算符"><a href="#PHP算术运算符" class="headerlink" title="PHP算术运算符"></a>PHP算术运算符</h2><ul>
<li>x + y,x 和 y 的和</li>
<li>x - y,x 和 y 的差</li>
<li>x * y,x 和 y 的积</li>
<li>x / y,x 和 y 的商</li>
<li>x % y,x 除以 y 的余数</li>
<li>(-x),x 取反</li>
<li>a . b,连接两个字符串</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$x=<span class="number">10</span>; </div><div class="line">$y=<span class="number">6</span>;</div><div class="line"><span class="keyword">echo</span> ($x + $y); <span class="comment">// 输出16</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;  <span class="comment">// 换行</span></div><div class="line"></div><div class="line"><span class="keyword">echo</span> ($x - $y); <span class="comment">// 输出4</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;  <span class="comment">// 换行</span></div><div class="line"></div><div class="line"><span class="keyword">echo</span> ($x * $y); <span class="comment">// 输出60</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;  <span class="comment">// 换行</span></div><div class="line"></div><div class="line"><span class="keyword">echo</span> ($x / $y); <span class="comment">// 输出1.6666666666667</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;  <span class="comment">// 换行</span></div><div class="line"></div><div class="line"><span class="keyword">echo</span> ($x % $y); <span class="comment">// 输出4</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;  <span class="comment">// 换行</span></div><div class="line"></div><div class="line"><span class="keyword">echo</span> -$x;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP赋值运算符"><a href="#PHP赋值运算符" class="headerlink" title="PHP赋值运算符"></a>PHP赋值运算符</h2><ul>
<li>x = y,左操作数被设置为右侧表达式的值</li>
<li>x += y,等同于x = x + y</li>
<li>x -= y,等同于x = x - y</li>
<li>x <em>= y,等同于x = x </em> y</li>
<li>x /= y,等同于x = x / y</li>
<li>x %= y,等同于x = x % y</li>
<li>x .= y,等同于x = x . y</li>
</ul>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line"><span class="meta"><span class="meta-keyword">$x</span>=10; </span></div><div class="line">echo <span class="symbol">$</span>x; <span class="comment">// 输出10</span></div><div class="line"> </div><div class="line"><span class="meta"><span class="meta-keyword">$y</span>=20; </span></div><div class="line"><span class="meta"><span class="meta-keyword">$y</span> += 100;</span></div><div class="line">echo <span class="symbol">$</span>y; <span class="comment">// 输出120</span></div><div class="line"> </div><div class="line"><span class="meta"><span class="meta-keyword">$z</span>=50;</span></div><div class="line"><span class="meta"><span class="meta-keyword">$z</span> -= 25;</span></div><div class="line">echo <span class="symbol">$</span>z; <span class="comment">// 输出25</span></div><div class="line"> </div><div class="line"><span class="meta"><span class="meta-keyword">$i</span>=5;</span></div><div class="line"><span class="meta"><span class="meta-keyword">$i</span> *= 6;</span></div><div class="line">echo <span class="symbol">$</span>i; <span class="comment">// 输出30</span></div><div class="line"> </div><div class="line"><span class="meta"><span class="meta-keyword">$j</span>=10;</span></div><div class="line"><span class="meta"><span class="meta-keyword">$j</span> /= 5;</span></div><div class="line">echo <span class="symbol">$</span>j; <span class="comment">// 输出2</span></div><div class="line"> </div><div class="line"><span class="meta"><span class="meta-keyword">$k</span>=15;</span></div><div class="line"><span class="meta"><span class="meta-keyword">$k</span> %= 4;</span></div><div class="line">echo <span class="symbol">$</span>k; <span class="comment">// 输出3</span></div><div class="line">?&gt;</div><div class="line"></div><div class="line"><span class="meta"><span class="meta-keyword">$a</span> = "Hello";</span></div><div class="line"><span class="meta"><span class="meta-keyword">$b</span> = $a . " world!";</span></div><div class="line">echo <span class="symbol">$</span>b; <span class="comment">// 输出Hello world! </span></div><div class="line"> </div><div class="line"><span class="meta"><span class="meta-keyword">$x</span>="Hello";</span></div><div class="line"><span class="meta"><span class="meta-keyword">$x</span> .= " world!";</span></div><div class="line">echo <span class="symbol">$</span>x; <span class="comment">// 输出Hello world!</span></div></pre></td></tr></table></figure>
<h2 id="PHP递增-递减运算符"><a href="#PHP递增-递减运算符" class="headerlink" title="PHP递增/递减运算符"></a>PHP递增/递减运算符</h2><ul>
<li>++ x,x 加 1，然后返回 x</li>
<li>x ++,返回 x，然后 x 加 1</li>
<li>(– x),x 减 1，然后返回 x</li>
<li>x –,返回 x，然后 x 减 1</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$x=<span class="number">10</span>; </div><div class="line"><span class="keyword">echo</span> ++$x; <span class="comment">// 输出11</span></div><div class="line"> </div><div class="line">$y=<span class="number">10</span>; </div><div class="line"><span class="keyword">echo</span> $y++; <span class="comment">// 输出10</span></div><div class="line"> </div><div class="line">$z=<span class="number">5</span>;</div><div class="line"><span class="keyword">echo</span> --$z; <span class="comment">// 输出4</span></div><div class="line"> </div><div class="line">$i=<span class="number">5</span>;</div><div class="line"><span class="keyword">echo</span> $i--; <span class="comment">// 输出5</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP-比较运算符"><a href="#PHP-比较运算符" class="headerlink" title="PHP 比较运算符"></a>PHP 比较运算符</h2><ul>
<li>x == y,如果 x 等于 y，则返回 true</li>
<li>x === y,如果 x 等于 y，且它们类型相同，则返回 true    </li>
<li>x != y,如果 x 不等于 y，则返回 true</li>
<li>x &lt;&gt; y,如果 x 不等于 y，则返回 true</li>
<li>x !== y,如果 x 不等于 y，或它们类型不相同，则返回 true</li>
<li>x &gt; y    ,如果 x 大于 y，则返回 true</li>
<li>x &lt; y,如果 x 小于 y，则返回 true</li>
<li>x &gt;= y,如果 x 大于或者等于 y，则返回 true</li>
<li>x &lt;= y,如果 x 小于或者等于 y，则返回 true</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$x=<span class="number">100</span>; </div><div class="line">$y=<span class="string">"100"</span>;</div><div class="line">var_dump($x == $y); <span class="regexp">//bool</span>(<span class="literal">true</span>)</div><div class="line">var_dump($x === $y); <span class="regexp">//bool</span>(<span class="literal">false</span>)</div><div class="line">var_dump($x != $y); <span class="regexp">//bool</span>(<span class="literal">false</span>) </div><div class="line">var_dump($x !== $y); <span class="regexp">//bool</span>(<span class="literal">true</span>)</div><div class="line"></div><div class="line">$a=<span class="number">50</span>;</div><div class="line">$b=<span class="number">90</span>;</div><div class="line">var_dump($a &gt; $b); <span class="regexp">//bool</span>(<span class="literal">false</span>) </div><div class="line">echo <span class="string">"&lt;br&gt;"</span>;</div><div class="line">var_dump($a &lt; $b); <span class="regexp">//bool</span>(<span class="literal">true</span>)</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP逻辑运算符"><a href="#PHP逻辑运算符" class="headerlink" title="PHP逻辑运算符"></a>PHP逻辑运算符</h2><ul>
<li>x and y,如果 x 和 y 都为 true，则返回 true</li>
<li>x or y,如果 x 和 y 至少有一个为 true，则返回 true</li>
<li>x xor y,如果 x 和 y 有且仅有一个为 true，则返回 true</li>
<li>x &amp;&amp; y,如果 x 和 y 都为 true，则返回 true</li>
<li>x || y,如果 x 和 y 至少有一个为 true，则返回 true</li>
<li>! x,如果 x 不为 true，则返回 true</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$x=<span class="number">6</span>; </div><div class="line">$y=<span class="number">3</span>;</div><div class="line">var_dump($x &lt; <span class="number">10</span> <span class="keyword">and</span> $y &gt; <span class="number">1</span>); <span class="regexp">//bool</span>(<span class="literal">true</span>)</div><div class="line">var_dump($x==<span class="number">6</span> <span class="keyword">or</span> $y==<span class="number">5</span>); <span class="regexp">//bool</span>(<span class="literal">true</span>)</div><div class="line">var_dump($x==<span class="number">6</span> xor $y==<span class="number">3</span>); <span class="regexp">//bool</span>(<span class="literal">false</span>)</div><div class="line">var_dump($x &lt; <span class="number">10</span> &amp;&amp; $y &gt; <span class="number">1</span>); <span class="regexp">//bool</span>(<span class="literal">true</span>)</div><div class="line">var_dump($x==<span class="number">5</span> <span class="params">||</span> $y==<span class="number">5</span>); <span class="regexp">//bool</span>(<span class="literal">false</span>)</div><div class="line">var_dump(!($x==$y)); <span class="regexp">//bool</span>(<span class="literal">true</span>)</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP数组运算符"><a href="#PHP数组运算符" class="headerlink" title="PHP数组运算符"></a>PHP数组运算符</h2><ul>
<li>x + y,x 和 y 的集合</li>
<li>x == y,如果 x 和 y 具有相同的键/值对，则返回 true</li>
<li>x === y,如果 x 和 y 具有相同的键/值对，且顺序相同类型相同，则返回 true</li>
<li>x != y,如果 x 不等于 y，则返回 true</li>
<li>x &lt;&gt; y,如果 x 不等于 y，则返回 true</li>
<li>x !== y,如果 x 不等于 y，则返回 true</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$x = <span class="keyword">array</span>(<span class="string">"a"</span> =&gt; <span class="string">"red"</span>, <span class="string">"b"</span> =&gt; <span class="string">"green"</span>); </div><div class="line">$y = <span class="keyword">array</span>(<span class="string">"c"</span> =&gt; <span class="string">"blue"</span>, <span class="string">"d"</span> =&gt; <span class="string">"yellow"</span>); </div><div class="line">$z = $x + $y; </div><div class="line">var_dump($z); <span class="comment">// array(4) &#123; ["a"]=&gt; string(3) "red" ["b"]=&gt; string(5) "green" ["c"]=&gt; string(4) "blue" ["d"]=&gt; string(6) "yellow" &#125; </span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line">var_dump($x == $y);<span class="comment">// bool(false)</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line">var_dump($x === $y);<span class="comment">// bool(false)</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line">var_dump($x != $y);<span class="comment">// bool(true) </span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line">var_dump($x &lt;&gt; $y);<span class="comment">// bool(true) </span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line">var_dump($x !== $y);<span class="comment">// bool(true) </span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p>通过判断 $_GET 请求中含有 user 值，如果有返回 $_GET[‘user’]，否则返回 nobody</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$test = <span class="string">'菜鸟教程'</span>;</div><div class="line"><span class="comment">// 普通写法</span></div><div class="line">$username = <span class="keyword">isset</span>($test) ? $test : <span class="string">'nobody'</span>;</div><div class="line"><span class="keyword">echo</span> $username, PHP_EOL;</div><div class="line"> </div><div class="line"><span class="comment">// PHP 5.3+ 版本写法</span></div><div class="line">$username = $test ?: <span class="string">'nobody'</span>;</div><div class="line"><span class="keyword">echo</span> $username, PHP_EOL;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>在 PHP7+ 版本多了一个 NULL 合并运算符 ??</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"><span class="regexp">//</span> 如果 <span class="variable">$_GET</span>[<span class="string">'user'</span>] 不存在返回 <span class="string">'nobody'</span>，否则返回 <span class="variable">$_GET</span>[<span class="string">'user'</span>] 的值</div><div class="line"><span class="variable">$username</span> = <span class="variable">$_GET</span>[<span class="string">'user'</span>] ?? <span class="string">'nobody'</span>;</div><div class="line"><span class="regexp">//</span> 类似的三元运算符</div><div class="line"><span class="variable">$username</span> = isset(<span class="variable">$_GET</span>[<span class="string">'user'</span>]) ? <span class="variable">$_GET</span>[<span class="string">'user'</span>] : <span class="string">'nobody'</span>;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h2 id="组合比较符-PHP7"><a href="#组合比较符-PHP7" class="headerlink" title="组合比较符(PHP7+)"></a>组合比较符(PHP7+)</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="comment">// 整型</span></div><div class="line"><span class="keyword">echo</span> <span class="number">1</span> &lt;=&gt; <span class="number">1</span>; <span class="comment">// 0</span></div><div class="line"><span class="keyword">echo</span> <span class="number">1</span> &lt;=&gt; <span class="number">2</span>; <span class="comment">// -1</span></div><div class="line"><span class="keyword">echo</span> <span class="number">2</span> &lt;=&gt; <span class="number">1</span>; <span class="comment">// 1</span></div><div class="line"> </div><div class="line"><span class="comment">// 浮点型</span></div><div class="line"><span class="keyword">echo</span> <span class="number">1.5</span> &lt;=&gt; <span class="number">1.5</span>; <span class="comment">// 0</span></div><div class="line"><span class="keyword">echo</span> <span class="number">1.5</span> &lt;=&gt; <span class="number">2.5</span>; <span class="comment">// -1</span></div><div class="line"><span class="keyword">echo</span> <span class="number">2.5</span> &lt;=&gt; <span class="number">1.5</span>; <span class="comment">// 1</span></div><div class="line"> </div><div class="line"><span class="comment">// 字符串</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"a"</span> &lt;=&gt; <span class="string">"a"</span>; <span class="comment">// 0</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"a"</span> &lt;=&gt; <span class="string">"b"</span>; <span class="comment">// -1</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"b"</span> &lt;=&gt; <span class="string">"a"</span>; <span class="comment">// 1</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p>运算符优先级中，or 和 ||，&amp;&amp; 和 and 都是逻辑运算符，效果一样，但是其优先级却不一样</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="comment">// 优先级： &amp;&amp;  &gt;  =  &gt;  and</span></div><div class="line"><span class="comment">// 优先级： ||  &gt;  =  &gt;  or</span></div><div class="line"> </div><div class="line">$a = <span class="number">3</span>;</div><div class="line">$b = <span class="keyword">false</span>;</div><div class="line">$c = $a <span class="keyword">or</span> $b;</div><div class="line">var_dump($c);          <span class="comment">// 这里的 $c 为 int 值3，而不是 boolean 值 true</span></div><div class="line">$d = $a || $b;</div><div class="line">var_dump($d);          <span class="comment">//这里的 $d 就是 boolean 值 true </span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="括号的使用"><a href="#括号的使用" class="headerlink" title="括号的使用"></a>括号的使用</h2><p>括号的配对来明确标明运算顺序,通常能够增加代码的可读性</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="comment">// 括号优先运算</span></div><div class="line"> </div><div class="line">$a = <span class="number">1</span>;</div><div class="line">$b = <span class="number">2</span>;</div><div class="line">$c = <span class="number">3</span>;</div><div class="line">$d = $a + $b * $c;</div><div class="line"><span class="keyword">echo</span> $d; <span class="comment">//7</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</div><div class="line">$e = ($a + $b) * $c;  <span class="comment">// 使用括号</span></div><div class="line"><span class="keyword">echo</span> $e; <span class="comment">//9</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-if…Else-语句"><a href="#PHP-if…Else-语句" class="headerlink" title="PHP if…Else 语句"></a>PHP if…Else 语句</h1><ul>
<li>if 语句 - 在条件成立时执行代码</li>
<li>if…else 语句 - 在条件成立时执行一块代码，条件不成立时执行另一块代码</li>
<li>if…elseif….else 语句 - 在若干条件之一成立时执行一个代码块</li>
</ul>
<h2 id="PHP-if-语句"><a href="#PHP-if-语句" class="headerlink" title="PHP - if 语句"></a>PHP - if 语句</h2><p>if 语句用于仅当指定条件成立时执行代码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如果当前时间小于 20，输出 "Have a good day!"</span></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$t=date(<span class="string">"H"</span>);</div><div class="line"><span class="keyword">if</span> ($t&lt;<span class="string">"20"</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Have a good day!"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP-if…else-语句"><a href="#PHP-if…else-语句" class="headerlink" title="PHP - if…else 语句"></a>PHP - if…else 语句</h2><p>在条件成立时执行一块代码，条件不成立时执行另一块代码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如果当前时间小于 20，输出 "Have a good day!"，否则输出 "Have a good night!"</span></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$t=date(<span class="string">"H"</span>);</div><div class="line"><span class="keyword">if</span> ($t&lt;<span class="string">"20"</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Have a good day!"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Have a good night!"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP-if…elseif…-else-语句"><a href="#PHP-if…elseif…-else-语句" class="headerlink" title="PHP - if…elseif….else 语句"></a>PHP - if…elseif….else 语句</h2><p>在若干条件之一成立时执行一个代码块，请使用 if….elseif…else 语句</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如果当前时间小于 10，输出 "Have a good morning!"，如果当前时间不小于 10 且小于 20，则输出 "Have a good day!"，否则输出 "Have a good night!"</span></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$t=date(<span class="string">"H"</span>);</div><div class="line"><span class="keyword">if</span> ($t&lt;<span class="string">"10"</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Have a good morning!"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">elseif</span> ($t&lt;<span class="string">"20"</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Have a good day!"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Have a good night!"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-Switch-语句"><a href="#PHP-Switch-语句" class="headerlink" title="PHP Switch 语句"></a>PHP Switch 语句</h1><p>switch 语句用于根据多个不同条件执行不同动作</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$favcolor=<span class="string">"red"</span>;</div><div class="line"><span class="keyword">switch</span> ($favcolor)</div><div class="line">&#123;</div><div class="line"><span class="keyword">case</span> <span class="string">"red"</span>:</div><div class="line">    <span class="keyword">echo</span> <span class="string">"你喜欢的颜色是红色!"</span>;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> <span class="string">"blue"</span>:</div><div class="line">    <span class="keyword">echo</span> <span class="string">"你喜欢的颜色是蓝色!"</span>;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> <span class="string">"green"</span>:</div><div class="line">    <span class="keyword">echo</span> <span class="string">"你喜欢的颜色是绿色!"</span>;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line"><span class="keyword">default</span>:</div><div class="line">    <span class="keyword">echo</span> <span class="string">"你喜欢的颜色不是 红, 蓝, 或绿色!"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-数组"><a href="#PHP-数组" class="headerlink" title="PHP 数组"></a>PHP 数组</h1><p>数组能够在单个变量中存储多个值</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</div><div class="line"><span class="keyword">echo</span> <span class="string">"I like "</span> . $cars[<span class="number">0</span>] . <span class="string">", "</span> . $cars[<span class="number">1</span>] . <span class="string">" and "</span> . $cars[<span class="number">2</span>] . <span class="string">"."</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="在-PHP-中创建数组"><a href="#在-PHP-中创建数组" class="headerlink" title="在 PHP 中创建数组"></a>在 PHP 中创建数组</h2><p>array() 函数用于创建数组</p>
<p>在 PHP 中，有三种类型的数组</p>
<ul>
<li>数值数组 - 带有数字 ID 键的数组</li>
<li>关联数组 - 带有指定的键的数组，每个键关联一个值</li>
<li>多维数组 - 包含一个或多个数组的数组</li>
</ul>
<h2 id="PHP-数值数组"><a href="#PHP-数值数组" class="headerlink" title="PHP 数值数组"></a>PHP 数值数组</h2><p>两种创建数值数组的方法</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</div><div class="line"></div><div class="line">$cars=<span class="keyword">array</span>();</div><div class="line">$cars[<span class="number">0</span>]=<span class="string">"Volvo"</span>;</div><div class="line">$cars[<span class="number">1</span>]=<span class="string">"BMW"</span>;</div><div class="line">$cars[<span class="number">2</span>]=<span class="string">"Toyota"</span>;</div></pre></td></tr></table></figure>
<h2 id="count-函数"><a href="#count-函数" class="headerlink" title="count()函数"></a>count()函数</h2><p>count() 函数用于返回数组的长度</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</div><div class="line"><span class="keyword">echo</span> count($cars); <span class="comment">// 3</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="遍历数值数组"><a href="#遍历数值数组" class="headerlink" title="遍历数值数组"></a>遍历数值数组</h2><p>遍历并打印数值数组中的所有值，您可以使用 for 循环</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</div><div class="line">$arrlength=count($cars);</div><div class="line"> </div><div class="line"><span class="keyword">for</span>($x=<span class="number">0</span>;$x&lt;$arrlength;$x++)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> $cars[$x]; <span class="comment">// Volvo,BMW,Toyota</span></div><div class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP-关联数组"><a href="#PHP-关联数组" class="headerlink" title="PHP 关联数组"></a>PHP 关联数组</h2><p>关联数组是使用您分配给数组的指定的键的数组</p>
<p>两种创建关联数组的方法</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$age=<span class="keyword">array</span>(<span class="string">"Peter"</span>=&gt;<span class="string">"35"</span>,<span class="string">"Ben"</span>=&gt;<span class="string">"37"</span>,<span class="string">"Joe"</span>=&gt;<span class="string">"43"</span>);</div><div class="line"></div><div class="line">$age[<span class="string">'Peter'</span>]=<span class="string">"35"</span>;</div><div class="line">$age[<span class="string">'Ben'</span>]=<span class="string">"37"</span>;</div><div class="line">$age[<span class="string">'Joe'</span>]=<span class="string">"43"</span>;</div></pre></td></tr></table></figure>
<h2 id="遍历关联数组"><a href="#遍历关联数组" class="headerlink" title="遍历关联数组"></a>遍历关联数组</h2><p>遍历并打印关联数组中的所有值，您可以使用 foreach 循环</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$age=<span class="keyword">array</span>(<span class="string">"Peter"</span>=&gt;<span class="string">"35"</span>,<span class="string">"Ben"</span>=&gt;<span class="string">"37"</span>,<span class="string">"Joe"</span>=&gt;<span class="string">"43"</span>);</div><div class="line"> </div><div class="line"><span class="keyword">foreach</span>($age <span class="keyword">as</span> $x=&gt;$x_value)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Key="</span> . $x . <span class="string">", Value="</span> . $x_value; <span class="comment">//Key=Peter, Value=35Key=Ben, Value=37Key=Joe, Value=43</span></div><div class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-数组排序"><a href="#PHP-数组排序" class="headerlink" title="PHP 数组排序"></a>PHP 数组排序</h1><p>数组中的元素可以按字母或数字顺序进行降序或升序排列</p>
<ul>
<li>sort() - 对数组进行升序排列</li>
<li>rsort() - 对数组进行降序排列</li>
<li>asort() - 根据关联数组的值，对数组进行升序排列</li>
<li>ksort() - 根据关联数组的键，对数组进行升序排列</li>
<li>arsort() - 根据关联数组的值，对数组进行降序排列</li>
<li>krsort() - 根据关联数组的键，对数组进行降序排列</li>
</ul>
<h2 id="sort-对数组进行升序排列"><a href="#sort-对数组进行升序排列" class="headerlink" title="sort() - 对数组进行升序排列"></a>sort() - 对数组进行升序排列</h2><p>$cars 数组中的元素按照字母升序排列</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> </div><div class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);  </div><div class="line">sort($cars);  </div><div class="line">print_r($cars); </div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="keyword">Array</span></div><div class="line">(</div><div class="line">    [<span class="number">0</span>] =&gt; BMW</div><div class="line">    [<span class="number">1</span>] =&gt; Toyota</div><div class="line">    [<span class="number">2</span>] =&gt; Volvo</div><div class="line">)</div></pre></td></tr></table></figure>
<p>$numbers 数组中的元素按照数字升序排列</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">$numbers=array(<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">22</span>,<span class="number">11</span>);  </div><div class="line">sort($numbers);  </div><div class="line">print_r($numbers);  </div><div class="line">?&gt;</div><div class="line"></div><div class="line"><span class="comment">//输出</span></div><div class="line">Array</div><div class="line">(</div><div class="line">    [<span class="number">0</span>] =&gt; <span class="number">2</span></div><div class="line">    [<span class="number">1</span>] =&gt; <span class="number">4</span></div><div class="line">    [<span class="number">2</span>] =&gt; <span class="number">6</span></div><div class="line">    [<span class="number">3</span>] =&gt; <span class="number">11</span></div><div class="line">    [<span class="number">4</span>] =&gt; <span class="number">22</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="rsort-对数组进行降序排列"><a href="#rsort-对数组进行降序排列" class="headerlink" title="rsort() - 对数组进行降序排列"></a>rsort() - 对数组进行降序排列</h2><p>$cars 数组中的元素按照字母降序排列</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</div><div class="line">rsort($cars);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="keyword">Array</span></div><div class="line">(</div><div class="line">    [<span class="number">0</span>] =&gt; Volvo</div><div class="line">    [<span class="number">1</span>] =&gt; Toyota</div><div class="line">    [<span class="number">2</span>] =&gt; BMW</div><div class="line">)</div></pre></td></tr></table></figure>
<p>$numbers 数组中的元素按照数字降序排列</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$numbers=array(<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">22</span>,<span class="number">11</span>);</div><div class="line">rsort($numbers);</div><div class="line">?&gt;</div><div class="line"></div><div class="line"><span class="comment">//输出</span></div><div class="line">Array</div><div class="line">(</div><div class="line">    [<span class="number">0</span>] =&gt; <span class="number">22</span></div><div class="line">    [<span class="number">1</span>] =&gt; <span class="number">11</span></div><div class="line">    [<span class="number">2</span>] =&gt; <span class="number">6</span></div><div class="line">    [<span class="number">3</span>] =&gt; <span class="number">4</span></div><div class="line">    [<span class="number">4</span>] =&gt; <span class="number">2</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="asort-根据数组的值，对数组进行升序排列"><a href="#asort-根据数组的值，对数组进行升序排列" class="headerlink" title="asort() - 根据数组的值，对数组进行升序排列"></a>asort() - 根据数组的值，对数组进行升序排列</h2><p>根据数组的值，对关联数组进行升序排列</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$age=<span class="keyword">array</span>(<span class="string">"Peter"</span>=&gt;<span class="string">"35"</span>,<span class="string">"Ben"</span>=&gt;<span class="string">"37"</span>,<span class="string">"Joe"</span>=&gt;<span class="string">"43"</span>);</div><div class="line">asort($age);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="comment">//输出</span></div><div class="line"><span class="keyword">Array</span></div><div class="line">(</div><div class="line">    [Peter] =&gt; <span class="number">35</span></div><div class="line">    [Ben] =&gt; <span class="number">37</span></div><div class="line">    [Joe] =&gt; <span class="number">43</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="ksort-根据数组的键，对数组进行升序排列"><a href="#ksort-根据数组的键，对数组进行升序排列" class="headerlink" title="ksort() - 根据数组的键，对数组进行升序排列"></a>ksort() - 根据数组的键，对数组进行升序排列</h2><p>根据数组的键，对关联数组进行升序排列：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$age=<span class="keyword">array</span>(<span class="string">"Peter"</span>=&gt;<span class="string">"35"</span>,<span class="string">"Ben"</span>=&gt;<span class="string">"37"</span>,<span class="string">"Joe"</span>=&gt;<span class="string">"43"</span>);</div><div class="line">ksort($age);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="comment">//输出</span></div><div class="line"><span class="keyword">Array</span></div><div class="line">(</div><div class="line">    [Ben] =&gt; <span class="number">37</span></div><div class="line">    [Joe] =&gt; <span class="number">43</span></div><div class="line">    [Peter] =&gt; <span class="number">35</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="arsort-根据数组的值，对数组进行降序排列"><a href="#arsort-根据数组的值，对数组进行降序排列" class="headerlink" title="arsort() - 根据数组的值，对数组进行降序排列"></a>arsort() - 根据数组的值，对数组进行降序排列</h2><p>根据数组的值，对关联数组进行降序排列</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$age=<span class="keyword">array</span>(<span class="string">"Peter"</span>=&gt;<span class="string">"35"</span>,<span class="string">"Ben"</span>=&gt;<span class="string">"37"</span>,<span class="string">"Joe"</span>=&gt;<span class="string">"43"</span>);</div><div class="line">arsort($age);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="comment">//输出</span></div><div class="line"><span class="keyword">Array</span></div><div class="line">(</div><div class="line">    [Joe] =&gt; <span class="number">43</span></div><div class="line">    [Ben] =&gt; <span class="number">37</span></div><div class="line">    [Peter] =&gt; <span class="number">35</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="krsort-根据数组的键，对数组进行降序排列"><a href="#krsort-根据数组的键，对数组进行降序排列" class="headerlink" title="krsort() - 根据数组的键，对数组进行降序排列"></a>krsort() - 根据数组的键，对数组进行降序排列</h2><p>根据数组的键，对关联数组进行降序排列</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$age=<span class="keyword">array</span>(<span class="string">"Peter"</span>=&gt;<span class="string">"35"</span>,<span class="string">"Ben"</span>=&gt;<span class="string">"37"</span>,<span class="string">"Joe"</span>=&gt;<span class="string">"43"</span>);</div><div class="line">krsort($age);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="keyword">Array</span></div><div class="line">(</div><div class="line">    [Peter] =&gt; <span class="number">35</span></div><div class="line">    [Joe] =&gt; <span class="number">43</span></div><div class="line">    [Ben] =&gt; <span class="number">37</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h1 id="PHP-超级全局变量"><a href="#PHP-超级全局变量" class="headerlink" title="PHP 超级全局变量"></a>PHP 超级全局变量</h1><p>PHP中预定义了几个超级全局变量，这意味着它们在一个脚本的全部作用域中都可用</p>
<ul>
<li>$GLOBALS</li>
<li>$_SERVER</li>
<li>$_REQUEST</li>
<li>$_POST</li>
<li>$_GET</li>
<li>$_FILES</li>
<li>$_ENV</li>
<li>$_COOKIE</li>
<li>$_SESSION</li>
</ul>
<h2 id="PHP-GLOBALS"><a href="#PHP-GLOBALS" class="headerlink" title="PHP $GLOBALS"></a>PHP $GLOBALS</h2><p>$GLOBALS 是一个包含了全部变量的全局组合数组。变量的名字就是数组的键</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// z 是一个$GLOBALS数组中的超级全局变量，该变量同样可以在函数外访问</div><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$x = <span class="number">75</span>; </div><div class="line">$y = <span class="number">25</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addition</span><span class="params">()</span> </span></div><div class="line">&#123; </div><div class="line">    $GLOBALS[<span class="string">'z'</span>] = $GLOBALS[<span class="string">'x'</span>] + $GLOBALS[<span class="string">'y'</span>]; </div><div class="line">&#125;</div><div class="line"> </div><div class="line">addition(); </div><div class="line"><span class="keyword">echo</span> $z; </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP-SERVER"><a href="#PHP-SERVER" class="headerlink" title="PHP $_SERVER"></a>PHP $_SERVER</h2><p>$_SERVER 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> </div><div class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">'PHP_SELF'</span>];</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">'SERVER_NAME'</span>];</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">'HTTP_HOST'</span>];</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">'HTTP_REFERER'</span>];</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>];</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">'SCRIPT_NAME'</span>];</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line">/<span class="keyword">try</span>/demo_source/demo_global_server.php</div><div class="line">www.runoob.com</div><div class="line">www.runoob.com</div><div class="line">http:<span class="comment">//www.runoob.com/try/showphp.php?filename=demo_global_server</span></div><div class="line">Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">6.1</span>) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">69.0</span><span class="number">.3472</span><span class="number">.3</span> Safari/<span class="number">537.36</span></div><div class="line">/<span class="keyword">try</span>/demo_source/demo_global_server.php</div></pre></td></tr></table></figure>
<h2 id="PHP-REQUEST"><a href="#PHP-REQUEST" class="headerlink" title="PHP $_REQUEST"></a>PHP $_REQUEST</h2><p>PHP $_REQUEST 用于收集HTML表单提交的数据</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//使用超级全局变量 $_REQUEST 来收集表单中的 input 字段数据</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"&lt;?php echo $_SERVER['PHP_SELF'];?&gt;"</span>&gt;</span></div><div class="line">Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"fname"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$name = $_REQUEST[<span class="string">'fname'</span>]; </div><div class="line"><span class="keyword">echo</span> $name; </div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP-POST"><a href="#PHP-POST" class="headerlink" title="PHP $_POST"></a>PHP $_POST</h2><p>PHP $_POST 被广泛应用于收集表单数据，在HTML form标签的指定该属性：”method=”post”</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 使用超级全局变量 $_POST 来收集表单中的 input 字段数据</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"&lt;?php echo $_SERVER['PHP_SELF'];?&gt;"</span>&gt;</span></div><div class="line">Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"fname"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">$name = $_POST[<span class="string">'fname'</span>]; </div><div class="line"><span class="keyword">echo</span> $name; </div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="PHP-GET"><a href="#PHP-GET" class="headerlink" title="PHP $_GET"></a>PHP $_GET</h2><p>PHP $_GET 同样被广泛应用于收集表单数据，在HTML form标签的指定该属性：”method=”get”</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// 当用户点击链接 "Test $GET", 参数 "subject" 和 "web" 将发送至"test_get.php",</div><div class="line">// 在 "test_get.php" 文件中使用 $_GET 变量来获取这些数据</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"test_get.php?subject=PHP&amp;web=runoob.com"</span>&gt;</span>Test $GET<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line">// "test_get.php" 文件的代码</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line"><span class="keyword">echo</span> <span class="string">"Study "</span> . $_GET[<span class="string">'subject'</span>] . <span class="string">" at "</span> . $_GET[<span class="string">'web'</span>];</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="PHP-While-循环"><a href="#PHP-While-循环" class="headerlink" title="PHP While 循环"></a>PHP While 循环</h1><p>相同的代码块一次又一次地重复运行。我们可以在代码中使用循环语句</p>
<ul>
<li>while - 只要指定的条件成立，则循环执行代码块</li>
<li>do…while - 首先执行一次代码块，然后在指定的条件成立时重复这个循环</li>
</ul>
<h2 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h2><p>while 循环将重复执行代码块，直到指定的条件不成立</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 变量 i 的值为 1 ($i=1;)</span></div><div class="line"><span class="comment">// 只要 i 小于或者等于 5，while 循环将继续运行</span></div><div class="line"><span class="comment">// 循环每运行一次，i 就会递增 1</span></div><div class="line">&lt;html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$i=<span class="number">1</span>;</div><div class="line"><span class="keyword">while</span>($i&lt;=<span class="number">5</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"The number is "</span> . $i . <span class="string">"&lt;br&gt;"</span>;</div><div class="line">    $i++;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line">The number is <span class="number">1</span></div><div class="line">The number is <span class="number">2</span></div><div class="line">The number is <span class="number">3</span></div><div class="line">The number is <span class="number">4</span></div><div class="line">The number is <span class="number">5</span></div></pre></td></tr></table></figure>
<h2 id="do…while-语句"><a href="#do…while-语句" class="headerlink" title="do…while 语句"></a>do…while 语句</h2><p>do…while 语句会至少执行一次代码，然后检查条件，只要条件成立，就会重复进行循环</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 变量 i 的值为 1 ($i=1;)</span></div><div class="line"><span class="comment">// 开始 do...while 循环。循环将变量 i 的值递增 1，然后输出</span></div><div class="line"><span class="comment">// 先检查条件（i 小于或者等于 5），只要 i 小于或者等于 5，循环将继续运行</span></div><div class="line">&lt;html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$i=<span class="number">1</span>;</div><div class="line"><span class="keyword">do</span></div><div class="line">&#123;</div><div class="line">    $i++;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"The number is "</span> . $i . <span class="string">"&lt;br&gt;"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span> ($i&lt;=<span class="number">5</span>);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line">The number is <span class="number">2</span></div><div class="line">The number is <span class="number">3</span></div><div class="line">The number is <span class="number">4</span></div><div class="line">The number is <span class="number">5</span></div><div class="line">The number is <span class="number">6</span></div></pre></td></tr></table></figure>
<h1 id="PHP-For-循环"><a href="#PHP-For-循环" class="headerlink" title="PHP For 循环"></a>PHP For 循环</h1><ul>
<li>for - 循环执行代码块指定的次数</li>
<li>foreach - 根据数组中每个元素来循环代码块</li>
</ul>
<h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><p>for 循环用于您预先知道脚本需要运行的次数的情况</p>
<p>参数:</p>
<ul>
<li>初始值：主要是初始化一个变量值，用于设置一个计数器（但可以是任何在循环的开始被执行一次的代码）。</li>
<li>条件：循环执行的限制条件。如果为 TRUE，则循环继续。如果为 FALSE，则循环结束。</li>
<li>增量：主要用于递增计数器（但可以是任何在循环的结束被执行的代码）</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义一个初始值为 i=1 的循环。只要变量 i 小于或者等于 5，循环将继续运行</span></div><div class="line"><span class="comment">// 循环每运行一次，变量 i 就会递增 1</span></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">for</span> ($i=<span class="number">1</span>; $i&lt;=<span class="number">5</span>; $i++)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"The number is "</span> . $i . <span class="string">"&lt;br&gt;"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line">The number is <span class="number">1</span></div><div class="line">The number is <span class="number">2</span></div><div class="line">The number is <span class="number">3</span></div><div class="line">The number is <span class="number">4</span></div><div class="line">The number is <span class="number">5</span></div></pre></td></tr></table></figure>
<h2 id="foreach-循环"><a href="#foreach-循环" class="headerlink" title="foreach 循环"></a>foreach 循环</h2><p>foreach 循环用于遍历数组</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$x=<span class="keyword">array</span>(<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>);</div><div class="line"><span class="keyword">foreach</span> ($x <span class="keyword">as</span> $value)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> $value . <span class="string">"&lt;br&gt;"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// 输出</div><div class="line">one</div><div class="line">two</div><div class="line">three</div></pre></td></tr></table></figure>
<h1 id="PHP-函数"><a href="#PHP-函数" class="headerlink" title="PHP 函数"></a>PHP 函数</h1><p>PHP 的真正威力源自于它的函数</p>
<p>在 PHP 中，提供了超过 1000 个内建的函数</p>
<h2 id="创建-PHP-函数"><a href="#创建-PHP-函数" class="headerlink" title="创建 PHP 函数"></a>创建 PHP 函数</h2><p>函数是通过调用函数来执行的</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 一个简单的函数，在其被调用时能输出我的名称</span></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeName</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Kai Jim Refsnes"</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">echo</span> <span class="string">"My name is "</span>;</div><div class="line">writeName();</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line">My name is Kai Jim Refsnes</div></pre></td></tr></table></figure>
<h2 id="PHP-函数-添加参数"><a href="#PHP-函数-添加参数" class="headerlink" title="PHP 函数 - 添加参数"></a>PHP 函数 - 添加参数</h2><p>参数就在函数名称后面有一个括号内指定</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> 输出不同的名字，但姓是相同的</div><div class="line">&lt;?php</div><div class="line"><span class="keyword">function</span> writeName(<span class="variable">$fname</span>)</div><div class="line">&#123;</div><div class="line">    echo <span class="variable">$fname</span> . <span class="string">" Refsnes.&lt;br&gt;"</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">echo <span class="string">"My name is "</span>;</div><div class="line">writeName(<span class="string">"Kai Jim"</span>);</div><div class="line">echo <span class="string">"My sister's name is "</span>;</div><div class="line">writeName(<span class="string">"Hege"</span>);</div><div class="line">echo <span class="string">"My brother's name is "</span>;</div><div class="line">writeName(<span class="string">"Stale"</span>);</div><div class="line">?&gt;</div><div class="line"></div><div class="line"><span class="regexp">//</span> 输出</div><div class="line">My name is Kai Jim Refsnes.</div><div class="line">My siste<span class="string">r's name is Hege Refsnes.</span></div><div class="line">My brother's name is Stale Refsnes.</div></pre></td></tr></table></figure>
<p>函数有两个参数</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"><span class="keyword">function</span> writeName(<span class="variable">$fname</span>,<span class="variable">$punctuation</span>)</div><div class="line">&#123;</div><div class="line">    echo <span class="variable">$fname</span> . <span class="string">" Refsnes"</span> . <span class="variable">$punctuation</span> . <span class="string">"&lt;br&gt;"</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">echo <span class="string">"My name is "</span>;</div><div class="line">writeName(<span class="string">"Kai Jim"</span>,<span class="string">"."</span>);</div><div class="line">echo <span class="string">"My sister's name is "</span>;</div><div class="line">writeName(<span class="string">"Hege"</span>,<span class="string">"!"</span>);</div><div class="line">echo <span class="string">"My brother's name is "</span>;</div><div class="line">writeName(<span class="string">"Ståle"</span>,<span class="string">"?"</span>);</div><div class="line">?&gt;</div><div class="line"></div><div class="line"><span class="regexp">//</span> 输出</div><div class="line">My name is Kai Jim Refsnes.</div><div class="line">My siste<span class="string">r's name is Hege Refsnes!</span></div><div class="line">My brother's name is Ståle Refsnes?</div></pre></td></tr></table></figure>
<h2 id="PHP-函数-返回值"><a href="#PHP-函数-返回值" class="headerlink" title="PHP 函数 - 返回值"></a>PHP 函数 - 返回值</h2><p>如需让函数返回一个值，请使用 return 语句</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">($x,$y)</span></span></div><div class="line">&#123;</div><div class="line">    $total=$x+$y;</div><div class="line">    <span class="keyword">return</span> $total;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">echo</span> <span class="string">"1 + 16 = "</span> . add(<span class="number">1</span>,<span class="number">16</span>);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// 输出</div><div class="line">1 + 16 = 17</div></pre></td></tr></table></figure>
<h1 id="PHP-魔术常量"><a href="#PHP-魔术常量" class="headerlink" title="PHP 魔术常量"></a>PHP 魔术常量</h1><p>PHP 向它运行的任何脚本提供了大量的预定义常量</p>
<p>有八个魔术常量它们的值随着它们在代码中的位置改变而改变</p>
<h2 id="LINE"><a href="#LINE" class="headerlink" title="LINE"></a><strong>LINE</strong></h2><p>文件中的当前行号</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">echo</span> <span class="string">'这是第 " '</span>  . <span class="keyword">__LINE__</span> . <span class="string">' " 行'</span>;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// 输出</div><div class="line">这是第 “ 2 ” 行</div></pre></td></tr></table></figure>
<h2 id="FILE"><a href="#FILE" class="headerlink" title="FILE"></a><strong>FILE</strong></h2><p>文件的完整路径和文件名</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">echo</span> <span class="string">'该文件位于 " '</span>  . <span class="keyword">__FILE__</span> . <span class="string">' " '</span>;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// 输出</div><div class="line">该文件位于 “ E:\wamp\www\test\index.php ”</div></pre></td></tr></table></figure>
<h2 id="DIR"><a href="#DIR" class="headerlink" title="DIR"></a><strong>DIR</strong></h2><p>文件所在的目录,等价于 dirname(<strong>FILE</strong>)</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">echo</span> <span class="string">'该文件位于 " '</span>  . <span class="keyword">__DIR__</span> . <span class="string">' " '</span>;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// 输出</div><div class="line">该文件位于 “ E:\wamp\www\test ”</div></pre></td></tr></table></figure>
<h2 id="FUNCTION"><a href="#FUNCTION" class="headerlink" title="FUNCTION"></a><strong>FUNCTION</strong></h2><p>函数名称</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">echo</span>  <span class="string">'函数名为：'</span> . <span class="keyword">__FUNCTION__</span> ;</div><div class="line">&#125;</div><div class="line">test();</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// 输出</div><div class="line">函数名为：test</div></pre></td></tr></table></figure>
<h2 id="CLASS"><a href="#CLASS" class="headerlink" title="CLASS"></a><strong>CLASS</strong></h2><p>类的名称</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_print</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'类名为：'</span>  . <span class="keyword">__CLASS__</span> . <span class="string">"&lt;br&gt;"</span>;</div><div class="line">        <span class="keyword">echo</span>  <span class="string">'函数名为：'</span> . <span class="keyword">__FUNCTION__</span> ;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$t = <span class="keyword">new</span> test();</div><div class="line">$t-&gt;_print();</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// 输出</div><div class="line">类名为：test</div><div class="line">函数名为：_print</div></pre></td></tr></table></figure>
<h2 id="TRAIT"><a href="#TRAIT" class="headerlink" title="TRAIT"></a><strong>TRAIT</strong></h2><p>Trait 的名字,自 PHP 5.4.0 起，PHP 实现了代码复用的一个方法，称为 traits</p>
<p>Trait 名包括其被声明的作用区域（例如 Foo\Bar）</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 从基类继承的成员被插入的 SayWorld Trait 中的 MyHelloWorld 方法所覆盖</span></div><div class="line"><span class="comment">// 其行为 MyHelloWorld 类中定义的方法一致</span></div><div class="line"><span class="comment">// 优先顺序是当前类中的方法会覆盖 trait 方法，而 trait 方法又覆盖了基类中的方法</span></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Hello '</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">trait</span> SayWorld &#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">parent</span>::sayHello();</div><div class="line">        <span class="keyword">echo</span> <span class="string">'World!'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHelloWorld</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</div><div class="line">    <span class="keyword">use</span> <span class="title">SayWorld</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">$o = <span class="keyword">new</span> MyHelloWorld();</div><div class="line">$o-&gt;sayHello();</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line">Hello World!</div></pre></td></tr></table></figure>
<h2 id="METHOD"><a href="#METHOD" class="headerlink" title="METHOD"></a><strong>METHOD</strong></h2><p>类的方法名（PHP 5.0.0 新加）。返回该方法被定义时的名字（区分大小写）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">echo</span>  <span class="string">'函数名为：'</span> . <span class="keyword">__METHOD__</span> ;</div><div class="line">&#125;</div><div class="line">test();</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">// 输出</div><div class="line">函数名为：test</div></pre></td></tr></table></figure>
<h2 id="NAMESPACE"><a href="#NAMESPACE" class="headerlink" title="NAMESPACE"></a><strong>NAMESPACE</strong></h2><p>当前命名空间的名称（区分大小写）</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">MyProject</span>;</div><div class="line"> </div><div class="line"><span class="keyword">echo</span> <span class="string">'命名空间为："'</span>, <span class="keyword">__NAMESPACE__</span>, <span class="string">'"'</span>; <span class="comment">// 输出 "MyProject"</span></div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line">命名空间为：<span class="string">"MyProject"</span></div></pre></td></tr></table></figure>
<h1 id="PHP-命名空间"><a href="#PHP-命名空间" class="headerlink" title="PHP 命名空间"></a>PHP 命名空间</h1><ul>
<li>用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突</li>
<li>为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性</li>
</ul>
<h2 id="定义命名空间"><a href="#定义命名空间" class="headerlink" title="定义命名空间"></a>定义命名空间</h2><p>命名空间通过关键字namespace 来声明</p>
<p>如果一个文件中包含命名空间，它必须在其它所有代码之前声明命名空间</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span>  </span></div><div class="line"><span class="comment">// 定义代码在 'MyProject' 命名空间中  </span></div><div class="line"><span class="keyword">namespace</span> <span class="title">MyProject</span>;  </div><div class="line"> </div><div class="line"><span class="comment">// ... 代码 ...</span></div></pre></td></tr></table></figure>
<p>同一个文件中定义不同的命名空间代码(不推荐)</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span>  </span></div><div class="line"><span class="keyword">namespace</span> <span class="title">MyProject</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> CONNECT_OK = <span class="number">1</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">()</span> </span>&#123; <span class="comment">/* ... */</span>  &#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">AnotherProject</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> CONNECT_OK = <span class="number">1</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">()</span> </span>&#123; <span class="comment">/* ... */</span>  &#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>建议使用下面的大括号形式的语法</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">namespace</span> <span class="title">MyProject</span> &#123;</div><div class="line">    <span class="title">const</span> <span class="title">CONNECT_OK</span> = 1;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Connection</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">()</span> </span>&#123; <span class="comment">/* ... */</span>  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">AnotherProject</span> &#123;</div><div class="line">    <span class="title">const</span> <span class="title">CONNECT_OK</span> = 1;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Connection</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">()</span> </span>&#123; <span class="comment">/* ... */</span>  &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>将全局的非命名空间中的代码与命名空间中的代码组合在一起，只能使用大括号形式的语法</p>
<p>全局代码必须用一个不带名称的 namespace 语句加上大括号括起来</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">namespace</span> <span class="title">MyProject</span> &#123;</div><div class="line"></div><div class="line"><span class="title">const</span> <span class="title">CONNECT_OK</span> = 1;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">()</span> </span>&#123; <span class="comment">/* ... */</span>  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> &#123; // 全局代码</div><div class="line"><span class="title">session_start</span>();</div><div class="line">$a = MyProject\connect();</div><div class="line"><span class="keyword">echo</span> MyProject\Connection::start();</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>在声明命名空间之前唯一合法的代码是用于定义源文件编码方式的 declare 语句</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">declare</span>(encoding=<span class="string">'UTF-8'</span>); <span class="comment">//定义多个命名空间和不包含在命名空间中的代码</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">MyProject</span> &#123;</div><div class="line"></div><div class="line"><span class="title">const</span> <span class="title">CONNECT_OK</span> = 1;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">()</span> </span>&#123; <span class="comment">/* ... */</span>  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> &#123; // 全局代码</div><div class="line"><span class="title">session_start</span>();</div><div class="line">$a = MyProject\connect();</div><div class="line"><span class="keyword">echo</span> MyProject\Connection::start();</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>以下代码会出现语法错误</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">namespace</span> <span class="title">MyProject</span>; <span class="comment">// 命名空间前出现了“&lt;html&gt;” 会致命错误 -　命名空间必须是程序脚本的第一条语句</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="子命名空间"><a href="#子命名空间" class="headerlink" title="子命名空间"></a>子命名空间</h2><p>与目录和文件的关系很像，PHP 命名空间也允许指定层次化的命名空间的名称</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 创建了常量 MyProject\Sub\Level\CONNECT_OK，类 MyProject\Sub\Level\Connection 和函数 MyProject\Sub\Level\Connect</div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">namespace</span> <span class="title">MyProject</span>\<span class="title">Sub</span>\<span class="title">Level</span>;  <span class="comment">//声明分层次的单个命名空间</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> CONNECT_OK = <span class="number">1</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Connect</span><span class="params">()</span> </span>&#123; <span class="comment">/* ... */</span>  &#125;</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="命名空间使用"><a href="#命名空间使用" class="headerlink" title="命名空间使用"></a>命名空间使用</h2><p>PHP 命名空间中的类名可以通过三种方式引用</p>
<ul>
<li>非限定名称，或不包含前缀的类名称</li>
</ul>
<p>例如 $a=new foo(); 或 foo::staticmethod()</p>
<p>如果当前命名空间是 currentnamespace，foo 将被解析为 currentnamespace\foo</p>
<p>如果使用 foo 的代码是全局的，不包含在任何命名空间中的代码，则 foo 会被解析为foo</p>
<ul>
<li>限定名称,或包含前缀的名称</li>
</ul>
<p>例如 $a = new subnamespace\foo(); 或 subnamespace\foo::staticmethod()</p>
<p>如果当前的命名空间是 currentnamespace，则 foo 会被解析为 currentnamespace\subnamespace\foo</p>
<p>如果使用 foo 的代码是全局的，不包含在任何命名空间中的代码，foo 会被解析为subnamespace\foo</p>
<ul>
<li>完全限定名称，或包含了全局前缀操作符的名称</li>
</ul>
<p>$a = new \currentnamespace\foo(); 或 \currentnamespace\foo::staticmethod()</p>
<p>在这种情况下，foo 总是被解析为代码中的文字名(literal name)currentnamespace\foo</p>
<p>实例一</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">namespace</span> <span class="title">Foo</span>\<span class="title">Bar</span>\<span class="title">subnamespace</span>; </div><div class="line"></div><div class="line"><span class="keyword">const</span> FOO = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">staticmethod</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>实例二</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">namespace</span> <span class="title">Foo</span>\<span class="title">Bar</span>;</div><div class="line"><span class="keyword">include</span> <span class="string">'file1.php'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> FOO = <span class="number">2</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">staticmethod</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 非限定名称 */</span></div><div class="line">foo(); <span class="comment">// 解析为函数 Foo\Bar\foo</span></div><div class="line">foo::staticmethod(); <span class="comment">// 解析为类 Foo\Bar\foo ，方法为 staticmethod</span></div><div class="line"><span class="keyword">echo</span> FOO; <span class="comment">// 解析为常量 Foo\Bar\FOO</span></div><div class="line"></div><div class="line"><span class="comment">/* 限定名称 */</span></div><div class="line">subnamespace\foo(); <span class="comment">// 解析为函数 Foo\Bar\subnamespace\foo</span></div><div class="line">subnamespace\foo::staticmethod(); <span class="comment">// 解析为类 Foo\Bar\subnamespace\foo,</span></div><div class="line">                                  <span class="comment">// 以及类的方法 staticmethod</span></div><div class="line"><span class="keyword">echo</span> subnamespace\FOO; <span class="comment">// 解析为常量 Foo\Bar\subnamespace\FOO</span></div><div class="line">                                  </div><div class="line"><span class="comment">/* 完全限定名称 */</span></div><div class="line">\Foo\Bar\foo(); <span class="comment">// 解析为函数 Foo\Bar\foo</span></div><div class="line">\Foo\Bar\foo::staticmethod(); <span class="comment">// 解析为类 Foo\Bar\foo, 以及类的方法 staticmethod</span></div><div class="line"><span class="keyword">echo</span> \Foo\Bar\FOO; <span class="comment">// 解析为常量 Foo\Bar\FOO</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>实例三</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 注意访问任意全局类、函数或常量，都可以使用完全限定名称</span></div><div class="line"><span class="comment">// 例如 \strlen() 或 \Exception 或 \INI_ALL</span></div><div class="line"><span class="comment">// 在命名空间内部访问全局类、函数和常量</span></div><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">Foo</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">strlen</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"><span class="keyword">const</span> INI_ALL = <span class="number">3</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exception</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">$a = \strlen(<span class="string">'hi'</span>); <span class="comment">// 调用全局函数strlen</span></div><div class="line">$b = \INI_ALL; <span class="comment">// 访问全局常量 INI_ALL</span></div><div class="line">$c = <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'error'</span>); <span class="comment">// 实例化全局类 Exception</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PHP-学习准备&quot;&gt;&lt;a href=&quot;#PHP-学习准备&quot; class=&quot;headerlink&quot; title=&quot;PHP 学习准备&quot;&gt;&lt;/a&gt;PHP 学习准备&lt;/h1&gt;&lt;h2 id=&quot;学习路线&quot;&gt;&lt;a href=&quot;#学习路线&quot; class=&quot;headerlink&quot; title=&quot;学习路线&quot;&gt;&lt;/a&gt;学习路线&lt;/h2&gt;&lt;p&gt;1.熟悉HTML/CSS/JS等网页基本元素，完成阶段可自行制作简单的网页，对元素属性相对熟悉&lt;/p&gt;
&lt;p&gt;2.理解动态语言的概念和运做机制，熟悉基本的PHP语法&lt;br&gt;
    
    </summary>
    
      <category term="BackEnd" scheme="http://yoursite.com/categories/BackEnd/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>React</title>
    <link href="http://yoursite.com/2018/07/01/2018.7.1/"/>
    <id>http://yoursite.com/2018/07/01/2018.7.1/</id>
    <published>2018-07-01T15:16:41.000Z</published>
    <updated>2018-07-03T13:20:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>打开bash,输入git clone git@github.com:ruanyf/react-demos.git</p>
<p>Demo 子目录，每个目录都有一个 index.html 文件，在浏览器打开这个文件，就能立刻看到效</p>
<p>React 可以在浏览器运行，也可以在服务器运行<br><a id="more"></a></p>
<h1 id="HTML模板"><a href="#HTML模板" class="headerlink" title="HTML模板"></a>HTML模板</h1><p>react.js 是 React 的核心库，react-dom.js 是提供与 DOM 相关的功能，Browser.js 的作用是将 JSX 语法转为 JavaScript 语法</p>
<p>最后一个script&gt;标签的 type 属性为 text/babel 。这是因为 React 独有的 JSX 语法，跟 JavaScript 不兼容。凡是使用 JSX 的地方，都要加上 type=”text/babel”</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="actionscript"></span></div><div class="line">      <span class="comment">// ** Our code goes here! **</span></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>实际上线的时候，应该将将 JSX 语法转为 JavaScript 语法放到服务器完成</p>
<p>将 src 子目录的 js 文件进行语法转换，转码后的文件全部放在 build 子目录</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">babel </span>src --out-<span class="keyword">dir </span><span class="keyword">build</span></div></pre></td></tr></table></figure>
<h1 id="ReactDOM-render"><a href="#ReactDOM-render" class="headerlink" title="ReactDOM.render()"></a>ReactDOM.render()</h1><p>ReactDOM.render 是 React 的最基本方法，用于将模板转为 HTML 语言，并插入指定的 DOM 节点</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将一个 h1 标题，插入 example 节点</span></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015033109.png" alt="image"></p>
<h1 id="JSX语法"><a href="#JSX语法" class="headerlink" title="JSX语法"></a>JSX语法</h1><p>JSX 的基本语法规则：遇到 HTML 标签（以 &lt; 开头），就用 HTML 规则解析；遇到代码块（以 { 开头），就用 JavaScript 规则解析</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> names = [<span class="string">'Alice'</span>, <span class="string">'Emily'</span>, <span class="string">'Kate'</span>];</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">  &#123;</div><div class="line">    names.map(function (name) &#123;</div><div class="line">      return <span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello, &#123;name&#125;!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>,</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015033106.png" alt="image"></p>
<p>JSX 允许直接在模板插入 JavaScript 变量。如果这个变量是一个数组，则会展开这个数组的所有成员</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="xml">var arr = [</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>,</div><div class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>React is awesome<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>,</div><div class="line">];</div><div class="line">ReactDOM.render(</div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="template-variable">&#123;arr&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>,</span></div><div class="line">  document.getElementById('example')</div><div class="line">);</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015033107.png" alt="image"></p>
<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>React 允许将代码封装成组件，然后像插入普通 HTML 标签一样，在网页中插入这个组件。React.createClass 方法就用于生成一个组件类</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// 所有组件类都必须有自己的 render 方法，用于输出组件</span></div><div class="line"> <span class="comment">// &lt;HelloMessage name="John"&gt; ，就是 HelloMessage 组件加入一个 name 属性，值为 John</span></div><div class="line"> <span class="comment">// 组件的属性可以在组件类的 this.props 对象上获取，比如 name 属性就可以通过 this.props.name 读取</span></div><div class="line"> <span class="keyword">var</span> HelloMessage = React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">HelloMessage</span> <span class="attr">name</span>=<span class="string">"John"</span> /&gt;</span>,</span></div><div class="line">  document.getElementById('example')</div><div class="line">);</div></pre></td></tr></table></figure>
<p> 代码会报错,因为HelloMessage组件包含了两个顶层标签：h1和p</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> HelloMessage = React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></div><div class="line">      Hello &#123;this.props.name&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></div><div class="line">      some text</div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015033108.png" alt="image"></p>
<blockquote>
<p>class 属性需要写成 className ，for 属性需要写成 htmlFor ，这是因为 class 和 for 是 JavaScript 的保留字</p>
</blockquote>
<h1 id="this-props-children"><a href="#this-props-children" class="headerlink" title="this.props.children"></a>this.props.children</h1><p>this.props.children属性表示组件的所有子节点</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// NoteList 组件有两个 span 子节点，它们都可以通过 this.props.children 读取</span></div><div class="line"><span class="keyword">var</span> NotesList = React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span></div><div class="line">      &#123;</div><div class="line">        React.Children.map(this.props.children, function (child) &#123;</div><div class="line">          return <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>;</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">NotesList</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">NotesList</span>&gt;</span>,</div><div class="line">  <span class="built_in">document</span>.body</div><div class="line">);</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015033110.png" alt="image"></p>
<blockquote>
<p>this.props.children 的值有三种可能：如果当前组件没有子节点，它就是 undefined</p>
<p>如果有一个子节点，数据类型是 object ；如果有多个子节点，数据类型就是 array</p>
<p>React.Children.map 来遍历子节点，而不用担心 this.props.children 的数据类型是 undefined 还是 object</p>
</blockquote>
<h1 id="PropTypes"><a href="#PropTypes" class="headerlink" title="PropTypes"></a>PropTypes</h1><p>组件的属性可以接受任意值，字符串、对象、函数等等都可以</p>
<p>组件类的PropTypes属性，就是用来验证组件实例的属性是否符合要求</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// title 属性是必须的，而且它的值必须是字符串,如下设置 title 属性的值是一个数值</span></div><div class="line"><span class="built_in">var</span> MyTitle = React.createClass(&#123;</div><div class="line">  propTypes: &#123;</div><div class="line">    title: React.PropTypes.<span class="built_in">string</span>.isRequired,</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  render: function() &#123;</div><div class="line">     <span class="keyword">return</span> &lt;h1&gt; &#123;this.props.title&#125; &lt;/h1&gt;;</div><div class="line">   &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">var</span> <span class="built_in">data</span> = <span class="number">123</span>;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;MyTitle title=&#123;<span class="built_in">data</span>&#125; /&gt;,</div><div class="line">  document.body</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// title属性就通不过验证了。控制台会显示一行错误信息</span></div><div class="line">Warning: Failed propType: Invalid prop <span class="string">`title`</span> of <span class="keyword">type</span> <span class="string">`number`</span> supplied <span class="keyword">to</span> <span class="string">`MyTitle`</span>, expected <span class="string">`string`</span>.</div></pre></td></tr></table></figure>
<p>getDefaultProps 方法可以用来设置组件属性的默认值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 输出"Hello World"</span></div><div class="line"><span class="keyword">var</span> MyTitle = React.createClass(&#123;</div><div class="line">  <span class="attr">getDefaultProps</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">title</span> : <span class="string">'Hello World'</span></div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> &#123;this.props.title&#125; <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</div><div class="line">   &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">MyTitle</span> /&gt;</span>,</span></div><div class="line">  document.body</div><div class="line">);</div></pre></td></tr></table></figure>
<h1 id="获取真实的DOM节点"><a href="#获取真实的DOM节点" class="headerlink" title="获取真实的DOM节点"></a>获取真实的DOM节点</h1><p>组件并不是真实的DOM节点，而是存在于内存之中的一种数据结构，叫做虚拟 DOM</p>
<p>从组件获取真实DOM的节点，这时就要用到ref属性</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//组件 MyComponent 的子节点有一个文本输入框，用于获取用户的输入</span></div><div class="line"><span class="comment">//文本输入框必须有一个 ref 属性，然后 this.refs.[refName] 就会返回这个真实的 DOM 节点</span></div><div class="line"><span class="comment">//this.refs.[refName] 属性获取的是真实 DOM ，必须等到虚拟 DOM 插入文档以后，才能使用这个属性，否则会报错</span></div><div class="line"><span class="comment">//通过为组件指定Click事件的回调函数，确保了只有等到真实DOM发生Click事件之后，才会读取this.refs.[refName]属性</span></div><div class="line"><span class="comment">//React 组件支持很多事件，除了 Click事件以外，还有 KeyDown 、Copy、Scroll</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> MyComponent = React.createClass(&#123;</div><div class="line">  handleClick: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.refs.myTextInput.focus();</div><div class="line">  &#125;,</div><div class="line">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;input type=<span class="string">"text"</span> ref=<span class="string">"myTextInput"</span> /&gt;</div><div class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"Focus the text input"</span> onClick=&#123;<span class="keyword">this</span>.handleClick&#125; /&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;MyComponent /&gt;,</div><div class="line">  document.getElementById(<span class="string">'example'</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<h1 id="this-state"><a href="#this-state" class="headerlink" title="this.state"></a>this.state</h1><p>React将组件看成是一个状态机，一开始有一个初始状态，然后用户互动，导致状态变化，从而触发重新渲染 UI </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//LikeButton组件，它的getInitialState方法用于定义初始状态，也就是一个对象，这个对象可以通过 this.state属性读取</span></div><div class="line"><span class="comment">//当用户点击组件，导致状态变化，this.setState方法就修改状态值，每次修改以后，自动调用this.render方法，再次渲染组件</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="keyword">var</span> LikeButton = React.createClass(&#123;</div><div class="line">  <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;<span class="attr">liked</span>: <span class="literal">false</span>&#125;;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">handleClick</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">liked</span>: !<span class="keyword">this</span>.state.liked&#125;);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> text = <span class="keyword">this</span>.state.liked ? <span class="string">'like'</span> : <span class="string">'haven\'t liked'</span>;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span></div><div class="line">        You &#123;text&#125; this. Click to toggle.</div><div class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">LikeButton</span> /&gt;</span>,</span></div><div class="line">  document.getElementById('example')</div><div class="line">);</div></pre></td></tr></table></figure>
<blockquote>
<p>this.props 表示那些一旦定义，就不再改变的特性，而 this.state 是会随着用户互动而产生变化的特性</p>
</blockquote>
<h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><p>用户在表单填入的内容，属于用户跟组件的互动，所以不能用 this.props 读取</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//文本输入框的值，不能用 this.props.value 读取，而要定义一个 onChange事件的回调函数，通过event.target.value读取用户输入的值</span></div><div class="line"><span class="keyword">var</span> Input = React.createClass(&#123;</div><div class="line">  <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;<span class="attr">value</span>: <span class="string">'Hello!'</span>&#125;;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">handleChange</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>: event.target.value&#125;);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> value = <span class="keyword">this</span>.state.value;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(<span class="tag">&lt;<span class="name">Input</span>/&gt;</span>, document.body);</div></pre></td></tr></table></figure>
<h1 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h1><p>组件的生命周期分成三个状态</p>
<ul>
<li>Mounting：已插入真实 DOM</li>
<li>Updating：正在被重新渲染</li>
<li>Unmounting：已移出真实 DOM</li>
</ul>
<p>React 为每个状态都提供了两种处理函数，will 函数在进入状态之前调用，did 函数在进入状态之后调用，三种状态共计五种处理函数</p>
<ul>
<li>componentWillMount()</li>
<li>componentDidMount()</li>
<li>componentWillUpdate(object nextProps, object nextState)</li>
<li>componentDidUpdate(object prevProps, object prevState)</li>
<li>componentWillUnmount()</li>
</ul>
<p>React 还提供两种特殊状态的处理函数</p>
<ul>
<li>componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用</li>
<li>shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用</li>
</ul>
<p>这些方法的详细说明，可以参考官方文档。下面是一个例子</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// hello组件加载以后，通过 componentDidMount 方法设置一个定时器，每隔100毫秒，就重新设置组件的透明度，从而引发重新渲染</span></div><div class="line"><span class="comment">//  React 组件样式是一个对象，所以第一重大括号表示这是 JavaScript 语法，第二重大括号表示样式对象</span></div><div class="line"><span class="keyword">var</span> Hello = React.createClass(&#123;</div><div class="line">  <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">opacity</span>: <span class="number">1.0</span></div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">componentDidMount</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> opacity = <span class="keyword">this</span>.state.opacity;</div><div class="line">      opacity -= <span class="number">.05</span>;</div><div class="line">      <span class="keyword">if</span> (opacity &lt; <span class="number">0.1</span>) &#123;</div><div class="line">        opacity = <span class="number">1.0</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">this</span>.setState(&#123;</div><div class="line">        <span class="attr">opacity</span>: opacity</div><div class="line">      &#125;);</div><div class="line">    &#125;.bind(<span class="keyword">this</span>), <span class="number">100</span>);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;opacity:</span> <span class="attr">this.state.opacity</span>&#125;&#125;&gt;</span></span></div><div class="line">        Hello &#123;this.props.name&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Hello</span> <span class="attr">name</span>=<span class="string">"world"</span>/&gt;</span>,</span></div><div class="line">  document.body</div><div class="line">);</div></pre></td></tr></table></figure>
<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p>组件的数据来源，通常是通过Ajax请求从服务器获取，可以使用componentDidMount方法设置 Ajax 请求，等到请求成功，再用this.setState方法重新渲染UI</p>
<p>jQuery 完成 Ajax 请求，这是为了便于说明。React 本身没有任何依赖，完全可以不用jQuery，而使用其他库</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> UserGist = React.createClass(&#123;</div><div class="line">  <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">username</span>: <span class="string">''</span>,</div><div class="line">      <span class="attr">lastGistUrl</span>: <span class="string">''</span></div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">componentDidMount</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $.get(<span class="keyword">this</span>.props.source, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> lastGist = result[<span class="number">0</span>];</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.isMounted()) &#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;</div><div class="line">          <span class="attr">username</span>: lastGist.owner.login,</div><div class="line">          <span class="attr">lastGistUrl</span>: lastGist.html_url</div><div class="line">        &#125;);</div><div class="line">      &#125;</div><div class="line">    &#125;.bind(<span class="keyword">this</span>));</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        &#123;this.state.username&#125;'s last gist is</div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;this.state.lastGistUrl&#125;</span>&gt;</span>here<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">UserGist</span> <span class="attr">source</span>=<span class="string">"https://api.github.com/users/octocat/gists"</span> /&gt;</span>,</span></div><div class="line">  document.body</div><div class="line">);</div></pre></td></tr></table></figure>
<p>把一个Promise对象传入组件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Github的API抓取数据，然后将Promise对象作为属性，传给RepoList组件</span></div><div class="line"><span class="comment">//Promise对象正在抓取数据（pending状态），组件显示"正在加载"</span></div><div class="line"><span class="comment">//如果Promise对象报错（rejected状态），组件显示报错信息</span></div><div class="line"><span class="comment">//如果Promise对象抓取数据成功（fulfilled状态），组件显示获取的数据</span></div><div class="line"><span class="keyword">var</span> RepoList = React.createClass(&#123;</div><div class="line">  <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">loading</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">error</span>: <span class="literal">null</span>,</div><div class="line">      <span class="attr">data</span>: <span class="literal">null</span></div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  componentDidMount() &#123;</div><div class="line">    <span class="keyword">this</span>.props.promise.then(</div><div class="line">      <span class="function"><span class="params">value</span> =&gt;</span> <span class="keyword">this</span>.setState(&#123;<span class="attr">loading</span>: <span class="literal">false</span>, <span class="attr">data</span>: value&#125;),</div><div class="line">      error =&gt; <span class="keyword">this</span>.setState(&#123;<span class="attr">loading</span>: <span class="literal">false</span>, <span class="attr">error</span>: error&#125;));</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.loading) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state.error !== <span class="literal">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Error: &#123;this.state.error.message&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">var</span> repos = <span class="keyword">this</span>.state.data.items;</div><div class="line">      <span class="keyword">var</span> repoList = repos.map(<span class="function"><span class="keyword">function</span> (<span class="params">repo, index</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;repo.html_url&#125;</span>&gt;</span>&#123;repo.name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span> (&#123;repo.stargazers_count&#125; stars) <span class="tag">&lt;<span class="name">br</span>/&gt;</span> &#123;repo.description&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">        );</div><div class="line">      &#125;);</div><div class="line">      <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Most Popular JavaScript Projects in Github<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">ol</span>&gt;</span>&#123;repoList&#125;<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">main</span>&gt;</span></div><div class="line">      );</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">RepoList</span> <span class="attr">promise</span>=<span class="string">&#123;$.getJSON(</span>'<span class="attr">https:</span>//<span class="attr">api.github.com</span>/<span class="attr">search</span>/<span class="attr">repositories</span>?<span class="attr">q</span>=<span class="string">javascript&amp;sort</span>=<span class="string">stars</span>')&#125; /&gt;</span>,</span></div><div class="line">  document.getElementById('example')</div><div class="line">);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;打开bash,输入git clone git@github.com:ruanyf/react-demos.git&lt;/p&gt;
&lt;p&gt;Demo 子目录，每个目录都有一个 index.html 文件，在浏览器打开这个文件，就能立刻看到效&lt;/p&gt;
&lt;p&gt;React 可以在浏览器运行，也可以在服务器运行&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>【总结】2018年6月份个人总结</title>
    <link href="http://yoursite.com/2018/06/28/2018.6summary/"/>
    <id>http://yoursite.com/2018/06/28/2018.6summary/</id>
    <published>2018-06-27T16:40:15.000Z</published>
    <updated>2018-06-28T13:54:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>是谁来自山川湖海,又囿于昼夜,厨房与爱</p>
<p>这个六月,跟往常不太一样,重新一段几乎全新的生活,没有任何的不适,走了几个地方,认识几个朋友,人幽默很nice,我已经习惯这边的生活</p>
<a id="more"></a>
<p>念过往,畏将来,冥冥中这是我唯一要走的路。我是个喜欢怀旧的人，但我不想回到过去任何一个时间点，因为即使重来我还是会选择现在走过的路</p>
<p>我向往大厂的技术及工资,并会不断努力达到进入要求。与在头条的老妹每次通话,都深知,高工资高成长的大厂,是每天起早贪黑的工作及学习,并要牺牲很多业余时间的代价</p>
<p>所以我现在非常珍惜单纯快乐的时光，不需要考虑吃穿住行，不需要考虑家庭压力和责任，这样的日子也许是未来最美好的一段回忆。所以以更积极向上的姿态去拥抱生活,投资自己</p>
<h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><p>1.React.js: 过了一遍文档,争取后期完成项目</p>
<p>2.Canvas: 看MDN,写了个画板demo</p>
<p>3.PHP: 学习基础语法及常用函数</p>
<p>4.专利: 报名11月份考试,买5本考试书籍</p>
<p>5.ES6: 重新总结ES6的大部分语法糖、变量的解构等等并实战了一遍</p>
<p>6.前端MVC设计模式及网页性能优化</p>
<p>7.CSS动画初试:transition和animation</p>
<h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><p>1.海尔小家电运营平台增加订单管理功能</p>
<p>2.海尔插件将jqueryHelp.js的createTree增加三属性isContact,isAddEvent,isHideExpandAll满足需求</p>
<p>3.运维四台服务器的每月报账</p>
<h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>1.学会素描,可以画猫、建筑</p>
<p>2.每天坚持夜跑40分钟、练字半个钟</p>
<p>3.大学毕业后转建筑的同学来找我玩,去了一趟大夫山骑单车,真是贼舒服,仿佛回到高三那时候周六晚都会在汕头骑单车放松听歌</p>
<p>4.去市桥的游泳馆游了一次泳,终于突破2米的恐惧~只会费体力的自由泳及仰泳，学习蛙泳中</p>
<p>5.六月十三日小学兼结拜兄弟紫菜结婚,八个结拜兄弟,已2位正式结婚,真怀念从小学玩到大一起踢球、打球、钓鱼、烧烤、游泳、爬山等等没心没肺的日子,感叹现在的聚少离多</p>
<p>6.顺便请了个长假回家休息,唱K两次,释放压力,好男儿心怀向大海</p>
<p>7.去了一趟汕大,人美学校也美</p>
<p>8.这个月熬夜不多,12点前都坚持准时睡觉,除了一次看阿根廷的球赛熬了夜</p>
<p>9.每周打扫一次卫生</p>
<h1 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h1><h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><p>《ES6标准入门》100%、《React.js标准教程》100%、《JavaScript语言精粹》100%、《你不知道的JavaScript(上)》100%、《图解HTTP》20%、《Git版本控制管理》100%、《PHP和MySQL.Web开发(第4版)》10%、《机械领域专利申请文件的撰写与审查》10%、《计算机网络第五版》100%</p>
<h2 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h2><p>《傲慢与偏见》、《美国派1-4部》、《年鉴计划》</p>
<h2 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h2><p>《原来你也在这里》、《每日最热资讯榜》、《局座悄悄话》</p>
<h1 id="绩效评估"><a href="#绩效评估" class="headerlink" title="绩效评估"></a>绩效评估</h1><table>
<thead>
<tr>
<th>学习</th>
<th>工作</th>
<th>生活</th>
<th>阅读</th>
<th>总分</th>
</tr>
</thead>
<tbody>
<tr>
<td>7</td>
<td>5</td>
<td>8</td>
<td>4</td>
<td>25</td>
</tr>
</tbody>
</table>
<h1 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h1><p>学习目标:PHP、Vue全家桶、React深入、SVG、前端工作流工具</p>
<p>另外说一句，我再海尔转正了，时光荏苒呀</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;是谁来自山川湖海,又囿于昼夜,厨房与爱&lt;/p&gt;
&lt;p&gt;这个六月,跟往常不太一样,重新一段几乎全新的生活,没有任何的不适,走了几个地方,认识几个朋友,人幽默很nice,我已经习惯这边的生活&lt;/p&gt;
    
    </summary>
    
      <category term="lifes" scheme="http://yoursite.com/categories/lifes/"/>
    
    
      <category term="个人总结" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript语言精粹</title>
    <link href="http://yoursite.com/2018/06/25/2018.6.25/"/>
    <id>http://yoursite.com/2018/06/25/2018.6.25/</id>
    <published>2018-06-25T04:40:15.000Z</published>
    <updated>2018-06-24T16:11:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript蝴蝶书,详细分析了Javascript中哪些部分是精粹，哪些部分是糟粕和鸡肋</p>
<p>列出了11种应该避免使用的Javascript语法<br><a id="more"></a></p>
<h1 id=""><a href="#" class="headerlink" title="=="></a>==</h1><p>永远只使用===和!==。因为==默认会进行类型转换，规则十分难记。</p>
<h1 id="with"><a href="#with" class="headerlink" title="with"></a>with</h1><p>解释器会首先判断obj.b和obj.d是否存在，如果不存在的话，再判断全局变量b和d是否存在</p>
<p>这样就导致了低效率，而且可能会导致意外，因此最好不要使用with语句</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">obj.<span class="attr">a</span> = obj.b;</div><div class="line">obj.<span class="attr">c</span> = obj.d;</div><div class="line"></div><div class="line">// 可以简写成</div><div class="line"><span class="keyword">with</span>(obj) &#123;</div><div class="line">    <span class="attr">a</span> = b;</div><div class="line">    <span class="attr">c</span> = d;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h1><p>eval用来直接执行一个字符串,性能差</p>
<p>eval能够做到的事情，不用它也能做到</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">eval</span>(<span class="string">"myValue = myObject."</span> + myKey + <span class="string">";"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 可以直接写成</span></div><div class="line">myValue = myObject[myKey];</div></pre></td></tr></table></figure>
<h1 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h1><p>这条命令的作用是返回到循环的头部，但是循环本来就会返回到头部</p>
<p>避免使用这条命令，使得效率得到改善</p>
<h1 id="switch-贯穿"><a href="#switch-贯穿" class="headerlink" title="switch 贯穿"></a>switch 贯穿</h1><p>switch结构中的case语句，默认是顺序执行，除非遇到break，return和throw</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span>(n) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">    <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>建议避免switch贯穿，凡是有case的地方，一律加上break</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span>(n) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="单行的块结构"><a href="#单行的块结构" class="headerlink" title="单行的块结构"></a>单行的块结构</h1><p>if、while、do和for，都是块结构语句，但是也可以接受单行命令,如</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if (<span class="name">ok</span>) <span class="literal">t</span> = true<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>不管是否只有一行命令，都一律加上大括号</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">if</span> (ok)&#123;</div><div class="line">    <span class="attribute">t</span> = <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="和–"><a href="#和–" class="headerlink" title="++和–"></a>++和–</h1><p>递增运算符++和递减运算符–,实际上会让代码看上去更复杂,为了代码的整洁性和易读性，不用为好</p>
<h1 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h1><p>Javascript内部，所有数字都保存为双精度浮点数。如果使用它们的话，Javascript不得不将运算数先转为整数，然后再进行运算，这样就降低了速度</p>
<h1 id="function语句"><a href="#function语句" class="headerlink" title="function语句"></a>function语句</h1><p>前一种写法会被解析器自动提升到代码的头部，因此违背了函数应该先定义后使用的要求，所以建议定义函数时，全部采用后一种写法</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// 等价于</span></div><div class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<h1 id="基本数据类型的包装对象"><a href="#基本数据类型的包装对象" class="headerlink" title="基本数据类型的包装对象"></a>基本数据类型的包装对象</h1><p>Javascript的基本数据类型包括字符串、数字、布尔值，它们都有对应的包装对象String、Number和Boolean,这样写完全没有必要</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="type">String</span>(<span class="string">"Hello World"</span>);</div><div class="line"><span class="keyword">new</span> <span class="type">Number</span>(<span class="number">2000</span>);</div><div class="line"><span class="keyword">new</span> <span class="type">Boolean</span>(<span class="literal">false</span>);</div></pre></td></tr></table></figure>
<h1 id="void"><a href="#void" class="headerlink" title="void"></a>void</h1><p>在Javascript中，void是一个运算符，接受一个运算数，并返回undefined,这个命令没什么用,避免使用</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> <span class="number">0</span>; <span class="comment">// undefined</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript蝴蝶书,详细分析了Javascript中哪些部分是精粹，哪些部分是糟粕和鸡肋&lt;/p&gt;
&lt;p&gt;列出了11种应该避免使用的Javascript语法&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>网页性能优化</title>
    <link href="http://yoursite.com/2018/06/21/2018.6.21/"/>
    <id>http://yoursite.com/2018/06/21/2018.6.21/</id>
    <published>2018-06-21T04:40:15.000Z</published>
    <updated>2018-06-20T16:11:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>有些网页响应非常缓慢，占用大量的CPU和内存，浏览起来常常有卡顿，页面的动画效果也不流畅</p>
<h1 id="网页生成的过程"><a href="#网页生成的过程" class="headerlink" title="网页生成的过程"></a>网页生成的过程</h1><a id="more"></a>
<p>1.HTML代码转化成DOM</p>
<p>2.CSS代码转化成CSSOM</p>
<p>3.结合DOM和CSSOM，生成一棵渲染树</p>
<p>4.生成布局，即将所有渲染树的所有节点进行平面合成</p>
<p>5.将布局绘制在屏幕上</p>
<blockquote>
<p>“生成布局”（flow）和”绘制”（paint）这两步，合称为”渲染”（render）</p>
</blockquote>
<h1 id="重排和重绘"><a href="#重排和重绘" class="headerlink" title="重排和重绘"></a>重排和重绘</h1><p>重新渲染，就需要重新生成布局和重新绘制。前者叫做”重排”（reflow），后者叫做”重绘”（repaint）</p>
<p>以下三种情况，会导致网页重新渲染</p>
<p>1.修改DOM</p>
<p>2.修改样式表</p>
<p>3.用户事件</p>
<h1 id="对于性能的影响"><a href="#对于性能的影响" class="headerlink" title="对于性能的影响"></a>对于性能的影响</h1><p>提高网页性能，就是要降低”重排”和”重绘”的频率和成本，尽量少触发重新渲染</p>
<p>一般来说，样式的写操作之后，如果有下面这些属性的读操作，都会引发浏览器立即重新渲染</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// div元素有两个样式变动，但是浏览器只会触发一次重排和重绘</span></div><div class="line"><span class="keyword">div</span>.style.color = <span class="string">'blue'</span>;</div><div class="line"><span class="keyword">div</span>.style.marginTop = <span class="string">'30px'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 如果读和写操作一起，就会触发两次重排和重绘</span></div><div class="line"><span class="keyword">div</span>.style.color = <span class="string">'blue'</span>;</div><div class="line"><span class="keyword">var</span> margin = parseInt(<span class="keyword">div</span>.style.marginTop);</div><div class="line"><span class="keyword">div</span>.style.marginTop = (margin + <span class="number">10</span>) + <span class="string">'px'</span>;</div></pre></td></tr></table></figure>
<p>规律如下:</p>
<p>1.样式表越简单，重排和重绘就越快</p>
<p>2.重排和重绘的DOM元素层级越高，成本就越高</p>
<p>3.table元素的重排和重绘成本，要高于div元素</p>
<h1 id="提高性能的九个技巧"><a href="#提高性能的九个技巧" class="headerlink" title="提高性能的九个技巧"></a>提高性能的九个技巧</h1><p>1.DOM 的多个读操作（或多个写操作），应该放在一起。不要两个读操作之间，加入一个写操作</p>
<p>2.如果某个样式是通过重排得到的，那么最好缓存结果。避免下一次用到的时候，浏览器又要重排</p>
<p>3.不要一条条地改变样式，而要通过改变class，或者csstext属性，一次性地改变样式</p>
<p>4.尽量使用离线DOM，而不是真实的网面DOM，来改变元素样式</p>
<p>5.先将元素设为display:none（需要1次重排和重绘），然后对这个节点进行100次操作，最后再恢复显示</p>
<p>6.position属性为absolute或fixed的元素，重排的开销会比较小，因为不用考虑它对其他元素的影响</p>
<p>7.只在必要的时候，才将元素的display属性设为可见，因为不可见的元素不影响重排和重绘。另外，visibility : hidden的元素只对重绘有影响，不影响重排</p>
<p>8.使用虚拟DOM的脚本库，比如React等</p>
<p>9.使用 window.requestAnimationFrame()、window.requestIdleCallback()这两个方法调节重新渲染</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有些网页响应非常缓慢，占用大量的CPU和内存，浏览起来常常有卡顿，页面的动画效果也不流畅&lt;/p&gt;
&lt;h1 id=&quot;网页生成的过程&quot;&gt;&lt;a href=&quot;#网页生成的过程&quot; class=&quot;headerlink&quot; title=&quot;网页生成的过程&quot;&gt;&lt;/a&gt;网页生成的过程&lt;/h1&gt;
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="网页性能" scheme="http://yoursite.com/tags/%E7%BD%91%E9%A1%B5%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>ES5数组扩展方法源代码</title>
    <link href="http://yoursite.com/2018/06/19/2018.6.19/"/>
    <id>http://yoursite.com/2018/06/19/2018.6.19/</id>
    <published>2018-06-19T04:40:15.000Z</published>
    <updated>2018-06-19T14:44:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="join"><a href="#join" class="headerlink" title="join"></a>join</h1><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var<span class="built_in"> array </span>= ['a','b','c']</div><div class="line">array.join('-') // 结果是'a-b-c'</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="源代码实现"><a href="#源代码实现" class="headerlink" title="源代码实现"></a>源代码实现</h2><p>1.array.join是Array.prototype.join对应的函数</p>
<p>2.array.join(‘-‘)等价于array.join.call(array,’-‘)</p>
<p>3.join函数的this和arguments[0]可以得到array和’-‘两个值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.join = <span class="function"><span class="keyword">function</span>(<span class="params">char</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> result = <span class="keyword">this</span>[<span class="number">0</span>] || <span class="string">''</span></div><div class="line">  <span class="keyword">let</span> length = <span class="keyword">this</span>.length</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>; i&lt; length; i++)&#123;</div><div class="line">      result += char + <span class="keyword">this</span>[i]</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h1><h2 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var a = ['a', 'b', 'c'];</div><div class="line">a.slice(1) // [<span class="string">"b"</span>, <span class="string">"c"</span>]</div><div class="line">a.slice(1, 2) // [<span class="string">"b"</span>]</div><div class="line">a.slice() // [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</div><div class="line"></div><div class="line">// 将伪数组转化成数组<span class="built_in"></span></div><div class="line">array = Array.prototye.slice.call(arrayLike)</div><div class="line">或者<span class="built_in"></span></div><div class="line">array = [].slice.call(arrayLike)</div></pre></td></tr></table></figure>
<h2 id="源代码实现-1"><a href="#源代码实现-1" class="headerlink" title="源代码实现"></a>源代码实现</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Array<span class="variable">.prototype</span><span class="variable">.slice</span> = <span class="keyword">function</span>(<span class="keyword">begin</span>, <span class="keyword">end</span>)&#123;</div><div class="line">    <span class="keyword">let</span> result = []</div><div class="line">    <span class="keyword">begin</span> = <span class="keyword">begin</span> || <span class="number">0</span></div><div class="line">    <span class="keyword">end</span> = <span class="keyword">end</span> || <span class="keyword">this</span><span class="variable">.length</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="keyword">begin</span>; i&lt; <span class="keyword">end</span>; i++)&#123;</div><div class="line">        result<span class="variable">.push</span>(<span class="keyword">this</span>[i])</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h1><h2 id="应用-2"><a href="#应用-2" class="headerlink" title="应用"></a>应用</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">'d</span>', <span class="symbol">'c</span>', <span class="symbol">'b</span>', <span class="symbol">'a</span>'].sort()</div><div class="line">// [<span class="symbol">'a</span>', <span class="symbol">'b</span>', <span class="symbol">'c</span>', <span class="symbol">'d</span>']</div><div class="line"></div><div class="line">[<span class="name">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>].sort()</div><div class="line">// [<span class="name">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"></div><div class="line">[<span class="name">11</span>, <span class="number">101</span>].sort()</div><div class="line">// [<span class="name">101</span>, <span class="number">11</span>]</div><div class="line"></div><div class="line">[<span class="name">10111</span>, <span class="number">1101</span>, <span class="number">111</span>].sort()</div><div class="line">// [<span class="name">10111</span>, <span class="number">1101</span>, <span class="number">111</span>]</div><div class="line"></div><div class="line">[<span class="name">10111</span>, <span class="number">1101</span>, <span class="number">111</span>].sort(<span class="name">function</span> (<span class="name">a</span>, b) &#123;</div><div class="line">  return a - b<span class="comment">;</span></div><div class="line">&#125;)</div><div class="line">// [<span class="name">111</span>, <span class="number">1101</span>, <span class="number">10111</span>]</div></pre></td></tr></table></figure>
<h2 id="源代码实现-2"><a href="#源代码实现-2" class="headerlink" title="源代码实现"></a>源代码实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 选择排序</span></div><div class="line"><span class="built_in">Array</span>.prototype.sort = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">    fn = fn || <span class="function">(<span class="params">a,b</span>)=&gt;</span> a-b</div><div class="line">    <span class="keyword">let</span> roundCount = <span class="keyword">this</span>.length - <span class="number">1</span> <span class="comment">// 比较的轮数</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; roundCount; i++)&#123;</div><div class="line">        <span class="keyword">let</span> minIndex = <span class="keyword">this</span>[i]</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> k = i+<span class="number">1</span>; k &lt; <span class="keyword">this</span>.length; k++)&#123;</div><div class="line">            <span class="keyword">if</span>( fn.call(<span class="literal">null</span>, <span class="keyword">this</span>[k],<span class="keyword">this</span>[i]) &lt; <span class="number">0</span> )&#123;</div><div class="line">                [ <span class="keyword">this</span>[i], <span class="keyword">this</span>[k] ] = [ <span class="keyword">this</span>[k], <span class="keyword">this</span>[i] ]</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h1><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[<span class="name">2</span>, <span class="number">5</span>, <span class="number">9</span>].forEach(<span class="name">function</span> (<span class="name">element</span>, index, array) &#123;</div><div class="line">  console.log('[' + index + '] = ' + element)</div><div class="line">&#125;)<span class="comment">;</span></div><div class="line">// [<span class="name">0</span>] = <span class="number">2</span></div><div class="line">// [<span class="name">1</span>] = <span class="number">5</span></div><div class="line">// [<span class="name">2</span>] = <span class="number">9</span></div></pre></td></tr></table></figure>
<h2 id="源代码实现-3"><a href="#源代码实现-3" class="headerlink" title="源代码实现"></a>源代码实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(i <span class="keyword">in</span> <span class="keyword">this</span>)&#123;</div><div class="line">            fn.call(<span class="literal">undefined</span>, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><h2 id="应用-3"><a href="#应用-3" class="headerlink" title="应用"></a>应用</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">numbers.map(<span class="function"><span class="keyword">function</span> <span class="params">(n)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> n + <span class="number">1</span></div><div class="line">&#125;);</div><div class="line"><span class="comment">// [2, 3, 4]</span></div><div class="line">numbers</div><div class="line"><span class="comment">// [1, 2, 3]</span></div></pre></td></tr></table></figure>
<h2 id="源代码实现-4"><a href="#源代码实现-4" class="headerlink" title="源代码实现"></a>源代码实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.map = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> result = []</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(i <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</div><div class="line">            result[i] = fn.call(<span class="literal">undefined</span>, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h1><h2 id="应用-4"><a href="#应用-4" class="headerlink" title="应用"></a>应用</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="name">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].filter(<span class="name">function</span> (<span class="name">elem</span>) &#123;</div><div class="line">  return (<span class="name">elem</span> &gt; <span class="number">3</span>)<span class="comment">;</span></div><div class="line">&#125;)</div><div class="line">// [<span class="name">4</span>, <span class="number">5</span>]</div></pre></td></tr></table></figure>
<h2 id="源代码实现-5"><a href="#源代码实现-5" class="headerlink" title="源代码实现"></a>源代码实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Arra.prototype.filter = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> result = []</div><div class="line">    <span class="keyword">let</span> temp</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(i <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</div><div class="line">            <span class="keyword">if</span>(temp = fn.call(<span class="literal">undefined</span>, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>) )&#123;</div><div class="line">                result.push(<span class="keyword">this</span>[i])</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h1><h2 id="应用-5"><a href="#应用-5" class="headerlink" title="应用"></a>应用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].reduce(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(a, b);</div><div class="line">    <span class="keyword">return</span> a + b;</div><div class="line">&#125;)</div><div class="line"><span class="comment">// 1 2</span></div><div class="line"><span class="comment">// 3 3</span></div><div class="line"><span class="comment">// 6 4</span></div><div class="line"><span class="comment">// 10 5</span></div><div class="line"><span class="comment">//最后结果：15</span></div></pre></td></tr></table></figure>
<h2 id="源代码实现-6"><a href="#源代码实现-6" class="headerlink" title="源代码实现"></a>源代码实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Arra.prototype.reduce = <span class="function"><span class="keyword">function</span>(<span class="params">fn, init</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> result = init</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(i <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</div><div class="line">            result = fn.call(<span class="literal">undefined</span>, result, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;join&quot;&gt;&lt;a href=&quot;#join&quot; class=&quot;headerlink&quot; title=&quot;join&quot;&gt;&lt;/a&gt;join&lt;/h1&gt;&lt;h2 id=&quot;应用&quot;&gt;&lt;a href=&quot;#应用&quot; class=&quot;headerlink&quot; title=&quot;应用&quot;&gt;&lt;/a&gt;应用&lt;/h2&gt;&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var&lt;span class=&quot;built_in&quot;&gt; array &lt;/span&gt;= [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;array.join(&#39;-&#39;) // 结果是&#39;a-b-c&#39;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS动画简介</title>
    <link href="http://yoursite.com/2018/06/15/2018.6.15/"/>
    <id>http://yoursite.com/2018/06/15/2018.6.15/</id>
    <published>2018-06-15T04:40:15.000Z</published>
    <updated>2018-06-20T14:58:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>CSS动画的两大组成部分：transition和animation</p>
<h1 id="CSS3Transition"><a href="#CSS3Transition" class="headerlink" title="CSS3Transition"></a>CSS3Transition</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>当鼠标放置于缩略图之上,缩略图会迅速变大,缩略图的变大是瞬间实现的<br><a id="more"></a><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">height</span>:<span class="number">15px</span>;</div><div class="line">    <span class="attribute">width</span>:<span class="number">15px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">450px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">450px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>transition的作用在于，指定状态变化所需要的时间</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>指定transition适用的属性，只有height的变化需要1秒实现，其他变化（主要是width）依然瞬间实现</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> height;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="transition-delay"><a href="#transition-delay" class="headerlink" title="transition-delay"></a>transition-delay</h2><p>同一行transition语句中，可以分别指定多个属性,height和width的变化是同时进行的，跟不指定它们没有差别</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> height, <span class="number">1s</span> width;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>让height先发生变化，等结束以后，再让width发生变化。实现这一点很容易，就是为width指定一个delay参数,width在1秒之后，再开始变化，也就是延迟（delay）1秒</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> height, <span class="number">1s</span> <span class="number">1s</span> width;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="transition-timing-function"><a href="#transition-timing-function" class="headerlink" title="transition-timing-function"></a>transition-timing-function</h2><p>transition的状态变化速度，默认不是匀速的，而是逐渐放慢，这叫做ease</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> ease;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除了ease以外，其他模式还包括</p>
<p>1.linear：匀速</p>
<p>2.ease-in：加速</p>
<p>3.ease-out：减速</p>
<p>4.cubic-bezier函数：自定义速度模式</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// cubic-bezier，可以使用工具网站来定制,会产生一个最后阶段放大过度、然后回缩的效果</span></div><div class="line">img&#123;</div><div class="line">    transition: <span class="number">1</span>s <span class="built_in">height</span> cubic-<span class="built_in">bezier</span>(<span class="number">.83</span>,<span class="number">.97</span>,<span class="number">.05</span>,<span class="number">1.44</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="transition的各项属性"><a href="#transition的各项属性" class="headerlink" title="transition的各项属性"></a>transition的各项属性</h2><p>transition的完整写法</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> <span class="number">1s</span> height ease;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这其实是一个简写形式，可以单独定义成各个属性</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition-property</span>: height;</div><div class="line">    <span class="attribute">transition-duration</span>: <span class="number">1s</span>;</div><div class="line">    <span class="attribute">transition-delay</span>: <span class="number">1s</span>;</div><div class="line">    <span class="attribute">transition-timing-function</span>: ease;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="CSS3Animation"><a href="#CSS3Animation" class="headerlink" title="CSS3Animation"></a>CSS3Animation</h1><h2 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h2><p>CSS Animation需要指定动画一个周期持续的时间，以及动画效果的名称</p>
<p>当鼠标悬停在div元素上时，会产生名为rainbow的动画效果，持续时间为1秒。为此，我们还需要用keyframes关键字，定义rainbow效果</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> rainbow;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> rainbow &#123;</div><div class="line">  0% &#123; <span class="attribute">background</span>: <span class="number">#c00</span>; &#125;</div><div class="line">  50% &#123; <span class="attribute">background</span>: orange; &#125;</div><div class="line">  100% &#123; <span class="attribute">background</span>: yellowgreen; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>默认情况下，动画只播放一次。加入infinite关键字，可以让动画无限次播放</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> rainbow infinite;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>指定动画具体播放的次数，比如3次</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> rainbow <span class="number">3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="animation-fill-mode"><a href="#animation-fill-mode" class="headerlink" title="animation-fill-mode"></a>animation-fill-mode</h2><p>动画结束以后，会立即从结束状态跳回到起始状态。forwards表示让动画停留在结束状态</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> rainbow forwards;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>animation-fill-mode还可以使用下列值</p>
<p>1.none：默认值，回到动画没开始时的状态</p>
<p>2.backwards：让动画回到第一帧的状态</p>
<p>3.both: 根据animation-direction（见后）轮流应用forwards和backwards规则</p>
<h2 id="animation-direction"><a href="#animation-direction" class="headerlink" title="animation-direction"></a>animation-direction</h2><p>动画循环播放时，每次都是从结束状态跳回到起始状态，再开始播放。animation-direction属性，可以改变这种行为</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@keyframes rainbow &#123;</div><div class="line">  0% &#123; <span class="attribute">background-color</span>: yellow; &#125;</div><div class="line">  100% &#123; <span class="attribute">background</span>: blue; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 默认情况是，animation-direction等于normal</span></div><div class="line"><span class="comment">// 可以等于取alternate、reverse、alternate-reverse等值</span></div><div class="line"><span class="selector-tag">div</span>:hover &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> rainbow <span class="number">3</span> normal;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="animation的各项属性"><a href="#animation的各项属性" class="headerlink" title="animation的各项属性"></a>animation的各项属性</h2><p>animation也是一个简写形式</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> <span class="number">1s</span> rainbow linear <span class="number">3</span> forwards normal;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是一个简写形式，可以分解成各个单独的属性</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation-name</span>: rainbow;</div><div class="line">  <span class="attribute">animation-duration</span>: <span class="number">1s</span>;</div><div class="line">  <span class="attribute">animation-timing-function</span>: linear;</div><div class="line">  <span class="attribute">animation-delay</span>: <span class="number">1s</span>;</div><div class="line">  <span class="attribute">animation-fill-mode</span>:forwards;</div><div class="line">  <span class="attribute">animation-direction</span>: normal;</div><div class="line">  <span class="attribute">animation-iteration-count</span>: <span class="number">3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="keyframes的写法"><a href="#keyframes的写法" class="headerlink" title="keyframes的写法"></a>keyframes的写法</h2><p>keyframes关键字用来定义动画的各个状态</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@keyframes</span> rainbow &#123;</div><div class="line">  <span class="selector-tag">0%</span> &#123; <span class="attribute">background</span>: <span class="number">#c00</span> &#125;</div><div class="line">  <span class="selector-tag">50%</span> &#123; <span class="attribute">background</span>: orange &#125;</div><div class="line">  <span class="selector-tag">100%</span> &#123; <span class="attribute">background</span>: yellowgreen &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 0%可以用from代表，100%可以用to代表，等价于</span></div><div class="line"><span class="keyword">@keyframes</span> rainbow &#123;</div><div class="line">  <span class="selector-tag">from</span> &#123; <span class="attribute">background</span>: <span class="number">#c00</span> &#125;</div><div class="line">  <span class="selector-tag">50%</span> &#123; <span class="attribute">background</span>: orange &#125;</div><div class="line">  <span class="selector-tag">to</span> &#123; <span class="attribute">background</span>: yellowgreen &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>浏览器从一个状态向另一个状态过渡，是平滑过渡。steps函数可以实现分步过渡</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> rainbow infinite <span class="built_in">steps</span>(10);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="animation-play-state"><a href="#animation-play-state" class="headerlink" title="animation-play-state"></a>animation-play-state</h2><p>动画播放过程中，会突然停止。这时，默认行为是跳回到动画的开始状态</p>
<p>如果想让动画保持突然终止时的状态，就要使用animation-play-state属性</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">animation</span>: spin <span class="number">1s</span> linear infinite;</div><div class="line">    <span class="attribute">animation-play-state</span>: paused;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation-play-state</span>: running;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS动画的两大组成部分：transition和animation&lt;/p&gt;
&lt;h1 id=&quot;CSS3Transition&quot;&gt;&lt;a href=&quot;#CSS3Transition&quot; class=&quot;headerlink&quot; title=&quot;CSS3Transition&quot;&gt;&lt;/a&gt;CSS3Transition&lt;/h1&gt;&lt;h2 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h2&gt;&lt;p&gt;当鼠标放置于缩略图之上,缩略图会迅速变大,缩略图的变大是瞬间实现的&lt;br&gt;
    
    </summary>
    
      <category term="HTML/CSS" scheme="http://yoursite.com/categories/HTML-CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>最好的学习方法</title>
    <link href="http://yoursite.com/2018/06/12/2018.6.12/"/>
    <id>http://yoursite.com/2018/06/12/2018.6.12/</id>
    <published>2018-06-12T04:40:15.000Z</published>
    <updated>2018-06-20T14:58:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几天看了连岳的《最好的学习方法》，此文观点我非常认同;既最好的学习方法是复述。看完一本书，你能把要点转述给听众，基本上就掌握了,好处如下<br><a id="more"></a><br>1、教别人的时候，自己的知识不仅不会失去，还可以更精进</p>
<p>2、可以上升到更重要的阶层。是的，任何一个群体最后都会形成等级。一个聪明的、愿意传授知识的人，一定会在上等阶层</p>
<p>3、以后在学习上更容易得到同学的帮助</p>
<p>我也一直在坚持这种学习方法,到今年6月为止，我写Blog已经满1.5年了，一共写了接近40篇,今后应该还会继续写下去;为什么要写Blog？如下七点</p>
<h1 id="学会记录技术知识及总结"><a href="#学会记录技术知识及总结" class="headerlink" title="学会记录技术知识及总结"></a>学会记录技术知识及总结</h1><p>我刚开始的时候也不知道该怎么写,经过摸索,慢慢知道如何将阅读过得技术知识重点记录及日常总结</p>
<h1 id="熟悉Blog工具"><a href="#熟悉Blog工具" class="headerlink" title="熟悉Blog工具"></a>熟悉Blog工具</h1><p>在搭建blog的时候就需要用到命令行及软件,这本身也是种学习</p>
<h1 id="便于更好地安排时间"><a href="#便于更好地安排时间" class="headerlink" title="便于更好地安排时间"></a>便于更好地安排时间</h1><p>写作Blog花费的时间比知识过脑子花的时间多几十倍。但是每天我们又有很多时间被无谓地浪费了。坚持写作Blog的过程，也是进行更好的时间安排的过程</p>
<h1 id="便于你了解自己是否可以长期做一件喜欢的事情"><a href="#便于你了解自己是否可以长期做一件喜欢的事情" class="headerlink" title="便于你了解自己是否可以长期做一件喜欢的事情"></a>便于你了解自己是否可以长期做一件喜欢的事情</h1><p>长期坚持一件事情后,你会变得自信,相信自己是一个自律的人,对以后再坚持另一件兴趣爱好同样能坚持下去</p>
<h1 id="便于体验Blog文化"><a href="#便于体验Blog文化" class="headerlink" title="便于体验Blog文化"></a>便于体验Blog文化</h1><p>Blog的世界有一种无形的礼仪、风格和用语;如果你是技术人员,无论是面试者还是被面试者,都可以blog通过表达自己及理解他人,减少筛选时间</p>
<h1 id="便于你形成和了解自我"><a href="#便于你形成和了解自我" class="headerlink" title="便于你形成和了解自我"></a>便于你形成和了解自我</h1><p>长期写作Blog最大的好处之一就是，写着写着，你的自我会变得越来越清晰。你最终会明白自己是一个什么样的人，以及自己热爱的又是什么东西</p>
<h1 id="帮助你找到读者"><a href="#帮助你找到读者" class="headerlink" title="帮助你找到读者"></a>帮助你找到读者</h1><p>与他人交流是生命最大的乐趣之一;写作Blog可以帮助我们更好地做到这一点</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天看了连岳的《最好的学习方法》，此文观点我非常认同;既最好的学习方法是复述。看完一本书，你能把要点转述给听众，基本上就掌握了,好处如下&lt;br&gt;
    
    </summary>
    
      <category term="lifes" scheme="http://yoursite.com/categories/lifes/"/>
    
    
      <category term="学习方法" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的new</title>
    <link href="http://yoursite.com/2018/06/09/2018.6.9/"/>
    <id>http://yoursite.com/2018/06/09/2018.6.9/</id>
    <published>2018-06-09T05:40:15.000Z</published>
    <updated>2018-06-10T15:16:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="制造一个程序员"><a href="#制造一个程序员" class="headerlink" title="制造一个程序员"></a>制造一个程序员</h1><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> 程序员 = &#123;</div><div class="line">  ID: <span class="number">1</span>, <span class="comment">// 用于区分每个程序员</span></div><div class="line">  程序员类型:<span class="string">"前端"</span>,</div><div class="line">  技能: JavaScript,</div><div class="line">  年龄: <span class="number">18</span>, </div><div class="line">  行走:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; <span class="comment">/*走俩步的代码*/</span>&#125;,</div><div class="line">  奔跑:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; <span class="comment">/*狂奔的代码*/</span>  &#125;,</div><div class="line">  死亡:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; <span class="comment">/*Go die*/</span>    &#125;</div><div class="line">&#125;</div><div class="line">清华.制造(程序员)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="制造一百个程序员"><a href="#制造一百个程序员" class="headerlink" title="制造一百个程序员"></a>制造一百个程序员</h1><h2 id="循环100次"><a href="#循环100次" class="headerlink" title="循环100次"></a>循环100次</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> 程序员们 = []</div><div class="line"><span class="keyword">var</span> 程序员</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</div><div class="line">    <span class="keyword">var</span> 程序员 = &#123;</div><div class="line">      ID: <span class="number">1</span>, <span class="comment">// 用于区分每个程序员</span></div><div class="line">      程序员类型:<span class="string">"前端"</span>,</div><div class="line">      技能: JavaScript,</div><div class="line">      年龄: <span class="number">18</span>, </div><div class="line">      行走:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; <span class="comment">/*走俩步的代码*/</span>&#125;,</div><div class="line">      奔跑:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; <span class="comment">/*狂奔的代码*/</span>  &#125;,</div><div class="line">      死亡:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; <span class="comment">/*Go die*/</span>    &#125;</div><div class="line">    &#125;</div><div class="line">  程序员们.push(程序员)</div><div class="line">&#125;</div><div class="line">清华.批量制造(程序员们)</div></pre></td></tr></table></figure>
<h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>创建一个「程序员原型」，然后让「程序员」的 <strong>proto</strong> 指向「程序员原型」</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> 程序员原型 = &#123;</div><div class="line">  程序员类型:<span class="string">"前端"</span>,</div><div class="line">  技能: JavaScript,</div><div class="line">  年龄: <span class="number">18</span>, </div><div class="line">  行走:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; <span class="comment">/*走俩步的代码*/</span>&#125;,</div><div class="line">  奔跑:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; <span class="comment">/*狂奔的代码*/</span>  &#125;,</div><div class="line">  死亡:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; <span class="comment">/*Go die*/</span>    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> 程序员们 = []</div><div class="line"><span class="keyword">var</span> 程序员</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</div><div class="line">  程序员 = &#123;</div><div class="line">    ID: i, <span class="comment">// ID 不能重复</span></div><div class="line">  &#125;</div><div class="line">  程序员.__proto__ = 程序员原型 </div><div class="line">  程序员们.push(程序员)</div><div class="line">&#125;</div><div class="line">清华.批量制造(程序员们)</div></pre></td></tr></table></figure>
<h2 id="优雅"><a href="#优雅" class="headerlink" title="优雅"></a>优雅</h2><p>创建一个程序员的代码分散在两个地方很不优雅，用一个函数把这两部分联系起来</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> 程序员(<span class="params">ID</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> 临时对象 = &#123;&#125;</div><div class="line">  临时对象.__proto__ = 程序员.原型</div><div class="line">  临时对象.ID = ID</div><div class="line">  <span class="keyword">return</span> 临时对象</div><div class="line">&#125;</div><div class="line"></div><div class="line">程序员.原型 = &#123;</div><div class="line">  程序员类型:<span class="string">"前端"</span>,</div><div class="line">  技能: JavaScript,</div><div class="line">  年龄: <span class="number">18</span>, </div><div class="line">  行走:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*走俩步的代码*/</span>&#125;,</div><div class="line">  奔跑:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*狂奔的代码*/</span>  &#125;,</div><div class="line">  死亡:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*Go die*/</span>    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 保存为文件：程序员.js</span></div><div class="line"></div><div class="line">引用「程序员」来创建程序员</div><div class="line"><span class="keyword">var</span> 程序员们 = []</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</div><div class="line">  程序员们.push(程序员(i))</div><div class="line">&#125;</div><div class="line">清华.批量制造(程序员们)</div></pre></td></tr></table></figure>
<h1 id="new的作用"><a href="#new的作用" class="headerlink" title="new的作用"></a>new的作用</h1><p>在程序员前面使用new关键字，少做三件事情</p>
<ul>
<li>不用创建临时对象，因为 new 会帮你做</li>
<li>不用绑定原型，因为 new 会帮你做</li>
<li>不用 return 临时对象，因为 new 会帮你做</li>
</ul>
<h1 id="new的改进"><a href="#new的改进" class="headerlink" title="new的改进"></a>new的改进</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> 程序员(<span class="params">ID</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.ID = ID</div><div class="line">&#125;</div><div class="line">程序员.prototype = &#123;</div><div class="line">  程序员类型:<span class="string">"前端"</span>,</div><div class="line">  技能: JavaScript,</div><div class="line">  年龄: <span class="number">18</span>, </div><div class="line">  行走:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*走俩步的代码*/</span>&#125;,</div><div class="line">  奔跑:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*狂奔的代码*/</span>  &#125;,</div><div class="line">  死亡:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*Go die*/</span>    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 保存为文件：程序员.js</span></div><div class="line"></div><div class="line">然后是创建程序员（加了一个 <span class="keyword">new</span> 关键字）</div><div class="line"><span class="keyword">var</span> 程序员们 = []</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</div><div class="line">  程序员们.push(<span class="keyword">new</span> 程序员(i))</div><div class="line">&#125;</div><div class="line"></div><div class="line">程序员.批量制造(程序员们)</div></pre></td></tr></table></figure>
<h1 id="constructor属性"><a href="#constructor属性" class="headerlink" title="constructor属性"></a>constructor属性</h1><p>new 操作为了记录「临时对象是由哪个函数创建的」，所以预先给「程序员.prototype」加了一个constructor属性</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">程序员.proto<span class="keyword">type</span> = &#123;</div><div class="line">  constructor: 程序员</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重新对「士兵.prototype」赋值，那么这个 constructor 属性,所以应该这么写</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">程序员.proto<span class="keyword">type</span>.程序员类型 = "前端"</div><div class="line">程序员.proto<span class="keyword">type</span>.技能 = "<span class="type">JavaScript</span>"</div><div class="line">程序员.proto<span class="keyword">type</span>.年龄 = 18</div><div class="line">程序员.proto<span class="keyword">type</span>.行走 = function()&#123; /*走俩步的代码*/&#125;</div><div class="line">程序员.proto<span class="keyword">type</span>.奔跑 = function()&#123; /*狂奔的代码*/  &#125;</div><div class="line">程序员.proto<span class="keyword">type</span>.死亡 = function()&#123; /*<span class="type">Go</span> die*/    &#125;</div></pre></td></tr></table></figure>
<p>给 constructor 重新赋值</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">程序员.prototype = &#123;</div><div class="line">  constructor: 程序员,</div><div class="line">  程序员类型:<span class="string">"前端"</span>,</div><div class="line">  技能: JavaScript,</div><div class="line">  年龄: <span class="number">18</span>, </div><div class="line">  行走:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; <span class="comment">/*走俩步的代码*/</span>&#125;,</div><div class="line">  奔跑:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; <span class="comment">/*狂奔的代码*/</span>  &#125;,</div><div class="line">  死亡:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; <span class="comment">/*Go die*/</span>    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;制造一个程序员&quot;&gt;&lt;a href=&quot;#制造一个程序员&quot; class=&quot;headerlink&quot; title=&quot;制造一个程序员&quot;&gt;&lt;/a&gt;制造一个程序员&lt;/h1&gt;&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; 程序员 = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ID: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 用于区分每个程序员&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  程序员类型:&lt;span class=&quot;string&quot;&gt;&quot;前端&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  技能: JavaScript,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  年龄: &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  行走:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;/*走俩步的代码*/&lt;/span&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  奔跑:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;/*狂奔的代码*/&lt;/span&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  死亡:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;/*Go die*/&lt;/span&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;清华.制造(程序员)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的this值</title>
    <link href="http://yoursite.com/2018/06/08/2018.6.8/"/>
    <id>http://yoursite.com/2018/06/08/2018.6.8/</id>
    <published>2018-06-08T05:40:15.000Z</published>
    <updated>2018-06-07T16:38:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="this面试题"><a href="#this面试题" class="headerlink" title="this面试题"></a>this面试题</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> obj = &#123;</div><div class="line">  foo: function()&#123;</div><div class="line">    console.log(this)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">var</span> bar = obj<span class="selector-class">.foo</span></div><div class="line">obj.foo() <span class="comment">// 打印出的 this 是 obj</span></div><div class="line"><span class="function"><span class="title">bar</span><span class="params">()</span></span> <span class="comment">// 打印出的 this 是 window</span></div></pre></td></tr></table></figure>
<a id="more"></a> 
<h1 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h1><p>JS（ES5）里面有三种函数调用形式</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span><span class="params">(p1, p2)</span> </span></div><div class="line">obj.<span class="keyword">func</span>(p1, p2)</div><div class="line"><span class="function"><span class="keyword">func</span>.<span class="title">call</span><span class="params">(context, p1, p2)</span></span></div></pre></td></tr></table></figure>
<p>第三种调用形式，才是正常调用形式</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span>.<span class="title">call</span><span class="params">(context, p1, p2)</span></span></div></pre></td></tr></table></figure>
<p>其他两种等价地变为 call 形式</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span><span class="params">(p1, p2)</span> 等价于</span></div><div class="line"><span class="function"><span class="keyword">func</span>.<span class="title">call</span><span class="params">(undefined, p1, p2)</span></span></div><div class="line"></div><div class="line">obj.<span class="keyword">func</span>(p1, p2) 等价于</div><div class="line">obj.<span class="keyword">func</span>.<span class="built_in">call</span>(obj, p1, p2)</div></pre></td></tr></table></figure>
<blockquote>
<p>this一个函数时传的context</p>
</blockquote>
<h1 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h1><p>传的 context 就 null 或者 undefined，那么 window 对象就是默认的 context,打印结果是window</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function <span class="function"><span class="keyword">func</span><span class="params">()</span>&#123;</span></div><div class="line">  console.<span class="built_in">log</span>(this)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span></div><div class="line"></div><div class="line">// 等价于</div><div class="line">function <span class="function"><span class="keyword">func</span><span class="params">()</span>&#123;</span></div><div class="line">  console.<span class="built_in">log</span>(this)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span>.<span class="title">call</span><span class="params">(undefined)</span> // 可以简写为 <span class="title">func</span>.<span class="title">call</span><span class="params">()</span></span></div></pre></td></tr></table></figure>
<p>希望这里的 this 不是 window,修改为</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span>.<span class="title">call</span><span class="params">(obj)</span></span> <span class="comment">// 那么里面的 this 就是 obj 对象了</span></div></pre></td></tr></table></figure>
<h1 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h1><p>this 就是 obj</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</div><div class="line">  &#125;</div><div class="line">&#125; </div><div class="line">obj.foo() </div><div class="line"></div><div class="line"><span class="comment">// 按照「转换代码」，我们将 obj.foo() 转换为</span></div><div class="line">obj.foo.call(obj)</div></pre></td></tr></table></figure>
<h1 id="面试题答案"><a href="#面试题答案" class="headerlink" title="面试题答案"></a>面试题答案</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> obj = &#123;</div><div class="line">  foo: function()&#123;</div><div class="line">    console.log(this)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">var</span> bar = obj<span class="selector-class">.foo</span></div><div class="line">obj.foo() <span class="comment">// 转换为 obj.foo.call(obj)，this 就是 obj</span></div><div class="line"><span class="function"><span class="title">bar</span><span class="params">()</span></span> </div><div class="line"><span class="comment">// 转换为 bar.call()</span></div><div class="line"><span class="comment">// 由于没有传 context</span></div><div class="line"><span class="comment">// 所以 this 就是 undefined</span></div><div class="line"><span class="comment">// 最后浏览器给你一个默认的 this —— window 对象</span></div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>this 就是你 call 一个函数时，传入的第一个参数</li>
<li>如果你的函数调用形式不是 call 形式，请按照「转换代码」将其转换为 call 形式</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;this面试题&quot;&gt;&lt;a href=&quot;#this面试题&quot; class=&quot;headerlink&quot; title=&quot;this面试题&quot;&gt;&lt;/a&gt;this面试题&lt;/h1&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  foo: function()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(this)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; bar = obj&lt;span class=&quot;selector-class&quot;&gt;.foo&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;obj.foo() &lt;span class=&quot;comment&quot;&gt;// 打印出的 this 是 obj&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 打印出的 this 是 window&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>前端MVC设计模式</title>
    <link href="http://yoursite.com/2018/06/07/2018.6.7/"/>
    <id>http://yoursite.com/2018/06/07/2018.6.7/</id>
    <published>2018-06-07T05:40:15.000Z</published>
    <updated>2018-06-07T13:27:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h1><p>一个页面分为两部分，浏览器上面的工作交给前端做，服务器上面的工作交给后端做</p>
<h1 id="页面开发流程"><a href="#页面开发流程" class="headerlink" title="页面开发流程"></a>页面开发流程</h1><a id="more"></a>
<h2 id="浏览器第一次加载的页面只是一个占位符"><a href="#浏览器第一次加载的页面只是一个占位符" class="headerlink" title="浏览器第一次加载的页面只是一个占位符"></a>浏览器第一次加载的页面只是一个占位符</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">app</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="前端将其他-HTML-和从服务器获取的数据填到占位符里"><a href="#前端将其他-HTML-和从服务器获取的数据填到占位符里" class="headerlink" title="前端将其他 HTML 和从服务器获取的数据填到占位符里"></a>前端将其他 HTML 和从服务器获取的数据填到占位符里</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$.get(<span class="string">'/user/1'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>)</span>&#123;</div><div class="line">  template = (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line">  )</div><div class="line">  content = template.replace(<span class="string">'&#123;&#123; name &#125;&#125;'</span>, user.name)</div><div class="line">  $app.html(content)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="用户提交数据时，前端用-AJAX-提交异步请求"><a href="#用户提交数据时，前端用-AJAX-提交异步请求" class="headerlink" title="用户提交数据时，前端用 AJAX 提交异步请求"></a>用户提交数据时，前端用 AJAX 提交异步请求</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$form.on(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">  $.post(<span class="string">'/user/1'</span>, $form.serialize()).then(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    alert(<span class="string">'提交成功'</span>)</div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h1 id="前端MVC模式"><a href="#前端MVC模式" class="headerlink" title="前端MVC模式"></a>前端MVC模式</h1><h2 id="Model-封装数据操作"><a href="#Model-封装数据操作" class="headerlink" title="Model-封装数据操作"></a>Model-封装数据操作</h2><p>对用户的增删改成其实都是异步请求,数据相关的操作就都放到这个 model 上</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> userModel = &#123;</div><div class="line">  <span class="attr">find</span>: <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> $.get(<span class="string">'/user/'</span>+id).then(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>)</span>&#123;</div><div class="line">      $.extend(userModel, user)</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">save</span>: <span class="function"><span class="keyword">function</span>(<span class="params">id, data</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> $.post(<span class="string">'/user/'</span>+id, data)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 用户数据的校验</span></div><div class="line">userModel.validate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.name === <span class="string">''</span>) <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.password === <span class="string">''</span>) <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="View-视图渲染"><a href="#View-视图渲染" class="headerlink" title="View-视图渲染"></a>View-视图渲染</h2><p>前端的视图也是 HTML,将数据与 HTML 混合起来</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">content</span> = template.replace(<span class="string">'&#123;&#123; name &#125;&#125;'</span>, user.name)</div></pre></td></tr></table></figure>
<p>前端们模板引擎，如 Handlebars.js、React</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">content = templateEngine( template, <span class="keyword">user</span> <span class="title">)</span></div></pre></td></tr></table></figure>
<h2 id="Controller-控制器"><a href="#Controller-控制器" class="headerlink" title="Controller-控制器"></a>Controller-控制器</h2><p>将 content 塞到页面里</p>
<p>浏览器事件监听 - 用户点击视图后去更新数据</p>
<p>数据事件监听 - user 数据更新后去更新视图</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">controller = &#123;</div><div class="line">  model: userModel,</div><div class="line">  element: $app,</div><div class="line">  <span class="keyword">template</span>: '&lt;h1&gt;&#123;&#123; name &#125;&#125; &lt;/h1&gt;........',</div><div class="line">  events: &#123;</div><div class="line">    'click button': 'onButtonClick',</div><div class="line">    'submit form' : 'onSubmitForm'</div><div class="line">  &#125;,</div><div class="line">  modelEvents: &#123;</div><div class="line">    'update': 'onModelUpdate',</div><div class="line">    'remove': 'onModelRemove'</div><div class="line">  &#125;,</div><div class="line">  init: function()&#123;</div><div class="line">    <span class="keyword">var</span> content = templateEngine(this.<span class="keyword">template</span>, userModel)</div><div class="line">    this.element.append($app)</div><div class="line">    </div><div class="line">    // 遍历 events 并绑定对应的方法</div><div class="line">    // 遍历 modelEvents 并绑定对应的方法</div><div class="line">  &#125;,</div><div class="line">  onButtonClick: function()<span class="meta">&#123;...&#125;</span>,</div><div class="line">  onSubmitForm: function()<span class="meta">&#123;...&#125;</span>,</div><div class="line">  onModelUpdate: function()<span class="meta">&#123;...&#125;</span>,</div><div class="line">  onModelRemove: function()<span class="meta">&#123;...&#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>控制器作用</p>
<ul>
<li><p>Controller 监听 Model 变化，Model 一变，Controller 就会去更新 View</p>
</li>
<li><p>Controller 监听用户交互，用户点了提交或修改按钮，Controller 就要去更新 Model</p>
</li>
</ul>
<h1 id="Router-路由"><a href="#Router-路由" class="headerlink" title="Router-路由"></a>Router-路由</h1><p>只是在每个页面局部使用 MVC，那么就不需要路由</p>
<p>整站是一个单页面，那么就要处理 URL 的变化</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前后端分离&quot;&gt;&lt;a href=&quot;#前后端分离&quot; class=&quot;headerlink&quot; title=&quot;前后端分离&quot;&gt;&lt;/a&gt;前后端分离&lt;/h1&gt;&lt;p&gt;一个页面分为两部分，浏览器上面的工作交给前端做，服务器上面的工作交给后端做&lt;/p&gt;
&lt;h1 id=&quot;页面开发流程&quot;&gt;&lt;a href=&quot;#页面开发流程&quot; class=&quot;headerlink&quot; title=&quot;页面开发流程&quot;&gt;&lt;/a&gt;页面开发流程&lt;/h1&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="MVC" scheme="http://yoursite.com/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript实现异步</title>
    <link href="http://yoursite.com/2018/06/04/2018.6.4/"/>
    <id>http://yoursite.com/2018/06/04/2018.6.4/</id>
    <published>2018-06-04T05:40:15.000Z</published>
    <updated>2018-06-07T13:27:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript的执行环境是单线程,只能一次完成一件任务</p>
<p>坏处: 浏览器无响应、JavaScript代码死循环</p>
<p>Javascript语言将任务的执行模式分成两种：同步和异步<br><a id="more"></a><br>解决方法:异步</p>
<p>异步:每一个任务有一个或多个回调函数,前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异步的</p>
<h1 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h1><p>普通函数f1和f2,后者等待前者的执行结果</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">f1</span><span class="params">()</span></span></div><div class="line"><span class="function"><span class="title">f2</span><span class="params">()</span></span></div></pre></td></tr></table></figure>
<p>改写f1，把f2写成f1的回调函数,两个函数异步执行</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span><span class="params">(callback)</span> </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// f1的任务代码</span></div><div class="line">        callback();</div><div class="line">    &#125;, <span class="number">1000</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">f1(f2);</div></pre></td></tr></table></figure>
<p>优点:简单、容易理解和部署，缺点:不利于代码的阅读和维护</p>
<h1 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h1><p>任务的执行不取决于代码的顺序，而取决于某个事件是否发生</p>
<p>为f1绑定一个事件,当f1发生done事件，就执行f2</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f1.<span class="literal">on</span>(<span class="string">'done'</span>, f2);</div></pre></td></tr></table></figure>
<p>f1.trigger(‘done’)表示，执行完成后，立即触发done事件，从而开始执行f2</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span><span class="params">()</span> </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// f1的任务代码</span></div><div class="line">        f1.trigger(<span class="string">'done'</span>);</div><div class="line">    &#125;, <span class="number">1000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>优点:比较容易理解，可以绑定多个事件,有利于实现模块化，缺点：整个程序都要变成事件驱动型，运行流程会变得很不清晰</p>
<h1 id="发布-订阅"><a href="#发布-订阅" class="headerlink" title="发布/订阅"></a>发布/订阅</h1><p>发布一个信号，其他任务向信号中心订阅这个信号，从而知道什么时候自己可以开始执行。这就叫做发布/订阅模式</p>
<p>f2向”信号中心”jQuery订阅”done”信号</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">jQuery.subscribe</span>(<span class="string">"done"</span>, <span class="built_in">f2</span>)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>jQuery.publish(“done”)的意思是，f1执行完成后，向”信号中心”jQuery发布”done”信号，从而引发f2的执行</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span><span class="params">()</span> </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// f1的任务代码</span></div><div class="line">        jQuery.publish(<span class="string">"done"</span>);</div><div class="line">    &#125;, <span class="number">1000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>f2完成执行后，也可以取消订阅</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">jQuery.unsubscribe</span>(<span class="string">"done"</span>, <span class="built_in">f2</span>)<span class="comment">;</span></div></pre></td></tr></table></figure>
<h1 id="Promises对象"><a href="#Promises对象" class="headerlink" title="Promises对象"></a>Promises对象</h1><p>每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数</p>
<p>f1的回调函数f2</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">f1</span>()<span class="selector-class">.then</span>(f2);</div></pre></td></tr></table></figure>
<p>f1要进行如下改写</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> dfd = $.Deferred();</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// f1的任务代码</span></div><div class="line">        dfd.resolve();</div><div class="line">    &#125;, <span class="number">500</span>);</div><div class="line">    <span class="keyword">return</span> dfd.promise;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>指定多个回调函数</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">f1</span>()<span class="selector-class">.then</span>(f2)<span class="selector-class">.then</span>(f3);</div></pre></td></tr></table></figure>
<p>指定发生错误时的回调函数</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">f1</span>()<span class="selector-class">.then</span>(f2)<span class="selector-class">.fail</span>(f3);</div></pre></td></tr></table></figure>
<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><h2 id="同步的写法"><a href="#同步的写法" class="headerlink" title="同步的写法"></a>同步的写法</h2><p>taskC 一定要等 taskB 执行完了才能执行，这就是同步</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">function taskB()&#123;</div><div class="line">  <span class="selector-tag">var</span> response = $.ajax(&#123;</div><div class="line">    url:<span class="string">"/data.json"</span>,</div><div class="line">    async: false <span class="comment">// 注意这里 async 为 false，表示是同步</span></div><div class="line">  &#125;)</div><div class="line">  return response <span class="comment">// 十秒钟后，返回 response</span></div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="function"><span class="title">taskA</span><span class="params">()</span></span></div><div class="line"><span class="function"><span class="title">taskB</span><span class="params">()</span></span></div><div class="line"><span class="function"><span class="title">taskC</span><span class="params">()</span></span></div><div class="line"></div><div class="line">执行顺序</div><div class="line">A -&gt; B -&gt; AJAX 请求 -&gt; C ---------------------------</div></pre></td></tr></table></figure>
<h2 id="异步的写法"><a href="#异步的写法" class="headerlink" title="异步的写法"></a>异步的写法</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">function taskB()&#123;</div><div class="line">  <span class="selector-tag">var</span> result = $.ajax(&#123;</div><div class="line">    url:<span class="string">"/data.json"</span>,</div><div class="line">    async: true <span class="comment">// 异步</span></div><div class="line">  &#125;)</div><div class="line">  return result <span class="comment">// 一定要注意，现在的 result 不是上面的 response</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="title">taskA</span><span class="params">()</span></span></div><div class="line"><span class="function"><span class="title">taskB</span><span class="params">()</span></span></div><div class="line"><span class="function"><span class="title">taskC</span><span class="params">()</span></span></div><div class="line"></div><div class="line">执行顺序</div><div class="line">A -&gt; B -&gt; C ---------------------------------------</div><div class="line">       -&gt; AJAX 请求 --------------------------------</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript的执行环境是单线程,只能一次完成一件任务&lt;/p&gt;
&lt;p&gt;坏处: 浏览器无响应、JavaScript代码死循环&lt;/p&gt;
&lt;p&gt;Javascript语言将任务的执行模式分成两种：同步和异步&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的10个设计缺陷</title>
    <link href="http://yoursite.com/2018/06/02/2018.6.2-1/"/>
    <id>http://yoursite.com/2018/06/02/2018.6.2-1/</id>
    <published>2018-06-01T18:40:15.000Z</published>
    <updated>2018-06-02T06:17:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>为什么现在的前端学JavaScript要学那么多的版本,并且一年一大更,半年一小更,还要用到很多js的库、模块化工具</p>
<p>就是因为JavaScript的设计缺陷</p>
<p>这篇主要是参考《JavaScript语言精髓》（JavaScript: The Good Parts）,总结的非常到位<br><a id="more"></a></p>
<h1 id="大型程序不宜"><a href="#大型程序不宜" class="headerlink" title="大型程序不宜"></a>大型程序不宜</h1><p>Javascript没有名称空间（namespace），很难模块化</p>
<h1 id="标准库小"><a href="#标准库小" class="headerlink" title="标准库小"></a>标准库小</h1><p>Javascript提供的标准函数库非常小，只能完成一些基本操作</p>
<h1 id="null和undefined"><a href="#null和undefined" class="headerlink" title="null和undefined"></a>null和undefined</h1><p>传说是道格拉斯喝醉酒的时候,重复了发明了这两个数据类型,null和undefined可以认为是一样的</p>
<h1 id="全局变量神出鬼没"><a href="#全局变量神出鬼没" class="headerlink" title="全局变量神出鬼没"></a>全局变量神出鬼没</h1><p>函数内部可以生成全局变量</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">1</span><span class="comment">;</span></div><div class="line">(<span class="name">function</span>()&#123;</div><div class="line">    b=2<span class="comment">;</span></div><div class="line">    alert(<span class="name">a</span>)<span class="comment">;</span></div><div class="line">&#125;)()<span class="comment">; // 1</span></div><div class="line">alert(<span class="name">b</span>)<span class="comment">; //2</span></div></pre></td></tr></table></figure>
<h1 id="行尾分号自动加"><a href="#行尾分号自动加" class="headerlink" title="行尾分号自动加"></a>行尾分号自动加</h1><p>Javascript的所有语句，都可以不用以分号结尾</p>
<p>比如，下面这个函数根本无法达到预期的结果，返回值不是一个对象，而是undefined</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">    &#123;</div><div class="line">        i=<span class="number">1</span></div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原因是解释器自动在return语句后面加上了分号</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">    &#123;</div><div class="line">        i=<span class="number">1</span></div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="加号运算符"><a href="#加号运算符" class="headerlink" title="加号运算符"></a>加号运算符</h1><p>+号作为运算符，有两个含义，可以表示数字与数字的和，也可以表示字符与字符的连接</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">alert</span>(<span class="number">1</span>+<span class="number">10</span>); <span class="comment">// 11</span></div><div class="line"><span class="selector-tag">alert</span>(<span class="string">"1"</span>+<span class="string">"10"</span>); <span class="comment">// 110</span></div></pre></td></tr></table></figure>
<h1 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h1><p>NaN是一种数字，表示超出了解释器的极限。它有一些很奇怪的特性</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">NaN</span> === NaN; //<span class="literal">false</span></div></pre></td></tr></table></figure>
<h1 id="数组和对象的区分"><a href="#数组和对象的区分" class="headerlink" title="数组和对象的区分"></a>数组和对象的区分</h1><p>数组也是对象,要确认对象是不是数组比较麻烦</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( arr &amp;&amp; </div><div class="line"><span class="keyword">typeof</span> arr === <span class="string">'object'</span> &amp;&amp;</div><div class="line"><span class="keyword">typeof</span> arr.length === <span class="string">'number'</span> &amp;&amp;</div><div class="line">!arr.propertyIsEnumerable(<span class="string">'length'</span>))&#123;</div><div class="line">    alert(<span class="string">"arr is an array"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="和"><a href="#和" class="headerlink" title="== 和 ==="></a>== 和 ===</h1><p>==会自动转换数据类型,得到的直觉不符合常理</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="string">""</span> == <span class="string">"0"</span> <span class="comment">// false</span></div><div class="line"><span class="number">0</span> == <span class="string">""</span> <span class="comment">// true</span></div><div class="line"><span class="number">0</span> == <span class="string">"0"</span> <span class="comment">// true</span></div><div class="line"><span class="literal">false</span> == <span class="string">"false"</span> <span class="comment">// false</span></div><div class="line"><span class="literal">false</span> == <span class="string">"0"</span> <span class="comment">// true</span></div><div class="line"><span class="literal">false</span> == <span class="literal">undefined</span> <span class="comment">// false</span></div><div class="line"><span class="literal">false</span> == <span class="literal">null</span> <span class="comment">// false</span></div><div class="line"><span class="literal">null</span> == <span class="literal">undefined</span> <span class="comment">// true</span></div><div class="line"><span class="string">" \t\r\n"</span> == <span class="number">0</span> <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h1 id="基本类型的包装对象"><a href="#基本类型的包装对象" class="headerlink" title="基本类型的包装对象"></a>基本类型的包装对象</h1><p>Javascript有三种基本数据类型：字符串、数字和布尔值。它们都有相应的建构函数，可以生成字符串对象、数字对象和布尔值对象</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="type">Boolean</span>(<span class="literal">false</span>);</div><div class="line"><span class="keyword">new</span> <span class="type">Number</span>(<span class="number">1234</span>);</div><div class="line"><span class="keyword">new</span> <span class="type">String</span>(<span class="string">"Hello World"</span>);</div></pre></td></tr></table></figure>
<p>与基本数据类型对应的对象类型，作用很小，造成的混淆却很大</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alert( <span class="keyword">typeof</span> <span class="number">1234</span>); <span class="comment">// number</span></div><div class="line">alert( <span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1234</span>)); <span class="comment">// object</span></div></pre></td></tr></table></figure>
<blockquote>
<p>虽然JavaScript缺陷很多,但是ES6及很多库已经很多解决了这些缺陷的问题,完善了不少。并且JavaScript是浏览器唯一的编程语言,将来一定是随着时代发展不断进步</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为什么现在的前端学JavaScript要学那么多的版本,并且一年一大更,半年一小更,还要用到很多js的库、模块化工具&lt;/p&gt;
&lt;p&gt;就是因为JavaScript的设计缺陷&lt;/p&gt;
&lt;p&gt;这篇主要是参考《JavaScript语言精髓》（JavaScript: The Good Parts）,总结的非常到位&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>【总结】2018年4&amp;5月份个人总结</title>
    <link href="http://yoursite.com/2018/06/01/2018.4&amp;5summary/"/>
    <id>http://yoursite.com/2018/06/01/2018.4&amp;5summary/</id>
    <published>2018-05-31T16:40:15.000Z</published>
    <updated>2018-06-27T16:39:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>白驹过隙,似水流年,不及时写月总结,你不知道时间过得有多快</p>
<p>4、5月份我度过了人生最难熬的阶段,发生很多很多的事情，这也造成了提笔难言的窘境</p>
<p>虽然人生在世会有种种不如意,但你仍可以在幸福与不幸中做出选择<br><a id="more"></a><br>在你最痛苦的阶段果然还是亲情和友情,很感动,远在北京老妹安慰、堂哥的劝说及爸妈的激励让我很快走出来,汕头7位兄弟及深圳同学,2个2个轮流请假从汕头到广州来找我玩</p>
<p>度过后从痛苦转为焦虑,从未发现自身很多bug(衣着、生活、理想、三观),正有意识的在往好的方向改进</p>
<p>请假回家有点多,家里房子重建6层,得到明年6月份完工,爸妈占时住旧房,养了2只猫,一个叫但丁，一只叫五一</p>
<p>汕头节奏实在太慢,睡了足足1天都丝毫没负罪感;在广州一个晚上没看书学习就有深深地负罪,争取以后每个月都要写总结,阿尼陀佛</p>
<h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><p>1.Vue.js: 中文官网看了遍,还没进行实践及踩坑,果然学得快忘得也快</p>
<p>2.ES6: 看完阮一峰的ES6教程,吸收80%,感觉不难,下次多用</p>
<p>3.C#: 公司用C#做后台,粗略看了菜鸟教程一遍,本来想深入系统学,问了阿里的朋友,被骂了一顿,批得体无完肤,说是C#碰都不要碰,没公司用了,所以简单学了下语法及模板,看得懂公司代码就行</p>
<p>4.PHP: 一直想深入学PHP,最近把近2个月要学的内容路线资料整理完毕,争取早日从PHP切入后台的学习,虽然前端只需要了解后台,但是深入后台绝对是硬实力,往全栈方向是我的规划并进入大公司的前提</p>
<p>5.专利: 买了专利法律知识、相关法律知识和专利代理实务。其中前两门是客观题，每门考试都是30道单选和70道多选，满分分别是150和100分，这两门的成绩加起来超过150分就算是法律考试通过；专利代理实务是主观题，一般有3—4道撰写题，考的就是专利申请、审查、复审、无效宣告等程序中的文件撰写，这一门满分150，及格线是90分;争取2个月赶紧学习专利理论基础</p>
<p>6.电商: 准备从运营进入,再学SEO方面知识</p>
<h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><p>1.把海尔小家电运营平台的前端业务代码实现看完,能快速定位bug并修改业务代码</p>
<p>2.把工作用到的前端插件玩了一遍,包括ligerUi、validation-engine、layer、distpicker.js、ztree、plupload</p>
<p>3.内部海尔插件进行修改、增加新功能</p>
<p>4.公司运维走了,占时没招到满意的,我占时交接了运维的工作,看了文档后学了点电脑系统修复,软件破解,vpn上网,打印机的驱动等等(打杂的),还有内部一些系统的操作,服务器的报账流程及合同申请流程的操作</p>
<p>5.海尔小家电运营平台增加自营产品管理产品导入,供应商外部link及客户管理功能</p>
<p>6.熟悉前端工作流工作,节省了不少时间和提高了效率</p>
<h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>1.从城中村搬到老小区住,安静清闲,太适合我的生活了,扔了旧的东西,买了很多新的家具,买了几件衣服,1双鞋子</p>
<p>2.有段时间压力太大失眠,导致内分泌有点失调,好久没长痘,体验了把青春期的骚动~,接下来不熬夜,调整心态做好自己</p>
<p>3.经常回家,买了点改善生活的用品给爸妈,毕竟还要住旧房1年,接了宽带,他们一天没上微信看到我们在群活跃都会打电话来问,尽量不让他们担心</p>
<p>4.思想从在广州奋斗4、5年回汕头发展转为在广州定居,争取家里今年建好房子然后在广州买房,35到40岁有资金流动再回汕头养老,照顾得到父母,毕竟离不开汕头的空气和美食</p>
<p>5.毕业到现在瘦了10多斤,接下来多吃,然后运动,再吃夜宵,今年目标胖10斤</p>
<p>6.世界这么大,我想到处走走。我17年都一直宅家里学技术,这个月去了白云山爬到山顶、大夫山骑单车、红砖厂,争取1年把广州走遍,然后去外省玩</p>
<p>7.认识了工作上几位比较好的同事,一位已经离职,最近老是在想待人接物的礼仪、言辞表达的自我训练,本身我性格比较内向,都是把自己定位为一个技术人员,但还是想努力提高人际这方面</p>
<p>8.图书馆看的大部分都是文学的书,很崇拜会写诗文采好的人-“前方你的身影,开出花一朵”</p>
<p>9.买了茶桌、餐桌、餐具、茶具</p>
<p>10.厨艺有长进,起码喜欢吃的那几样潮汕小菜美滋滋,阿萌</p>
<p>11.感觉自己写字太正,买了几本楷书字帖,每晚睡前练下,坚持1年看下成效</p>
<p>12.迷上摄影照片,查了下支付宝钱包,一入单反毁一生,镜头是个无底洞,打消念头,但是也打消不了欣赏的心</p>
<h1 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h1><h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><p>《Head First HTML与CSS》200%、《CSS权威指南》100%、《JavaScript高级程序设计》100%、《正见》300%、《ES6标准入门》80%、《JavaScript+DOM编程艺术》100%、《JavaScript语言精粹》40%、《锋利的jQuery》100%、《黑客与画家》100%、《你不知道的JavaScript(上)》60%、《软件随想录》100%</p>
<h2 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h2><p>《后来的我们》、《星际穿越》、《夏洛特烦恼》、《星球大战》、《速度与激情》、《猩球崛起》</p>
<h2 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h2><p>《人生哲理》、《晓说》、《罗辑思维》</p>
<h1 id="绩效评估"><a href="#绩效评估" class="headerlink" title="绩效评估"></a>绩效评估</h1><table>
<thead>
<tr>
<th>学习</th>
<th>工作</th>
<th>生活</th>
<th>阅读</th>
<th>总分</th>
</tr>
</thead>
<tbody>
<tr>
<td>5</td>
<td>7</td>
<td>7</td>
<td>6</td>
<td>25</td>
</tr>
</tbody>
</table>
<h1 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h1><p>坚持跑步,达到20公里、徒步一次从化、学PHP、电商、专利</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;白驹过隙,似水流年,不及时写月总结,你不知道时间过得有多快&lt;/p&gt;
&lt;p&gt;4、5月份我度过了人生最难熬的阶段,发生很多很多的事情，这也造成了提笔难言的窘境&lt;/p&gt;
&lt;p&gt;虽然人生在世会有种种不如意,但你仍可以在幸福与不幸中做出选择&lt;br&gt;
    
    </summary>
    
      <category term="lifes" scheme="http://yoursite.com/categories/lifes/"/>
    
    
      <category term="个人总结" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Node.js后端服务器框架</title>
    <link href="http://yoursite.com/2018/05/11/node-server/"/>
    <id>http://yoursite.com/2018/05/11/node-server/</id>
    <published>2018-05-11T14:16:41.000Z</published>
    <updated>2018-07-01T06:34:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><a id="more"></a>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">本地开启服务器</div><div class="line">根据路径mock数据</div><div class="line">读取静态文件</div><div class="line">支持模板引擎渲染</div></pre></td></tr></table></figure>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">bin // 主函数</div><div class="line">	www</div><div class="line"></div><div class="line">lib // 公共库(自己)</div><div class="line">	express.js </div><div class="line">	mime.js</div><div class="line"></div><div class="line">node_modules //各种模块依赖</div><div class="line">	...</div><div class="line"></div><div class="line">static //静态文件</div><div class="line">	css</div><div class="line">	imgs</div><div class="line">	js</div><div class="line">	index.html</div><div class="line"></div><div class="line">views //视图层,渲染模板</div><div class="line">	about.html</div><div class="line"></div><div class="line">app.js //引入各种模块依赖及设置路由</div><div class="line"></div><div class="line">package.json //npm初始化文件</div></pre></td></tr></table></figure>
<h2 id="www"><a href="#www" class="headerlink" title="www"></a>www</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env node</div><div class="line"></div><div class="line"></div><div class="line">var app = require('../app')</div><div class="line">var http = require('http')</div><div class="line">console.log(app)</div><div class="line"></div><div class="line">http.createServer(app).listen(8080)</div><div class="line">console.log('open http://localhost:8080')</div></pre></td></tr></table></figure>
<h2 id="express-js"><a href="#express-js" class="headerlink" title="express.js"></a>express.js</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line">var url = require('url')</div><div class="line">var fs = require('fs')</div><div class="line">var path = require('path')</div><div class="line">var ejs = require('ejs')</div><div class="line"></div><div class="line"></div><div class="line">function express() &#123;</div><div class="line"></div><div class="line">  var tasks = []</div><div class="line"></div><div class="line">  var app = function(req, res)&#123;</div><div class="line"></div><div class="line">    addQuery(req, res)</div><div class="line">    addSend(req, res)</div><div class="line">    addRender(req, res, app)</div><div class="line"></div><div class="line">    var i = 0</div><div class="line"></div><div class="line">    function next() &#123;</div><div class="line">      var task = tasks[i++]</div><div class="line">      if(!task) &#123;</div><div class="line">        return</div><div class="line">      &#125;</div><div class="line">      if(task.routePath === null || url.parse(req.url, true).pathname === task.routePath)&#123;</div><div class="line">        task.middleWare(req, res, next)</div><div class="line">      &#125;else&#123;</div><div class="line">        next()</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    next()</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  app.use = function(routePath, middleWare)&#123;</div><div class="line">    if(typeof routePath === 'function') &#123;</div><div class="line">      middleWare = routePath</div><div class="line">      routePath = null</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    tasks.push(&#123;</div><div class="line">      routePath: routePath,</div><div class="line">      middleWare: middleWare</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  app.data = &#123;&#125;</div><div class="line"></div><div class="line">  app.set = function(key, value)&#123;</div><div class="line">    app.data[key] = value</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  app.get = function(key)&#123;</div><div class="line">    return app.data[key]</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return app</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">express.static = function(staticPath)&#123;</div><div class="line"></div><div class="line">  return function(req, res, next)&#123;</div><div class="line">    var pathObj = url.parse(req.url, true)</div><div class="line">    var filePath = path.resolve(staticPath, pathObj.pathname.substr(1))</div><div class="line">    console.log(filePath)</div><div class="line">    fs.readFile(filePath,'binary', function(err, content)&#123;</div><div class="line">      if(err)&#123;</div><div class="line">        next()</div><div class="line">      &#125;else &#123;</div><div class="line">        res.writeHead(200, 'Ok')</div><div class="line">        res.write(content, 'binary')</div><div class="line">        res.end()         </div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">module.exports = express</div><div class="line"></div><div class="line"></div><div class="line">function addQuery(req, res)&#123;</div><div class="line">  var pathObj = url.parse(req.url, true)</div><div class="line">  req.query = pathObj.query</div><div class="line">&#125;</div><div class="line"></div><div class="line">function addSend(req, res)&#123;</div><div class="line">  res.send = function(toSend)&#123;</div><div class="line">    if(typeof toSend === 'string')&#123;</div><div class="line">      res.end(toSend)</div><div class="line">    &#125;</div><div class="line">    if(typeof toSend === 'object')&#123;</div><div class="line">      res.end(JSON.stringify(toSend))</div><div class="line">    &#125;</div><div class="line">    if(typeof toSend === 'number')&#123;</div><div class="line">      res.writeHead(toSend, arguments[1])</div><div class="line">      res.end()</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function addRender(req, res, app)&#123;</div><div class="line"></div><div class="line">  res.render = function(tplPath, data) &#123;</div><div class="line"></div><div class="line">    var fullpath = path.join(app.get('views'), tplPath) </div><div class="line">    ejs.renderFile(fullpath, data, &#123;&#125;, function(err, str)&#123;</div><div class="line">      if(err)&#123;</div><div class="line">        res.writeHead(503, 'System error')</div><div class="line">        res.end() </div><div class="line">      &#125;else &#123;</div><div class="line">        res.setHeader('content-type', 'text/html')</div><div class="line">        res.writeHead(200, 'Ok')</div><div class="line">        res.write(str)</div><div class="line">        res.end()         </div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/a.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"imgs/logo.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/search"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"search"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/b.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="about"><a href="#about" class="headerlink" title="about"></a>about</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">  &lt;title&gt;about&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">  &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;</div><div class="line">  &lt;dl&gt;</div><div class="line">    &lt;dt&gt;人物:&lt;/dt&gt;</div><div class="line">    &lt;dd&gt;&lt;%= people %&gt;&lt;/dd&gt;</div><div class="line">    &lt;dt&gt;日期:&lt;/dt&gt;</div><div class="line">    &lt;dd&gt;&lt;%= date %&gt;&lt;/dd&gt;</div><div class="line">    &lt;dt&gt;我的博客&lt;/dt&gt;</div><div class="line">    &lt;dd&gt;&lt;a href=&quot;&lt;%= intro %&gt;&quot;&gt;点击查看&lt;/a&gt;&lt;/dd&gt;</div><div class="line">  &lt;/dl&gt;</div><div class="line">  </div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">var express = require('./lib/express')</div><div class="line">var path = require('path')</div><div class="line">var bodyParser = require('body-parser')</div><div class="line">var urlencodedParser = bodyParser.urlencoded(&#123; extended: false &#125;)</div><div class="line">var mimeType = require('./lib/mime')</div><div class="line"></div><div class="line"></div><div class="line">var app = express()</div><div class="line"></div><div class="line"></div><div class="line">app.use(urlencodedParser)</div><div class="line">app.use(mimeType)</div><div class="line">app.use(express.static(path.join(__dirname, 'static')))</div><div class="line">app.set('views', path.join(__dirname, 'views'))</div><div class="line"></div><div class="line"></div><div class="line">app.use(function(req, res, next) &#123;</div><div class="line">  console.log('middleware 1')</div><div class="line">  next()</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.use(function(req, res, next) &#123;</div><div class="line">  console.log('middleware 12')</div><div class="line">  next()</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line">app.use('/hello', function(req, res)&#123;</div><div class="line">  console.log('/hello..')</div><div class="line">  res.send('hello world')</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.use('/getWeather', function(req, res)&#123;</div><div class="line">  res.send(&#123;url:'/getWeather', city: req.query.city&#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.use('/search', function(req, res)&#123;</div><div class="line">  res.send(req.body)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.use('/about', function(req, res)&#123;</div><div class="line">  res.render('about.html', &#123;</div><div class="line">    title: '头部',</div><div class="line">    people: '张扬',</div><div class="line">    date: '2018-1-1',</div><div class="line">    intro: 'zy343134464@github.io'</div><div class="line">  &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.use(function(req, res)&#123;</div><div class="line">  res.send(404, 'haha Not Found')</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line">module.exports = app</div></pre></td></tr></table></figure>
<h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  "name": "step5",</div><div class="line">  "version": "1.0.0",</div><div class="line">  "main": "index.js",</div><div class="line">  "license": "MIT",</div><div class="line">  "dependencies": &#123;</div><div class="line">    "body-parser": "^1.17.2",</div><div class="line">    "ejs": "^2.5.6",</div><div class="line">    "mime-types": "^2.1.15"</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作用&lt;/h2&gt;
    
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>jquery源代码</title>
    <link href="http://yoursite.com/2018/04/05/jquerydemo/"/>
    <id>http://yoursite.com/2018/04/05/jquerydemo/</id>
    <published>2018-04-05T14:16:41.000Z</published>
    <updated>2018-07-01T06:42:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jQuery源码设计"><a href="#jQuery源码设计" class="headerlink" title="jQuery源码设计"></a>jQuery源码设计</h1><p>看完jquery源代码,开始自己脑补了api的实现</p>
<a id="more"></a>
<h2 id="jQuery的DOM代码需求设计"><a href="#jQuery的DOM代码需求设计" class="headerlink" title="jQuery的DOM代码需求设计"></a>jQuery的DOM代码需求设计</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">let <span class="keyword">items</span> = $(<span class="string">'li'</span>)</div><div class="line"></div><div class="line"><span class="keyword">items</span>.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>()&#123;</span></div><div class="line">  console.<span class="built_in">log</span>(<span class="string">'click'</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">items</span>.addClass(<span class="string">'hi'</span>).removeClass(<span class="string">'error'</span>)</div><div class="line"></div><div class="line"><span class="keyword">items</span>.<span class="keyword">text</span>(<span class="string">'你好'</span>)</div><div class="line"></div><div class="line"><span class="keyword">items</span>.<span class="built_in">get</span>(<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="number">1.</span> <span class="keyword">item</span> 没有 siblings 方法</div><div class="line"><span class="number">2.</span> 需求要有 xxx.siblings 方法</div><div class="line"><span class="number">3.</span> $<span class="keyword">item</span> = $(<span class="keyword">item</span>)   $<span class="keyword">item</span>.siblings() 返回 <span class="keyword">item</span> 的兄弟</div><div class="line"></div><div class="line"><span class="number">1.</span> $<span class="keyword">item</span>.siblings() 没有 addClass 方法</div><div class="line"><span class="number">2.</span> 需求要有  $<span class="keyword">item</span>.siblings().addClass</div><div class="line"><span class="number">3.</span> $<span class="keyword">item</span>.siblings() 的结果是 $(<span class="string">'li'</span>) 类似的东西</div><div class="line"></div><div class="line">$<span class="keyword">item</span>.siblings().removeClass(<span class="string">'active'</span>).<span class="keyword">end</span>()</div><div class="line">  .addClass(<span class="string">'active'</span>)</div></pre></td></tr></table></figure>
<h2 id="jQuery的DOM源代码设计实现"><a href="#jQuery的DOM源代码设计实现" class="headerlink" title="jQuery的DOM源代码设计实现"></a>jQuery的DOM源代码设计实现</h2><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// $ 接收一个字符串或元素或元素列表</span></div><div class="line"><span class="comment">// 返回一个新的数组</span></div><div class="line"><span class="comment">// 这个数组有  on  addClass removeClass ... API</span></div><div class="line">window.$ = <span class="function"><span class="keyword">function</span><span class="params">(selectorOrNode)</span></span>&#123;</div><div class="line">    <span class="keyword">let</span> <span class="keyword">array</span> = []</div><div class="line">    <span class="keyword">if</span>(typeof selectorOrNode === <span class="string">'string'</span>)&#123;</div><div class="line">        <span class="keyword">let</span> items = document.querySelectorAll(selectorOrNode)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;items.length; i++)&#123;</div><div class="line">            <span class="keyword">array</span>.push(items[i])</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(selectorOrNode <span class="keyword">instanceof</span> Element)&#123;</div><div class="line">        <span class="keyword">array</span>.push(selectorOrNode)</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(selectorOrNode <span class="keyword">instanceof</span> <span class="keyword">Array</span>)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;selectorOrNode.length; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(!(selectorOrNode[i] <span class="keyword">instanceof</span> Element))&#123;</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">array</span>.push(selectorOrNode[i])</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="keyword">array</span>.on = <span class="function"><span class="keyword">function</span><span class="params">(eventType, fn)</span></span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="keyword">array</span>.length;i++)&#123;</div><div class="line">            <span class="keyword">array</span>[i].addEventListener(eventType, fn)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">array</span>.addClass = <span class="function"><span class="keyword">function</span><span class="params">(className)</span></span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="keyword">array</span>.length;i++)&#123;</div><div class="line">            <span class="keyword">array</span>[i].classList.add(className)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">array</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">array</span>.removeClass = <span class="function"><span class="keyword">function</span><span class="params">(className)</span></span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="keyword">array</span>.length;i++)&#123;</div><div class="line">            <span class="keyword">array</span>[i].classList.remove(className)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">array</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">array</span>.text = <span class="function"><span class="keyword">function</span><span class="params">(value)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(value !== undefined)&#123;</div><div class="line">          <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="keyword">array</span>.length;i++)&#123;</div><div class="line">            <span class="keyword">array</span>[i].textContent = value</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">array</span>  </div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">let</span> result = []</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="keyword">array</span>.length;i++)&#123;</div><div class="line">              result.push(<span class="keyword">array</span>[i].textContent)</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> result</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">array</span>.get = <span class="function"><span class="keyword">function</span><span class="params">(index)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">array</span>[index]</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">array</span>.end = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">array</span>.previousSelection</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">array</span>.siblings = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">let</span> children = <span class="keyword">array</span>[<span class="number">0</span>].parentNode.children</div><div class="line">        <span class="keyword">let</span> resultArray = []</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;children.length; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(children[i] !== <span class="keyword">array</span>[<span class="number">0</span>])&#123;</div><div class="line">                resultArray.push(children[i])</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> items = $(resultArray)</div><div class="line">        items.previousSelection = <span class="keyword">array</span></div><div class="line">        <span class="keyword">return</span> items</div><div class="line">                                                           </div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">array</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="jQuery的BOM代码需求设计"><a href="#jQuery的BOM代码需求设计" class="headerlink" title="jQuery的BOM代码需求设计"></a>jQuery的BOM代码需求设计</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">http://xxx.com/index.html?a=1</div><div class="line">$.bom.search('a')  </div><div class="line"></div><div class="line">$.bom.search('a', 'xxx')</div><div class="line">http://xxx.com/index.html?a=xxx</div></pre></td></tr></table></figure>
<h2 id="jQuery的BOM源代码设计实现"><a href="#jQuery的BOM源代码设计实现" class="headerlink" title="jQuery的BOM源代码设计实现"></a>jQuery的BOM源代码设计实现</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">window.$ = function()&#123;</div><div class="line">  let array = []</div><div class="line">  return array</div><div class="line">&#125;</div><div class="line"></div><div class="line">$.bom = &#123;</div><div class="line">  openAtCenter: function(width, height, url)&#123;</div><div class="line">    window.open(url, '_blank', `</div><div class="line">      width=$&#123;width&#125;px,height=$&#123;height&#125;px,</div><div class="line">      screenX=$&#123;screen.width/2 - width/2&#125;px,</div><div class="line">      screenY=$&#123;screen.height/2 - height/2&#125;px</div><div class="line">    `)</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  search: function(name, value)&#123;</div><div class="line">    let searchAll = function()&#123;</div><div class="line">      let result = &#123;&#125;</div><div class="line">      let search = window.location.search</div><div class="line">      // 去掉?</div><div class="line">      if(search[0] === '?')&#123;</div><div class="line">        search = search.slice(1)</div><div class="line">      &#125;</div><div class="line">      // 用 &amp; 分隔成数组</div><div class="line">      let searchArray = search.split('&amp;')</div><div class="line">      // 遍历数组</div><div class="line">      for(var i =0;i<span class="tag">&lt;<span class="name">searchArray.length;</span> <span class="attr">i</span>++)&#123;</span></div><div class="line">        <span class="attr">let</span> <span class="attr">parts</span> = <span class="string">searchArray[i].split(</span>'=<span class="string">')</span></div><div class="line">        result[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1] || '')</div><div class="line">      &#125;</div><div class="line">      <span class="attr">return</span> <span class="attr">result</span></div><div class="line">    &#125;</div><div class="line">    <span class="attr">let</span> <span class="attr">result</span> = <span class="string">searchAll()</span></div><div class="line">    <span class="attr">if</span>(<span class="attr">value</span> === <span class="string">undefined)&#123;</span></div><div class="line">      <span class="attr">return</span> <span class="attr">result</span>[<span class="attr">name</span>]</div><div class="line">    &#125;<span class="attr">else</span>&#123;</div><div class="line">      <span class="attr">if</span>(<span class="attr">result</span>[<span class="attr">name</span>] === <span class="string">undefined)&#123;</span></div><div class="line">        <span class="attr">location.search</span> += `&amp;$&#123;<span class="attr">encodeURIComponent</span>(<span class="attr">name</span>)&#125;=<span class="string">$&#123;encodeURIComponent(value)&#125;</span>`</div><div class="line">      &#125;<span class="attr">else</span>&#123;</div><div class="line">        <span class="attr">result</span>[<span class="attr">name</span>] = <span class="string">encodeURIComponent(value)</span></div><div class="line">        <span class="attr">let</span> <span class="attr">newSearch</span> = <span class="string">'?'</span></div><div class="line">        <span class="attr">for</span>(<span class="attr">let</span> <span class="attr">key</span> <span class="attr">in</span> <span class="attr">result</span>)&#123;</div><div class="line">          <span class="attr">newSearch</span> += `$&#123;<span class="attr">encodeURIComponent</span>(<span class="attr">key</span>)&#125;=<span class="string">$&#123;encodeURIComponent(result[key])&#125;&amp;</span>`</div><div class="line">        &#125;</div><div class="line">        <span class="attr">location.search</span> = <span class="string">newSearch</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;jQuery源码设计&quot;&gt;&lt;a href=&quot;#jQuery源码设计&quot; class=&quot;headerlink&quot; title=&quot;jQuery源码设计&quot;&gt;&lt;/a&gt;jQuery源码设计&lt;/h1&gt;&lt;p&gt;看完jquery源代码,开始自己脑补了api的实现&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>【总结】2017年个人年度总结</title>
    <link href="http://yoursite.com/2018/03/11/2017summary/"/>
    <id>http://yoursite.com/2018/03/11/2017summary/</id>
    <published>2018-03-10T16:40:15.000Z</published>
    <updated>2018-06-27T16:39:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>人生如寄,遇见的只是旅人</p>
<p>2017年过得比任何一年都快,每天都沉浸在代码”柳暗花明又一村”的喜悦中,并很幸运的转到另一种职业规划中</p>
<p>这一年经历有点多,要叙述一个复杂的故事,从简单的时间轴是最好的方法<br><a id="more"></a></p>
<h1 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h1><p>1月初,辞职后立马到厦门去玩了几天</p>
<p>1月份中,辞职后解脱沉寂内心许久的痛苦,内心完全释怀,看着小胖子推荐《CSS权威指南》和《JavaScript高级程序设计》,demo一遍一遍练习,踽踽独行，时感孤单</p>
<p>2月份中旬过年,躲在家里撸代码,只参加少量同学聚会</p>
<p>3月份,小胖子给我准备了四个项目完成后,3个月的日夜技术积累,从一个完全零基础的小白,到独立完成4个简单的练手项目</p>
<p>4月份,准备简历,到广州面试,拿到3个offer,成功入职</p>
<p>5月份,开始接触实际工作的项目,不断复习不断实践,不断踩坑不断填坑</p>
<p>于是,2017年就这样过去了,学无止境,起点比别人晚,那么我就不断地自我提升,不断学习,赶上大家节奏</p>
<h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><p>HTML/CSS/JavaScript: 跟着犀牛书一遍遍练习,跟着百度技术学院做了一个个demo;学习jQuery，BootStrap并利用所学模仿制作了简历</p>
<p>工作上: angular框架写后台管理业务,用gulp工具打包代码,node.js搭建前端服务器</p>
<p>班后: 学习了命令行、git、vue、webpack、node.js</p>
<p>写了二十多篇基础博客</p>
<h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>涉猎it编程的书</p>
<p>从喜欢看娱乐节目转美国电影及传记电影</p>
<p>戒除游戏,真浪费时间和精力,去TM的王者荣耀去荣耀去</p>
<p>开始自己煮饭及锻炼身体及内心开始变得强大,努力成为一个超级个体</p>
<h1 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h1><h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><p>把前端入门书籍其它杂七杂八的书都看了一遍,接下来准备复习巩固,不下50本,不再一一列出</p>
<h2 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h2><p>电影院最新出的都看过(浪费钱)</p>
<h2 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h2><p>FM102.5及各种乱七八杂(古典音乐、哲学等等),不再一一列出</p>
<h1 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h1><p>1.徒步</p>
<p>2.把公司业务都看完</p>
<p>3.入股大学同学初创的公司(深圳)提供建站技术支持</p>
<p>4.兼职专利代理(机械),和汕头朋友一起考专利代理人并接单提供专利服务(这行竞争不多,来钱比编程还可怕)</p>
<p>5.保持学习的劲头,坚持每天运动,提高表达能力及沟通能力</p>
<p>6.学后端PHP兼职整个建站服务,玩下C#、Java</p>
<p>7.坚持一周三天广州图书馆看it、电商、专利、文学书籍</p>
<p>8.坚持开始写新进阶技术文章迭代之前的基础技术文章,每天写博客总结,每月月度博客总结自己</p>
<p>9.不要立flag、不要立flag、不要立flag,行动起来</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>自信提升30%效率</li>
<li>适度深挖知识点提升1.5倍效率</li>
<li>坚信半年抵得上3年【130(天)3(小时)1.5(倍效率)+50(天)7.5(小时)1.5(倍效率) =  1148&gt; 360(天)3(年)1(每天1个小时) = 1080】</li>
<li>时间越碎片化</li>
<li>多关注当前新闻、历史故事、未来科技</li>
<li>钱少花在吃,花在实用改善生活品</li>
<li>多买书多看书</li>
<li>多走出去外面</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人生如寄,遇见的只是旅人&lt;/p&gt;
&lt;p&gt;2017年过得比任何一年都快,每天都沉浸在代码”柳暗花明又一村”的喜悦中,并很幸运的转到另一种职业规划中&lt;/p&gt;
&lt;p&gt;这一年经历有点多,要叙述一个复杂的故事,从简单的时间轴是最好的方法&lt;br&gt;
    
    </summary>
    
      <category term="lifes" scheme="http://yoursite.com/categories/lifes/"/>
    
    
      <category term="个人总结" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
