<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[移动响应式]]></title>
      <url>%2F2017%2F06%2F04%2Fphone%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[vue.js]]></title>
      <url>%2F2017%2F05%2F25%2Fvue%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[boostrap基础]]></title>
      <url>%2F2017%2F05%2F15%2Fboostrap%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[webpack]]></title>
      <url>%2F2017%2F05%2F07%2Fwebpack%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[less]]></title>
      <url>%2F2017%2F05%2F05%2Fless%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[css3基础]]></title>
      <url>%2F2017%2F04%2F30%2Fcss3%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[html5基础]]></title>
      <url>%2F2017%2F04%2F27%2Fhtml5%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[node.js、npm、gulp、brower-sync]]></title>
      <url>%2F2017%2F04%2F25%2Fgulp%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[模块化基础]]></title>
      <url>%2F2017%2F04%2F18%2Fmodular%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[HTTP基础]]></title>
      <url>%2F2017%2F04%2F15%2Fhttp%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[jQuery造轮子]]></title>
      <url>%2F2017%2F04%2F13%2Fjq%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[原生js造轮子]]></title>
      <url>%2F2017%2F04%2F10%2Fjs%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[面向对象基础]]></title>
      <url>%2F2017%2F04%2F08%2Fobject%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[后端基础]]></title>
      <url>%2F2017%2F04%2F05%2Fnode%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[jQuery基础]]></title>
      <url>%2F2017%2F03%2F30%2Fjquery%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[JavaScript基础]]></title>
      <url>%2F2017%2F03%2F25%2Fjavascript%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[CSS基础]]></title>
      <url>%2F2017%2F02%2F25%2Fcss%2F</url>
      <content type="text"><![CDATA[CSS基础 CSS全称是Cascading Style Sheets,层叠样式表 引用CSS内联样式1&lt;h1 style="font-size:16px;color:blue"&gt;&lt;/h1&gt; 内部样式1234567&lt;style type="text/css"&gt; h1&#123; font-size:16px; color:blue; &#125;&lt;/style&gt;&lt;h1&gt;你好&lt;/h1&gt; 外部样式第一种方式1&lt;link rel="stylesheet" type="text/css" href="index.css"&gt;&lt;/style&gt; 第二种方式1234&lt;style&gt; @import url("index.css"); @import "index.css";&lt;/style&gt; 浏览器F12 查看浏览器默认样式 查看设置样式 查看html结构 CSS书写规范&gt;&gt;CSS书写规范 CSS选择器CSS常见选择器 基础选择器 组合选择器 属性选择器 伪类选择器 伪元素选择器 基础选择器 选择器 名称/含义 * 通用选择器,匹配页面任何元素 #id id选择器,匹配特定id的元素 .class 类选择器,匹配class特定类的元素 element 标签选择器 ps123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style type="text/css"&gt; *&#123; margin:0; padding:0; &#125; span#identified &#123; background-color: DodgerBlue; &#125; span.classy &#123; background-color: yellow; &#125; span&#123; background-color: red; color: #fff; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;span id="identified"&gt;Here's a span with some text.&lt;/span&gt; &lt;span&gt;Here's another.&lt;/span&gt;&lt;/br&gt; &lt;span class="classy"&gt;Here's a span with some text.&lt;/span&gt; &lt;span&gt;Here's another.&lt;/span&gt;&lt;/br&gt; &lt;span&gt;这里是由 span 包裹的一些文字.&lt;/span&gt; &lt;p&gt;这里是由p包裹的一些文字&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 组合选择器 选择器 名称/含义 E,F 多元素选择器,用,分隔,同时匹配元素E或元素F E F 后代选择器,用空格分隔,匹配E元素所有的后代元素F(不只是子元素、子元素向下递归) E&gt;F 子元素选择器,用&gt;分隔,匹配E元素所有直接子元素 E+F 直接相邻选择器,匹配E元素之后的相邻的同级元素F E~F 普通相邻选择器,匹配E元素之后的同级元素F(无论直接相邻与否) .class1.class2 id和class选择器和选择器连写的时候中间没有分隔符,.和#本身充当分隔符的元素 .element#id id和class选择器和选择器连写的时候中间没有分隔符,.和#本身充当分隔符的元素 ps12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; h1,h4&#123; background-color: yellow; &#125; div p&#123; background-color: green; &#125; h2&gt;p&#123; background-color: blue; &#125; h5+p&#123; background-color: red; &#125; h6~ul&#123; background-color: orange; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;欢迎来到我的主页&lt;/h1&gt; &lt;h4&gt;我最好的朋友是蜡笔小新&lt;/h4&gt; &lt;div&gt; &lt;p&gt;我是唐老鸭&lt;/p&gt; &lt;p&gt;我住在日本&lt;/p&gt; &lt;/div&gt; &lt;h2&gt; &lt;p&gt;我是米老鼠&lt;/p&gt; &lt;h3&gt; &lt;p&gt;我住在日本&lt;/p&gt; &lt;/h3&gt; &lt;/h2&gt; &lt;h5&gt; &lt;p&gt;我是皮卡丘&lt;/p&gt; &lt;/h5&gt; &lt;p&gt;我住在广东&lt;/p&gt; &lt;p&gt;我住在东京&lt;/p&gt; &lt;h6&gt;第一段&lt;/h6&gt; &lt;ul&gt; &lt;li&gt;咖啡&lt;/li&gt; &lt;li&gt;牛奶&lt;/li&gt; &lt;/ul&gt; &lt;h6&gt;另一段&lt;/h6&gt; &lt;ul&gt; &lt;li&gt;咖啡&lt;/li&gt; &lt;li&gt;牛奶&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; 属性选择器 选择器 名称/含义 E[attr] 匹配所有具有属性attr的元素，div[id]就能取到所有有id属性的div E[attr = value] 匹配属性attr值为value的元素，div[id=test],匹配id=test的div E[attr ~= value] 匹配所有属性attr具有多个空格分隔、其中一个值等于value的元素 E[attr \= value] 匹配所有属性attr为value或是以value-为前缀开头的元素 E[attr ^= value] 匹配属性attr的值以value开头的元素 E[attr $= value] 匹配属性attr的值以value结尾的元素 E[attr *= value] 匹配属性attr的值包含value的元素 ps12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; span[lang]&#123; font-weight:bold; &#125; span[lang="pt"]&#123; color:green; &#125; span[lang~="en-us"]&#123; color:blue; &#125; span[lang|="zh"]&#123; color:red; &#125; a[href^="#"]&#123; background-color: gold; &#125; a[href$=".cn"]&#123; background-color: red; &#125; a[href*="cnn"]&#123; background-color: #ccc; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="hello-example"&gt; &lt;a href="http://example.com"&gt;English:&lt;/a&gt; &lt;span lang="en-us en-gb en-au en-nz"&gt;Hello world!&lt;/span&gt; &lt;/div&gt; &lt;div class="hello-example"&gt; &lt;a href="#portuguese"&gt;Pottuguese:&lt;/a&gt; &lt;span lang="pt"&gt;Ola Mundo!&lt;/span&gt; &lt;/div&gt; &lt;div class="hello-example"&gt; &lt;a href="http://example.cn"&gt;Chinese (Simplified):&lt;/a&gt; &lt;span lang="zh-CN"&gt;世界您好!&lt;/span&gt; &lt;/div&gt; &lt;div class="hello-example"&gt; &lt;a href="http://example.cnn"&gt;Chinese(Traditional):&lt;/a&gt; &lt;span lang="zh-TW"&gt;世界您好!&lt;/span&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 伪类选择器 状态是动态变化,当一个元素达到一个特定状态的时候,它得到一个伪类的样式,它是基于文档之外的抽象,不会改变DOM的内容,只是插入一些修饰类的元素,对用户可见,对DOM不可见 选择器 名称/含义 E:first-child 匹配元素E的第一个子元素 E:link 匹配所有未被点击的链接 E:visited 匹配所有已被点击的链接 E:active 匹配鼠标已经其上按下、还没有释放的E元素 E:hover 匹配鼠标悬停其上的E元素 E:focus 匹配获得当前焦点的E元素 E:lang(c) 匹配lang属性等于c的E元素 E:enabled 匹配表单中可用的元素 E:disabled 匹配表单中禁用的元素 E:checked 匹配表单中被选中的radio或checkbox元素 E::selection 匹配用户当前选中的元素 E:root 匹配文档的根元素，对于HTML文档，就是HTML元素 E:nth-child(n) 匹配其父元素的第n个子元素，第一个编号为1 E:nth-last-child(n) 匹配其父元素的倒数第n个子元素，第一个编号为1 E:nth-of-type(n) 与:nth-child()作用类似，但是仅匹配使用同种标签的元素 E:nth-last-of-type(n) 与:nth-last-child() 作用类似，但是仅匹配使用同种标签的元素 E:last-child 匹配父元素的最后一个子元素，等同于:nth-last-child(1) E:first-of-type 匹配父元素下使用同种标签的第一个子元素，等同于:nth-of-type(1) E:last-of-type 匹配父元素下使用同种标签的最后一个子元素，等同于:nth-last-of-type(1) E:only-child 匹配父元素下仅有的一个子元素，等同于:first-child:last-child或 :nth-child(1):nth-last-child(1) E:only-of-type 匹配父元素下使用同种标签的唯一一个子元素，等同于:first-of-type:last-of-type或 :nth-of-type(1):nth-last-of-type(1) E:empty 匹配一个不包含任何子元素的元素，文本节点也被看作子元素 E:not(selector) 匹配不符合当前选择器的任何元素 n的取值 1，2，3，4，5 2n+1, 2n, 4n-1 odd, even ps12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; span:first-child&#123; background-color: lime; &#125; a:link&#123; color: lightblue; &#125; a:visited&#123; color: green; &#125; a:active&#123; color:red; &#125; a:hover&#123; color:blue; &#125; .first-name:focus&#123; color:red; &#125; div:lang(fr)&#123; background-color: yellow; &#125; input:enabled&#123; color:blue; &#125; input:disabled&#123; color:red; &#125; //只有opera支持checked input[type="radio"]:checked&#123; color:green; &#125; ::selection&#123; color:red; &#125; :root&#123; background-color: #ccc; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;span&gt;This span is limed!&lt;/span&gt; &lt;span&gt;This span is not.:&lt;/span&gt; &lt;/div&gt; &lt;a href="http://www.baidu.com"&gt;link&lt;/a&gt;&lt;/br&gt; &lt;input class="first-name" type="text" value="I'll be red when focused"&gt; &lt;div lang="fr"&gt;我是fr&lt;/div&gt; &lt;form action="#"&gt; &lt;label for="FirstField"&gt;First field(enabled):&lt;/label&gt; &lt;input type="text" id="FirstField" value="Lorem"&gt;&lt;/br&gt; &lt;label for="SecondField"&gt;Second field(disabled):&lt;/label&gt; &lt;input type="text" id="SecondField" value="Ipasum" disabled&gt;&lt;/br&gt; &lt;input type="radio" checked="checked" value="male" name="gender" /&gt;Male&lt;br&gt; &lt;input type="radio" value="female" name="gender" /&gt; Female&lt;br&gt; &lt;input type="checkbox" checked="checked" value="Bike" /&gt; I have a bike&lt;br&gt; &lt;input type="checkbox" value="Car" /&gt; I have a car &lt;/form&gt; &lt;h5&gt;请试着选取页面上的文本&lt;/h4&gt;&lt;/body&gt;&lt;/html&gt; ps123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; *&#123; margin:0; padding:0; &#125; p:nth-child(2)&#123; background-color: red; &#125; p:nth-last-child(2)&#123; background-color: green; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h4&gt;这是标题&lt;/h4&gt; &lt;p&gt;第一个段落&lt;/p&gt; &lt;p&gt;第二个段落&lt;/p&gt; &lt;p&gt;第三个段落&lt;/p&gt; &lt;p&gt;第四个段落&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; ps1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; *&#123; margin:0; padding:0; &#125; p:nth-of-type(2)&#123; background-color: red; &#125; p:last-child&#123; background-color: green; &#125; p:first-of-type&#123; background-color: yellow; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h4&gt;这是标题&lt;/h4&gt; &lt;p&gt;第一个段落&lt;/p&gt; &lt;p&gt;第二个段落&lt;/p&gt; &lt;p&gt;第三个段落&lt;/p&gt; &lt;p&gt;第四个段落&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; ps12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; *&#123; margin:0; padding:0; &#125; p:last-of-type&#123; background-color: red; &#125; h4:only-child&#123; background-color: blue; &#125; h3:only-of-type&#123; background-color: green; &#125; h2:empty&#123; height: 30px; background-color: yellow; &#125; h6:not(.classy)&#123; background-color: gray; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h4&gt;这是标题&lt;/h4&gt; &lt;p&gt;第一个段落&lt;/p&gt; &lt;p&gt;第二个段落&lt;/p&gt; &lt;p&gt;第三个段落&lt;/p&gt; &lt;p&gt;第四个段落&lt;/p&gt; &lt;h4&gt;这是结尾&lt;/h4&gt; &lt;div&gt; &lt;h4&gt;这是一个段落&lt;/h4&gt; &lt;/div&gt; &lt;div&gt; &lt;span&gt;这是一个span&lt;/span&gt; &lt;h4&gt;这是一个段落&lt;/h4&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;这是一个段落&lt;/h3&gt; &lt;/div&gt; &lt;div&gt; &lt;span&gt;这是一个span&lt;/span&gt; &lt;h3&gt;这是一个段落&lt;/h3&gt; &lt;/div&gt; &lt;div&gt; &lt;h2&gt;&lt;/h2&gt; &lt;h2&gt;这是一个段落&lt;/h2&gt; &lt;/div&gt; &lt;h6&gt;你好&lt;/h6&gt; &lt;h6 class="classx"&gt;你好&lt;/h6&gt; &lt;h6 class="classy"&gt;你好&lt;/h6&gt;&lt;/body&gt;&lt;/html&gt; 伪元素选择器 伪元素用于向某些选择器设置特殊效果,如果需要加新元素加以标识就选择伪元素 选择器 含义 E::first-line 匹配E元素内容的第一行 E::first-letter 匹配E元素内容的第一个字母 E::before 在E元素之前插入生成的内容 E::after 在E元素之后插入生成的内容 ps1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; h4::first-line&#123; background-color: yellow; &#125; h4::first-letter&#123; background-color: red; &#125; p::before&#123; content:"台词:" &#125; p::after&#123; content:"-结尾" &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;我是标题&lt;/h1&gt; &lt;h4&gt;曾经在奥巴马身边做过保镖的特工约翰·威尔斯最近就在网上分享了一些奥巴马生活的点滴。在2007年3月至2008年11月期间，威尔斯曾经在奥巴马身边工作。当时，美国特勤局为每位总统候选人都指派了特工负责安保，在大选季期间跟着候选人到处出行，在人群扎堆的地方保护他们的安全。奥巴马当时还是参议员，威尔斯透露，特勤局为他增加了保护人手，因为他是黑人，受到的安全威胁更多。&lt;/h4&gt; &lt;p&gt;我是唐老鸭&lt;/p&gt; &lt;p&gt;我住在日本&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 选择器的优先级优先级从高到低依次为 在属性后面使用!important,会覆盖页面内任何位置定义的元素样式 作为style属性写在元素标签上的内联样式 id选择器 类选择器 伪类选择器 属性选择器 标签选择器 通配符选择器 浏览器自定义 ps 定位的越精准,优先级就越高,优先级高的样式会覆盖优先级低的 class和id选择器的使用场景 class名称可以重复,一般用于给多个元素赋予同样的样式;增加一个同名的class类就可以添加同样的样式,简化代码 id名称是唯一的,一般用于划分大的区块 CSS选择器的命名空间 使用语义化的命名可以使代码容易读懂 便于维护和多人协作 浏览器可能会因为不规范的命名产生不同的样式 列出你知道的伪类选择器 E:first-child | E:link | E:visited |E:active |E:hover |E:focus |E:lang(c) |E:enabled |E:disabled |E:checked |E::selection |E:root |E:nth-child(n) |E:nth-last-child(n) |E:nth-of-type(n) |E:nth-last-of-type(n) |E:last-child |E:first-of-type |E:last-of-type |E:only-child |E:only-of-type |E:empty |E:not(selector) | :first-child和:first-of-type的作用和区别 E:first-child首选是E的父元素中的第一个子元素，在这些子元素中选中E标签；E:first-of-type首选是E的父元素的第一个同类型的（E）标签 ps1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style type="text/css"&gt; div:first-of-type&#123; color: red; &#125; div:first-child&#123; color: green; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h3&gt;我是标题1&lt;/h3&gt; &lt;div&gt;我是第一个&lt;/div&gt; &lt;div&gt;我是第二个&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 以下选择器分别是什么意思?1234567891011121314#header&#123;&#125; /* id选择器，选择id名称为header的元素 */.header&#123;&#125; /* class选择器，选择class名称为header的元素 */.header .logo&#123;&#125; /* 后代选择器，选择class名称为header元素的后代元素中class名称为logo的所有元素 */.header.mobile&#123;&#125; /* 类选择器，选择class类同时具有header和mobile的元素 */.header p, .header h3&#123;&#125; /* 多元素选择器，选择header中的p和h3元素 */#header .nav&gt;li&#123;&#125; /* 后代选择器，选择id为header的后代元素中class为nav的直接子元素（也就是nav的最外层子元素，即第一代子元素）li */#header a:hover&#123;&#125; /* 后代元素选择器，选择id为header的所有后代元素a的鼠标悬停的效果 */ 运行如下代码，解析下输出样式的原因12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .item1:first-child&#123; color: red; &#125; .item1:first-of-type&#123; background: blue; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="ct"&gt; &lt;p class="item1"&gt;aa&lt;/p&gt; &lt;h3 class="item1"&gt;bb&lt;/h3&gt; &lt;h3 class="item1"&gt;ccc&lt;/h3&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 原因 蓝色背景：样式里面设置了first-of-type，也就是第一个类型的元素将应用为蓝色背景，而第一个类型就是p和h3，h3有2个，取第一个 红色字：first-child是指后代中第一个子元素，第一个子元素是p，所以只是p应用了红色字 text-align:center的作用 使块级元素内部的文本或者img标签等内联元素居中 ps123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; div&#123; text-align: center; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;p&gt;你好&lt;/p&gt; &lt;img src="http://oqev4hx8u.bkt.clouddn.com/css-13.png" alt="图片"&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 查询属性兼容性 输入属性后点show all &gt;&gt;caniuse.com]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[HTML基础]]></title>
      <url>%2F2017%2F02%2F23%2Fhtml%2F</url>
      <content type="text"><![CDATA[从URL到页面展现的过程概述 地址栏输入URL 域名解析 服务器处理请求 网站处理 浏览器处理响应 浏览器绘制网页 输入URL URL(Uniform Resoure Locator)统一资源定位符,分为协议、网络地址、资源路径,用于定位互联网上的资源,即网址 协议:浏览器和万维网之间的约定 http:找到网络上资源的协议 https:对http进行加密的协议 file:定位本地电脑文件的协议 ftp:文件的传输协议 网络地址:指示连接哪台计算机,可以是域名或者IP地址,可以包括端口号资源路径:指示从服务器上获取哪一项资源examplehttp://www.baidu.com/question/12345/ 协议:http 网络地址:www.baidu.com 资源路径:/question/12345/ 域名解析 我们是通过域名访问,浏览器对域名解析成对应IP地址,找到计算机 IP地址 IP地址为互联网上每一个网络和每一台主机分配的一个逻辑地址,如220.181.112.244 域名DN(domain name) 域名是为了识别主机名称和组织机构名称的一种具有分层的名称,如www.baidu.com 计算机域名系统DNS(Domain Name System or Domain Name Service) 主要是用于保存网络中所有主机的域名和对应IP地址,并具有将域名转换为IP地址功能的服务器,它是由域名解析器和域名服务器组成 域名解析的流程,如下 浏览器缓存——浏览器会缓存DNS记录一段时间 系统缓存——从Hosts文件查找是否有该域名和对应IP 路由器缓存——一般路由器也会缓存域名信息 ISP DNS 缓存——比如到电信的DNS上查找缓存(DNS劫持) 如果都没有找到,则向根域名服务器查找域名对应IP，根域名服务器把请求转发到下一级，直到找到IP ps 域名与 URL 是两个概念:域名是一台或一组服务器的名称,用来确定服务器在 Internet 上的位置；URL 是统一资源定位符,用来确定某一个文件的具体位置,例如，zhihu.com 是 知乎 的域名，根据这个域名可以找到知乎的服务器， zhihu.com/people/Compile 是 URL ,可以根据这个 URL 定位我的知乎主页 IP 地址与域名不是一一对应的关系:可以把多个提供相同服务的服务器 IP 设置为同一个域名,但在同一时刻一个域名只能解析出一个 IP地址；同时,一个 IP 地址可以绑定多个域名,数量不限 服务器处理请求 服务器上会有安装用于接收处理请求的应用——web server（常见的webserver产品有apache、nginx等）,并且决定采用哪种方法来处理这个请求 网页请求是一个单向请求的过程，即是一个主机向服务器请求数据，服务器返回相应的数据的过程。 web server 担任管控的角色，对于不同用户发送的请求，会结合配置文件，把不同请求委托给服务器上处理对应请求的程序进行处理（例如JSP脚本，服务器端JavaScript等一些服务器端技术），然后返回后台程序处理产生的结果作为响应 浏览器根据 URL 内容生成 HTTP 请求，请求中包含请求文件的位置、请求文件的方式等 服务器响应请求，将数据（可能是根据HTML协议组织的网页，包含页面的布局、文字等）返回给浏览器 如果返回的是一个页面，根据页面里一些外链的URL，例如图片的地址，它会按照之前的步骤以及第二步中忽略的请求部分再次获取 网站处理响应 网站处理，就是实际后台处理的工作 MVCMVC是一种设计模式,模型（model）–视图（view）–控制器（controller）,它们各自处理自己的任务，实现输入、处理和输出的分离 最上面的一层-视图（view）:视图是直接面向用户的一层，是前端工作的主力部分 最底下的一层-模型（model）:模型是将实际开发中的业务规则和所涉及的数据格式模型化，应用于模型的代码只需写一次就可以被多个视图重用。在MVC的三个部件中，模型拥有最多的处理任务。一个模型能为多个视图提供数据 中间的一层-控制器（controller）:它负责根据用户从”视图层”输入的指令，选取”数据层”中的数据，然后对其进行相应的操作，产生最终结果 ps 首先，控制器（controller）接收用户请求，并决定调用哪种模型来进行处理 然后，模型（model）用业务逻辑来处理用户的请求并返回数据 最后，控制器（controller）用相应的视图格式化模型返回html字符串给浏览器，浏览器呈现网页给用户。这部分完成后，就要开始接下来的浏览器处理部分 浏览器处理 现代浏览器渲染页面的过程是这样的：解析HTML以构建DOM树 –&gt; 构建渲染树 –&gt; 布局渲染树 –&gt; 绘制渲染树 浏览器渲染步骤加载 浏览器对一个html页面的加载顺序是从上而下的，并在加载过程并行进行解析渲染处理。在这个过程中遇到link标签、image标签、script标签时，浏览器会再次向服务器发送请求获取CSS文件、图片资源、JS文件，并执行JS代码，同步进行加载解析 解析、渲染 解析的过程，其实就是生成解析树，即DOM树。DOM树是由DOM元素及属性节点组成，加上CSS解析的样式对象和js解析后的动作实现。而渲染，就是将DOM树进行可视化表示 网页展示 浏览器通过上面步骤计算得到渲染树，是DOM树的可视化表示，构建渲染树使页面以正确的顺序绘制出来 浏览器下载的顺序是从上到下，渲染的顺序也是从上到下，下载和渲染同时进行 网页展示步骤 解析html成DOM树 解析html中的css，构建渲染树。完成后浏览器开始布局渲染树并绘制到屏幕 解析JavaScript，解析到的时候执行（JS的解析由浏览器中的JS解析引擎完成） &gt;&gt;从URL到页面展现的过程]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[vim、linus、git命令行]]></title>
      <url>%2F2017%2F02%2F21%2Fgitlinuxvim%2F</url>
      <content type="text"><![CDATA[vim vim是一个操作文本的编辑器,对文本进行添加、删除、复制、粘贴. 常用命令入门 查看文件：cat test.html 查看并编辑：vim test.html ,按下 i 会发现左下角出现 –INSERT– 表示可以输入内容 保存文件：按 esc , shift + : ,左下角出现 : ,输入 w 表示保存 ,输入 q 表示退出 ,输入 wq 表示保存退出 光标操作：按 esc ,使用 k 上一行, j 下一行 , h 向前, l 向后,也可以使用键盘箭头键来实现 删除内容：按 esc ,使用光标移动到想要删除的位置 dd 删除当前行, x 删除当前一个, 5x删除后面5个, 5X 删除前面5个, u 恢复前一次操作 快速翻页：按 ctrl + d 向下滚动半屏, ctrl + u 向上滚动半屏, ctrl + f 向下滚动一屏, ctrl + d 向上滚动半屏 给文本添加行号: 按 esc ,输入 :set nu , ctrl + g 显示此时光标所在位置的行号和总列数,输入 :set nonu取消行号,快速切换行号按 esc ,输入 : 0 切换到头部,例如输入:20光标切换到20行号位置. 跳转段落结尾: 按 esc , shift + ( 跳转到上一段落, shift +) 跳转到后一段落 实现复制和粘贴: 按 esc ,在光标所在位置按下 yy 表示复制当前行 , p 表示粘贴 查找某个字符串: 按esc , 输入:/foo 表示搜索字符串foo 常用命令基础光标移动 命令 作用 h,j,k,l 分别表示左,下,右,上 ctrl + f 上一页 ctrl + b 下一页 o 开启新的一行 ^ 一行的开始 $ 一行的结尾 gg 文档的第一行 [N]G 文档的第N行或者最后一行 编辑 命令 作用 r 分别表示左,下,右,上 J 合并下一行到上一行 s 删除光标所在的一个字符,光标还在当行 S 删除光标所在的一行,光标还在当行,不同于dd u 撤销上一步操作 ctrl + r 恢复上一步操作 . 重复最后一个命令 ~ 变换为大写 插入模式 命令 作用 i 插入到光标前面 I 插入到行的开始位置 a 插入到光标的后面 A 插入到行的最后位置 o,O 新开一行 Esc 关闭插入模式 退出 命令 作用 :w 保存 :wq 保存并关闭 :q 关闭(已保存) :q! 强制关闭 剪切/赋值 命令 作用 v 选中一个或多个字符 V 选中一行 dd 删除一行 dw 删除一个单词 x 删除后一个字符 X 删除前一个字符 D 删除一行最后一个字符 [N]yy 复制一行或者N行 yw 复制一个单词 p 粘贴 &gt;&gt;简明vim命令行]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[自学准备工作]]></title>
      <url>%2F2017%2F02%2F20%2Fweb%2F</url>
      <content type="text"><![CDATA[web前端开发职能职能 web前端工程师主要是 利用HTML CSS 及JS等WBE技术及与后端配合，实现网页页面的呈现、具备交互的功能以满足用户的需求. 常见简称 PM：项目经理 PD：产品经理 UE：交互设计师、视觉设计师 RD：后端工程师、前端工程师、无线工程师 QA：测试工程师 OP：运维工程师 互联网公司产品流程 项目经理提出需求,开会审核 设计定稿 前端工程师和后端工程师进行开发 进行自测、联调、测试（满足冒烟测试、回归测试） 上线 上线观察—项目总结 编辑器 sublime编辑器 &gt;&gt;sublime使用 markdowm常用语法 Markdown是一种轻量级的「标记语言」而且轻松的导出 HTML、PDF 和本身的 .md 文件，用起来非常方便。 常用语法 12345678910111213141516171819202122232425262728# 一级标题 h1## 二级标题 h2### 三级标题 h3#### 四级标题 h4##### 五级标题 h5这是段落 p- 无序列表- 无序列表- 无序列表1. 有序列表2. 有序列表3. 有序列表`var a = 1`[链接文字](http://www.baidu.com)![](http://www.baidu.com/imgs/a.png)&gt; 引用| 表头 | 表头 | 表头 || --- | --- | --- || 内容 | 内容 | 内容 || 内容 | 内容 | 内容 | &gt;&gt;markdowm官网 GitHub+hexo(博客) 本博客 &gt;&gt;手把手教你用Hexo+Github 搭建属于自己的博客 VPN Green &gt;&gt;Green官网]]></content>
    </entry>

    
  
  
</search>
